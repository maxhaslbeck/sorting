; Generated by Isabelle/LLVM-shallow
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"



declare void @isabelle_llvm_free(i8*)
declare i8* @isabelle_llvm_calloc(i64, i64)


define void @LLVM_DS_Array_arraycpy(i8* %dst, i8* %src, i64 %n) {

  start:
    br label %while_start

  while_start:
    %i = phi i64 [ %x1, %while_body ], [ 0, %start ]
    %x = icmp ult i64 %i, %n
    br i1 %x, label %while_body, label %while_end

  while_body:
    %xa = getelementptr i8, i8* %src, i64 %i
    %xaa = load i8, i8* %xa
    %p = getelementptr i8, i8* %dst, i64 %i
    store i8 %xaa, i8* %p
    %x1 = add i64 %i, 1
    br label %while_start

  while_end:
    ret void
}

define void @LLVM_DS_NArray_narray_free(i8* %p) {

  start:
    %a = ptrtoint i8* %p to i64
    %b = ptrtoint i8* null to i64
    %tmp = icmp eq i64 %a, %b
    br i1 %tmp, label %then, label %else

  then:
    br label %ctd_if

  else:
    %c = bitcast i8* %p to i8*
    call void @isabelle_llvm_free (i8* %c)
    br label %ctd_if

  ctd_if:
    ret void
}

define i64 @Sorting_Log2_word_clz_impl(i64 %x) {

  start:
    %x1 = icmp eq i64 %x, 0
    br i1 %x1, label %then, label %else

  then:
    br label %ctd_if

  else:
    %x2 = call i64 @Sorting_Log2_word_clz_impl1 (i64 %x)
    br label %ctd_if

  ctd_if:
    %x3 = phi i64 [ %x2, %else ], [ 64, %then ]
    ret i64 %x3
}

define i64 @Sorting_Log2_word_clz_impl1(i64 %x) {

  start:
    %x1 = insertvalue { i64, i64 } zeroinitializer, i64 0, 0
    %xa = insertvalue { i64, i64 } %x1, i64 %x, 1
    br label %while_start

  while_start:
    %xb = phi { i64, i64 } [ %x4, %while_body ], [ %xa, %start ]
    %a1 = extractvalue { i64, i64 } %xb, 0
    %x2 = extractvalue { i64, i64 } %xb, 1
    %x3 = icmp slt i64 0, %x2
    br i1 %x3, label %while_body, label %while_end

  while_body:
    %a11 = extractvalue { i64, i64 } %xb, 0
    %a2 = extractvalue { i64, i64 } %xb, 1
    %xaa = add i64 %a11, 1
    %xba = shl i64 %a2, 1
    %xca = insertvalue { i64, i64 } zeroinitializer, i64 %xaa, 0
    %x4 = insertvalue { i64, i64 } %xca, i64 %xba, 1
    br label %while_start

  while_end:
    %a12 = extractvalue { i64, i64 } %xb, 0
    %a21 = extractvalue { i64, i64 } %xb, 1
    ret i64 %a12
}

define i1 @Sorting_Strings_strcmp_impl({ i64, { i64, i8* } } %x, { i64, { i64, i8* } } %x1) {

  start:
    %l = extractvalue { i64, { i64, i8* } } %x, 0
    %x2 = extractvalue { i64, { i64, i8* } } %x, 1
    %c = extractvalue { i64, i8* } %x2, 0
    %a = extractvalue { i64, i8* } %x2, 1
    %la = extractvalue { i64, { i64, i8* } } %x1, 0
    %xb = extractvalue { i64, { i64, i8* } } %x1, 1
    %ca = extractvalue { i64, i8* } %xb, 0
    %aa = extractvalue { i64, i8* } %xb, 1
    %xd = icmp sle i64 %l, %la
    br i1 %xd, label %then, label %else

  then:
    %lb = extractvalue { i64, { i64, i8* } } %x, 0
    %xe = extractvalue { i64, { i64, i8* } } %x, 1
    %cb = extractvalue { i64, i8* } %xe, 0
    %ab = extractvalue { i64, i8* } %xe, 1
    br label %ctd_if

  else:
    %lb1 = extractvalue { i64, { i64, i8* } } %x1, 0
    %xe1 = extractvalue { i64, { i64, i8* } } %x1, 1
    %cb1 = extractvalue { i64, i8* } %xe1, 0
    %ab1 = extractvalue { i64, i8* } %xe1, 1
    br label %ctd_if

  ctd_if:
    %xe2 = phi i64 [ %lb1, %else ], [ %lb, %then ]
    %xf = insertvalue { i64, i2 } zeroinitializer, i64 0, 0
    %xg = insertvalue { i64, i2 } %xf, i2 0, 1
    br label %while_start

  while_start:
    %xfa = phi { i64, i2 } [ %x9, %ctd_ifa ], [ %xg, %ctd_if ]
    %a1 = extractvalue { i64, i2 } %xfa, 0
    %a2 = extractvalue { i64, i2 } %xfa, 1
    %xga = icmp slt i64 %a1, %xe2
    %x3 = icmp eq i2 %a2, 0
    %x4 = and i1 %xga, %x3
    br i1 %x4, label %while_body, label %while_end

  while_body:
    %a11 = extractvalue { i64, i2 } %xfa, 0
    %a21 = extractvalue { i64, i2 } %xfa, 1
    %lb2 = extractvalue { i64, { i64, i8* } } %x, 0
    %xga1 = extractvalue { i64, { i64, i8* } } %x, 1
    %cb2 = extractvalue { i64, i8* } %xga1, 0
    %ab2 = extractvalue { i64, i8* } %xga1, 1
    %xh = getelementptr i8, i8* %ab2, i64 %a11
    %xi = load i8, i8* %xh
    %lc = extractvalue { i64, { i64, i8* } } %x1, 0
    %xj = extractvalue { i64, { i64, i8* } } %x1, 1
    %cc = extractvalue { i64, i8* } %xj, 0
    %ac = extractvalue { i64, i8* } %xj, 1
    %xk = getelementptr i8, i8* %ac, i64 %a11
    %xl = load i8, i8* %xk
    %xm = icmp eq i8 %xi, %xl
    br i1 %xm, label %thena, label %elsea

  thena:
    %xna = add i64 %a11, 1
    %xo = insertvalue { i64, i2 } zeroinitializer, i64 %xna, 0
    %x5 = insertvalue { i64, i2 } %xo, i2 0, 1
    br label %ctd_ifa

  elsea:
    %xn = icmp ult i8 %xi, %xl
    br i1 %xn, label %thenb, label %elseb

  thenb:
    %xoa = add i64 %a11, 1
    %xp = insertvalue { i64, i2 } zeroinitializer, i64 %xoa, 0
    %x6 = insertvalue { i64, i2 } %xp, i2 -1, 1
    br label %ctd_ifb

  elseb:
    %xoa1 = add i64 %a11, 1
    %xp1 = insertvalue { i64, i2 } zeroinitializer, i64 %xoa1, 0
    %x7 = insertvalue { i64, i2 } %xp1, i2 1, 1
    br label %ctd_ifb

  ctd_ifb:
    %x8 = phi { i64, i2 } [ %x7, %elseb ], [ %x6, %thenb ]
    br label %ctd_ifa

  ctd_ifa:
    %x9 = phi { i64, i2 } [ %x8, %ctd_ifb ], [ %x5, %thena ]
    br label %while_start

  while_end:
    %a12 = extractvalue { i64, i2 } %xfa, 0
    %xga2 = extractvalue { i64, i2 } %xfa, 1
    %xha = icmp eq i2 %xga2, -1
    br i1 %xha, label %thenc, label %elsec

  thenc:
    br label %ctd_ifc

  elsec:
    %xia = icmp eq i2 %xga2, 0
    br i1 %xia, label %thend, label %elsed

  thend:
    %lb3 = extractvalue { i64, { i64, i8* } } %x, 0
    %xj1 = extractvalue { i64, { i64, i8* } } %x, 1
    %cb3 = extractvalue { i64, i8* } %xj1, 0
    %ab3 = extractvalue { i64, i8* } %xj1, 1
    %lc1 = extractvalue { i64, { i64, i8* } } %x1, 0
    %xl1 = extractvalue { i64, { i64, i8* } } %x1, 1
    %cc1 = extractvalue { i64, i8* } %xl1, 0
    %ac1 = extractvalue { i64, i8* } %xl1, 1
    %x10 = icmp slt i64 %lb3, %lc1
    br label %ctd_ifd

  elsed:
    br label %ctd_ifd

  ctd_ifd:
    %x11 = phi i1 [ 0, %elsed ], [ %x10, %thend ]
    br label %ctd_ifc

  ctd_ifc:
    %x12 = phi i1 [ %x11, %ctd_ifd ], [ 1, %thenc ]
    ret i1 %x12
}

define i8 @llstrcmp({ i64, { i64, i8* } }* %ap, { i64, { i64, i8* } }* %bp) {

  start:
    %a = load { i64, { i64, i8* } }, { i64, { i64, i8* } }* %ap
    %b = load { i64, { i64, i8* } }, { i64, { i64, i8* } }* %bp
    %r = call i1 @Sorting_Strings_strcmp_impl ({ i64, { i64, i8* } } %a, { i64, { i64, i8* } } %b)
    %tmp = icmp ne i1 %r, 0
    br i1 %tmp, label %then, label %else

  then:
    br label %ctd_if

  else:
    br label %ctd_if

  ctd_if:
    %x = phi i8 [ 0, %else ], [ 1, %then ]
    ret i8 %x
}

define void @str_init({ i64, { i64, i8* } }* %sp) {

  start:
    store { i64, { i64, i8* } } zeroinitializer, { i64, { i64, i8* } }* %sp
    ret void
}

define { i64, { i64, i8* } } @LLVM_DS_Array_List_arl_resize(i64 %c, { i64, { i64, i8* } } %al) {

  start:
    %l = extractvalue { i64, { i64, i8* } } %al, 0
    %x = extractvalue { i64, { i64, i8* } } %al, 1
    %c1 = extractvalue { i64, i8* } %x, 0
    %a = extractvalue { i64, i8* } %x, 1
    %r = sub i64 0, 1
    %max = lshr i64 %r, 1
    %maxa = udiv i64 %max, 2
    %b = icmp ule i64 %c1, %maxa
    br i1 %b, label %then, label %else

  then:
    %ca = mul i64 %c1, 2
    %cok = icmp sle i64 %c, %ca
    br i1 %cok, label %thena, label %elsea

  thena:
    br label %ctd_ifa

  elsea:
    br label %ctd_ifa

  ctd_ifa:
    %x1 = phi i64 [ %c, %elsea ], [ %ca, %thena ]
    br label %ctd_if

  else:
    br label %ctd_if

  ctd_if:
    %ca1 = phi i64 [ %c, %else ], [ %x1, %ctd_ifa ]
    %tmpa = icmp eq i64 %ca1, 0
    br i1 %tmpa, label %thenb, label %elseb

  thenb:
    br label %ctd_ifb

  elseb:
    %t = getelementptr i8, i8* null, i64 1
    %d = ptrtoint i8* %t to i64
    %e = call i8* @isabelle_llvm_calloc (i64 %ca1, i64 %d)
    %x2 = bitcast i8* %e to i8*
    br label %ctd_ifb

  ctd_ifb:
    %a1 = phi i8* [ %x2, %elseb ], [ null, %thenb ]
    call void @LLVM_DS_Array_arraycpy (i8* %a1, i8* %a, i64 %l)
    call void @LLVM_DS_NArray_narray_free (i8* %a)
    %xaa = insertvalue { i64, { i64, i8* } } zeroinitializer, i64 %l, 0
    %xe = insertvalue { i64, i8* } zeroinitializer, i64 %ca1, 0
    %x3 = insertvalue { i64, i8* } %xe, i8* %a1, 1
    %x4 = insertvalue { i64, { i64, i8* } } %xaa, { i64, i8* } %x3, 1
    ret { i64, { i64, i8* } } %x4
}

define void @str_append({ i64, { i64, i8* } }* %sp, i8 %x) {

  start:
    %s = load { i64, { i64, i8* } }, { i64, { i64, i8* } }* %sp
    %l = extractvalue { i64, { i64, i8* } } %s, 0
    %x1 = extractvalue { i64, { i64, i8* } } %s, 1
    %c = extractvalue { i64, i8* } %x1, 0
    %a = extractvalue { i64, i8* } %x1, 1
    %lb = add i64 %l, 1
    %lc = extractvalue { i64, { i64, i8* } } %s, 0
    %xaa = extractvalue { i64, { i64, i8* } } %s, 1
    %ca = extractvalue { i64, i8* } %xaa, 0
    %aa = extractvalue { i64, i8* } %xaa, 1
    %cok = icmp sle i64 %lb, %ca
    br i1 %cok, label %then, label %else

  then:
    %xb = insertvalue { i64, { i64, i8* } } zeroinitializer, i64 %lc, 0
    %xc = insertvalue { i64, i8* } zeroinitializer, i64 %ca, 0
    %x2 = insertvalue { i64, i8* } %xc, i8* %aa, 1
    %x3 = insertvalue { i64, { i64, i8* } } %xb, { i64, i8* } %x2, 1
    br label %ctd_if

  else:
    %xb1 = insertvalue { i64, i8* } zeroinitializer, i64 %ca, 0
    %tmpa = insertvalue { i64, i8* } %xb1, i8* %aa, 1
    %xc1 = insertvalue { i64, { i64, i8* } } zeroinitializer, i64 %lc, 0
    %x4 = insertvalue { i64, { i64, i8* } } %xc1, { i64, i8* } %tmpa, 1
    %x5 = call { i64, { i64, i8* } } @LLVM_DS_Array_List_arl_resize (i64 %lb, { i64, { i64, i8* } } %x4)
    br label %ctd_if

  ctd_if:
    %al = phi { i64, { i64, i8* } } [ %x5, %else ], [ %x3, %then ]
    %ld = extractvalue { i64, { i64, i8* } } %al, 0
    %xb2 = extractvalue { i64, { i64, i8* } } %al, 1
    %cb = extractvalue { i64, i8* } %xb2, 0
    %ab = extractvalue { i64, i8* } %xb2, 1
    %p = getelementptr i8, i8* %ab, i64 %ld
    store i8 %x, i8* %p
    %le = add i64 %ld, 1
    %xca = insertvalue { i64, { i64, i8* } } zeroinitializer, i64 %le, 0
    %xd = insertvalue { i64, i8* } zeroinitializer, i64 %cb, 0
    %xe = insertvalue { i64, i8* } %xd, i8* %ab, 1
    %sa = insertvalue { i64, { i64, i8* } } %xca, { i64, i8* } %xe, 1
    store { i64, { i64, i8* } } %sa, { i64, { i64, i8* } }* %sp
    ret void
}

define i64* @Proto_IICF_EOArray_swap_eo_impl(i64* %x, i64 %x1, i64 %x2) {

  start:
    %x3 = getelementptr i64, i64* %x, i64 %x1
    %r = load i64, i64* %x3
    %xa = insertvalue { i64, i64* } zeroinitializer, i64 %r, 0
    %xb = insertvalue { i64, i64* } %xa, i64* %x, 1
    %a1 = extractvalue { i64, i64* } %xb, 0
    %a2 = extractvalue { i64, i64* } %xb, 1
    %xc = getelementptr i64, i64* %a2, i64 %x2
    %ra = load i64, i64* %xc
    %xd = insertvalue { i64, i64* } zeroinitializer, i64 %ra, 0
    %xe = insertvalue { i64, i64* } %xd, i64* %a2, 1
    %a1a = extractvalue { i64, i64* } %xe, 0
    %a2a = extractvalue { i64, i64* } %xe, 1
    %p = getelementptr i64, i64* %a2a, i64 %x1
    store i64 %a1a, i64* %p
    %pa = getelementptr i64, i64* %a2a, i64 %x2
    store i64 %a1, i64* %pa
    ret i64* %a2a
}

define { i64, { i64, i8* } }* @Proto_IICF_EOArray_swap_eo_impl1({ i64, { i64, i8* } }* %x, i64 %x1, i64 %x2) {

  start:
    %x3 = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %x, i64 %x1
    %r = load { i64, { i64, i8* } }, { i64, { i64, i8* } }* %x3
    %xa = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } zeroinitializer, { i64, { i64, i8* } } %r, 0
    %xb = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xa, { i64, { i64, i8* } }* %x, 1
    %a1 = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xb, 0
    %a2 = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xb, 1
    %xc = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %a2, i64 %x2
    %ra = load { i64, { i64, i8* } }, { i64, { i64, i8* } }* %xc
    %xd = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } zeroinitializer, { i64, { i64, i8* } } %ra, 0
    %xe = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xd, { i64, { i64, i8* } }* %a2, 1
    %a1a = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xe, 0
    %a2a = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xe, 1
    %p = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %a2a, i64 %x1
    store { i64, { i64, i8* } } %a1a, { i64, { i64, i8* } }* %p
    %pa = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %a2a, i64 %x2
    store { i64, { i64, i8* } } %a1, { i64, { i64, i8* } }* %pa
    ret { i64, { i64, i8* } }* %a2a
}

define { i64, { i64, i8* } }* @str_pdqsort({ i64, { i64, i8* } }* %x, i64 %x1, i64 %x2) {

  start:
    %x3 = sub i64 %x2, %x1
    %xa = icmp slt i64 1, %x3
    br i1 %xa, label %then, label %else

  then:
    %xba = sub i64 64, 1
    %xc = call i64 @Sorting_Log2_word_clz_impl (i64 %x3)
    %bib = sub i64 %xba, %xc
    %xd = insertvalue { i64, i64 } zeroinitializer, i64 %x2, 0
    %tmpaa = insertvalue { i64, i64 } %xd, i64 %bib, 1
    %xe = insertvalue { i64, { i64, i64 } } zeroinitializer, i64 %x1, 0
    %tmpab = insertvalue { i64, { i64, i64 } } %xe, { i64, i64 } %tmpaa, 1
    %xf = insertvalue { { i64, { i64, i8* } }*, { i64, { i64, i64 } } } zeroinitializer, { i64, { i64, i8* } }* %x, 0
    %tmpac = insertvalue { { i64, { i64, i8* } }*, { i64, { i64, i64 } } } %xf, { i64, { i64, i64 } } %tmpab, 1
    %xg = insertvalue { i1, { { i64, { i64, i8* } }*, { i64, { i64, i64 } } } } zeroinitializer, i1 1, 0
    %x4 = insertvalue { i1, { { i64, { i64, i8* } }*, { i64, { i64, i64 } } } } %xg, { { i64, { i64, i8* } }*, { i64, { i64, i64 } } } %tmpac, 1
    %x5 = call { i64, { i64, i8* } }* @Sorting_Export_Code_str_sort_pdqsort_impl_f_07258824 ({ i1, { { i64, { i64, i8* } }*, { i64, { i64, i64 } } } } %x4)
    br label %ctd_if

  else:
    br label %ctd_if

  ctd_if:
    %x6 = phi { i64, { i64, i8* } }* [ %x, %else ], [ %x5, %then ]
    ret { i64, { i64, i8* } }* %x6
}

define { i64, { i64, i8* } }* @Sorting_Export_Code_str_sort_heapsort_impl({ i64, { i64, i8* } }* %x, i64 %x1, i64 %x2) {

  start:
    %x3 = sub i64 %x2, %x1
    %xa = icmp slt i64 1, %x3
    br i1 %xa, label %then, label %else

  then:
    %xb = call { i64, { i64, i8* } }* @Sorting_Export_Code_str_sort_heapify_btu_impl (i64 %x1, i64 %x2, { i64, { i64, i8* } }* %x)
    %xc = insertvalue { { i64, { i64, i8* } }*, i64 } zeroinitializer, { i64, { i64, i8* } }* %xb, 0
    %xd = insertvalue { { i64, { i64, i8* } }*, i64 } %xc, i64 %x2, 1
    br label %while_start

  while_start:
    %xca = phi { { i64, { i64, i8* } }*, i64 } [ %x5, %while_body ], [ %xd, %then ]
    %a1 = extractvalue { { i64, { i64, i8* } }*, i64 } %xca, 0
    %a2 = extractvalue { { i64, { i64, i8* } }*, i64 } %xca, 1
    %xda = add i64 %x1, 1
    %x4 = icmp slt i64 %xda, %a2
    br i1 %x4, label %while_body, label %while_end

  while_body:
    %a11 = extractvalue { { i64, { i64, i8* } }*, i64 } %xca, 0
    %a21 = extractvalue { { i64, { i64, i8* } }*, i64 } %xca, 1
    %xda1 = sub i64 %a21, 1
    %xea = call { i64, { i64, i8* } }* @Proto_IICF_EOArray_swap_eo_impl1 ({ i64, { i64, i8* } }* %a11, i64 %x1, i64 %xda1)
    %xfa = sub i64 %a21, 1
    %xg = call { i64, { i64, i8* } }* @Sorting_Export_Code_str_sort_sift_down_impl (i64 %x1, i64 %xfa, i64 %x1, { i64, { i64, i8* } }* %xea)
    %xha = sub i64 %a21, 1
    %xi = insertvalue { { i64, { i64, i8* } }*, i64 } zeroinitializer, { i64, { i64, i8* } }* %xg, 0
    %x5 = insertvalue { { i64, { i64, i8* } }*, i64 } %xi, i64 %xha, 1
    br label %while_start

  while_end:
    %a12 = extractvalue { { i64, { i64, i8* } }*, i64 } %xca, 0
    %a22 = extractvalue { { i64, { i64, i8* } }*, i64 } %xca, 1
    br label %ctd_if

  else:
    br label %ctd_if

  ctd_if:
    %x6 = phi { i64, { i64, i8* } }* [ %x, %else ], [ %a12, %while_end ]
    ret { i64, { i64, i8* } }* %x6
}

define i64* @pdqsort(i64* %x, i64 %x1, i64 %x2) {

  start:
    %x3 = sub i64 %x2, %x1
    %xa = icmp slt i64 1, %x3
    br i1 %xa, label %then, label %else

  then:
    %xba = sub i64 64, 1
    %xc = call i64 @Sorting_Log2_word_clz_impl (i64 %x3)
    %bib = sub i64 %xba, %xc
    %xd = insertvalue { i64, i64 } zeroinitializer, i64 %x2, 0
    %tmpaa = insertvalue { i64, i64 } %xd, i64 %bib, 1
    %xe = insertvalue { i64, { i64, i64 } } zeroinitializer, i64 %x1, 0
    %tmpab = insertvalue { i64, { i64, i64 } } %xe, { i64, i64 } %tmpaa, 1
    %xf = insertvalue { i64*, { i64, { i64, i64 } } } zeroinitializer, i64* %x, 0
    %tmpac = insertvalue { i64*, { i64, { i64, i64 } } } %xf, { i64, { i64, i64 } } %tmpab, 1
    %xg = insertvalue { i1, { i64*, { i64, { i64, i64 } } } } zeroinitializer, i1 1, 0
    %x4 = insertvalue { i1, { i64*, { i64, { i64, i64 } } } } %xg, { i64*, { i64, { i64, i64 } } } %tmpac, 1
    %x5 = call i64* @Sorting_Export_Code_unat_sort_pdqsort_impl_f_07214832 ({ i1, { i64*, { i64, { i64, i64 } } } } %x4)
    br label %ctd_if

  else:
    br label %ctd_if

  ctd_if:
    %x6 = phi i64* [ %x, %else ], [ %x5, %then ]
    ret i64* %x6
}

define { i64, { i64, i8* } }* @str_introsort({ i64, { i64, i8* } }* %x, i64 %x1, i64 %x2) {

  start:
    %x3 = sub i64 %x2, %x1
    %xa = icmp slt i64 1, %x3
    br i1 %xa, label %then, label %else

  then:
    %xb = sub i64 %x2, %x1
    %xc = sub i64 64, 1
    %xd = call i64 @Sorting_Log2_word_clz_impl (i64 %xb)
    %xe = sub i64 %xc, %xd
    %xf = mul i64 %xe, 2
    %xg = call { i64, { i64, i8* } }* @Sorting_Export_Code_str_sort_introsort_aux_impl ({ i64, { i64, i8* } }* %x, i64 %x1, i64 %x2, i64 %xf)
    %x4 = call { i64, { i64, i8* } }* @Sorting_Export_Code_str_sort_final_insertion_sort_impl ({ i64, { i64, i8* } }* %xg, i64 %x1, i64 %x2)
    br label %ctd_if

  else:
    br label %ctd_if

  ctd_if:
    %x5 = phi { i64, { i64, i8* } }* [ %x, %else ], [ %x4, %then ]
    ret { i64, { i64, i8* } }* %x5
}

define { i64, { i64, i8* } }* @Sorting_Export_Code_str_sort_sift_down_impl(i64 %x, i64 %x1, i64 %x2, { i64, { i64, i8* } }* %x3) {

  start:
    %x4 = sub i64 %x2, %x
    %xa = add i64 %x, %x4
    %xb = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %x3, i64 %xa
    %r = load { i64, { i64, i8* } }, { i64, { i64, i8* } }* %xb
    %xc = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } zeroinitializer, { i64, { i64, i8* } } %r, 0
    %xd = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xc, { i64, { i64, i8* } }* %x3, 1
    %a1 = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xd, 0
    %a2 = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xd, 1
    %xe = insertvalue { i64, i1 } zeroinitializer, i64 %x4, 0
    %tmpb = insertvalue { i64, i1 } %xe, i1 1, 1
    %xf = insertvalue { { i64, { i64, i8* } }*, { i64, i1 } } zeroinitializer, { i64, { i64, i8* } }* %a2, 0
    %xg = insertvalue { { i64, { i64, i8* } }*, { i64, i1 } } %xf, { i64, i1 } %tmpb, 1
    br label %while_start

  while_start:
    %xea = phi { { i64, { i64, i8* } }*, { i64, i1 } } [ %x16, %ctd_if ], [ %xg, %start ]
    %a1a = extractvalue { { i64, { i64, i8* } }*, { i64, i1 } } %xea, 0
    %xfa = extractvalue { { i64, { i64, i8* } }*, { i64, i1 } } %xea, 1
    %a1b = extractvalue { i64, i1 } %xfa, 0
    %a2b = extractvalue { i64, i1 } %xfa, 1
    %xga = sub i64 %x1, %x
    %xha = sub i64 %xga, 1
    %xia = udiv i64 %xha, 2
    %xj = icmp slt i64 %a1b, %xia
    %x5 = and i1 %xj, %a2b
    br i1 %x5, label %while_body, label %while_end

  while_body:
    %a1a1 = extractvalue { { i64, { i64, i8* } }*, { i64, i1 } } %xea, 0
    %xfa1 = extractvalue { { i64, { i64, i8* } }*, { i64, i1 } } %xea, 1
    %a1b1 = extractvalue { i64, i1 } %xfa1, 0
    %a2b1 = extractvalue { i64, i1 } %xfa1, 1
    %xga1 = mul i64 2, %a1b1
    %xha1 = add i64 %xga1, 1
    %xi = mul i64 2, %a1b1
    %xja = add i64 %xi, 2
    %xk = add i64 %x, %xha1
    %xl = add i64 %x, %xja
    %xm = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %a1a1, i64 %xk
    %ra = load { i64, { i64, i8* } }, { i64, { i64, i8* } }* %xm
    %xn = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } zeroinitializer, { i64, { i64, i8* } } %ra, 0
    %xo = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xn, { i64, { i64, i8* } }* %a1a1, 1
    %a1c = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xo, 0
    %a2a = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xo, 1
    %xp = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %a2a, i64 %xl
    %rb = load { i64, { i64, i8* } }, { i64, { i64, i8* } }* %xp
    %xq = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } zeroinitializer, { i64, { i64, i8* } } %rb, 0
    %xr = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xq, { i64, { i64, i8* } }* %a2a, 1
    %a1aa = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xr, 0
    %a2aa = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xr, 1
    %xs = call i1 @Sorting_Strings_strcmp_impl ({ i64, { i64, i8* } } %a1c, { i64, { i64, i8* } } %a1aa)
    %p = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %a2aa, i64 %xk
    store { i64, { i64, i8* } } %a1c, { i64, { i64, i8* } }* %p
    %pa = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %a2aa, i64 %xl
    store { i64, { i64, i8* } } %a1aa, { i64, { i64, i8* } }* %pa
    br i1 %xs, label %then, label %else

  then:
    %xw = add i64 %x, %xja
    %xx = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %a1a1, i64 %xw
    %rc = load { i64, { i64, i8* } }, { i64, { i64, i8* } }* %xx
    %xy = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } zeroinitializer, { i64, { i64, i8* } } %rc, 0
    %xz = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xy, { i64, { i64, i8* } }* %a1a1, 1
    %a1d = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xz, 0
    %a2c = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xz, 1
    %ya = call i1 @Sorting_Strings_strcmp_impl ({ i64, { i64, i8* } } %a1, { i64, { i64, i8* } } %a1d)
    %pb = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %a2c, i64 %xw
    store { i64, { i64, i8* } } %a1d, { i64, { i64, i8* } }* %pb
    br i1 %ya, label %thena, label %elsea

  thena:
    %yd = add i64 %x, %xja
    %ye = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %a1a1, i64 %yd
    %rd = load { i64, { i64, i8* } }, { i64, { i64, i8* } }* %ye
    %yf = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } zeroinitializer, { i64, { i64, i8* } } %rd, 0
    %yg = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %yf, { i64, { i64, i8* } }* %a1a1, 1
    %a1ca = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %yg, 0
    %a2ca = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %yg, 1
    %yh = add i64 %x, %a1b1
    %pc = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %a2ca, i64 %yh
    store { i64, { i64, i8* } } %a1ca, { i64, { i64, i8* } }* %pc
    %yj = insertvalue { { i64, { i64, i8* } }*, { i64, i1 } } zeroinitializer, { i64, { i64, i8* } }* %a2ca, 0
    %yk = insertvalue { i64, i1 } zeroinitializer, i64 %xja, 0
    %x6 = insertvalue { i64, i1 } %yk, i1 1, 1
    %x7 = insertvalue { { i64, { i64, i8* } }*, { i64, i1 } } %yj, { i64, i1 } %x6, 1
    br label %ctd_ifa

  elsea:
    %yd1 = insertvalue { { i64, { i64, i8* } }*, { i64, i1 } } zeroinitializer, { i64, { i64, i8* } }* %a1a1, 0
    %ye1 = insertvalue { i64, i1 } zeroinitializer, i64 %a1b1, 0
    %x8 = insertvalue { i64, i1 } %ye1, i1 0, 1
    %x9 = insertvalue { { i64, { i64, i8* } }*, { i64, i1 } } %yd1, { i64, i1 } %x8, 1
    br label %ctd_ifa

  ctd_ifa:
    %x10 = phi { { i64, { i64, i8* } }*, { i64, i1 } } [ %x9, %elsea ], [ %x7, %thena ]
    br label %ctd_if

  else:
    %xw1 = add i64 %x, %xha1
    %xx1 = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %a1a1, i64 %xw1
    %rc1 = load { i64, { i64, i8* } }, { i64, { i64, i8* } }* %xx1
    %xy1 = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } zeroinitializer, { i64, { i64, i8* } } %rc1, 0
    %xz1 = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xy1, { i64, { i64, i8* } }* %a1a1, 1
    %a1d1 = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xz1, 0
    %a2c1 = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xz1, 1
    %ya1 = call i1 @Sorting_Strings_strcmp_impl ({ i64, { i64, i8* } } %a1, { i64, { i64, i8* } } %a1d1)
    %pb1 = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %a2c1, i64 %xw1
    store { i64, { i64, i8* } } %a1d1, { i64, { i64, i8* } }* %pb1
    br i1 %ya1, label %thenb, label %elseb

  thenb:
    %yd2 = add i64 %x, %xha1
    %ye2 = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %a1a1, i64 %yd2
    %rd1 = load { i64, { i64, i8* } }, { i64, { i64, i8* } }* %ye2
    %yf1 = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } zeroinitializer, { i64, { i64, i8* } } %rd1, 0
    %yg1 = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %yf1, { i64, { i64, i8* } }* %a1a1, 1
    %a1ca1 = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %yg1, 0
    %a2ca1 = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %yg1, 1
    %yh1 = add i64 %x, %a1b1
    %pc1 = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %a2ca1, i64 %yh1
    store { i64, { i64, i8* } } %a1ca1, { i64, { i64, i8* } }* %pc1
    %yj1 = insertvalue { { i64, { i64, i8* } }*, { i64, i1 } } zeroinitializer, { i64, { i64, i8* } }* %a2ca1, 0
    %yk1 = insertvalue { i64, i1 } zeroinitializer, i64 %xha1, 0
    %x11 = insertvalue { i64, i1 } %yk1, i1 1, 1
    %x12 = insertvalue { { i64, { i64, i8* } }*, { i64, i1 } } %yj1, { i64, i1 } %x11, 1
    br label %ctd_ifb

  elseb:
    %yd3 = insertvalue { { i64, { i64, i8* } }*, { i64, i1 } } zeroinitializer, { i64, { i64, i8* } }* %a1a1, 0
    %ye3 = insertvalue { i64, i1 } zeroinitializer, i64 %a1b1, 0
    %x13 = insertvalue { i64, i1 } %ye3, i1 0, 1
    %x14 = insertvalue { { i64, { i64, i8* } }*, { i64, i1 } } %yd3, { i64, i1 } %x13, 1
    br label %ctd_ifb

  ctd_ifb:
    %x15 = phi { { i64, { i64, i8* } }*, { i64, i1 } } [ %x14, %elseb ], [ %x12, %thenb ]
    br label %ctd_if

  ctd_if:
    %x16 = phi { { i64, { i64, i8* } }*, { i64, i1 } } [ %x15, %ctd_ifb ], [ %x10, %ctd_ifa ]
    br label %while_start

  while_end:
    %a1a2 = extractvalue { { i64, { i64, i8* } }*, { i64, i1 } } %xea, 0
    %xfa2 = extractvalue { { i64, { i64, i8* } }*, { i64, i1 } } %xea, 1
    %a1b2 = extractvalue { i64, i1 } %xfa2, 0
    %a2b2 = extractvalue { i64, i1 } %xfa2, 1
    %xga2 = sub i64 %x1, %x
    %xha2 = udiv i64 %xga2, 2
    %xi1 = icmp slt i64 %a1b2, %xha2
    br i1 %xi1, label %thenc, label %elsec

  thenc:
    %xj1 = mul i64 2, %a1b2
    %xka = add i64 %xj1, 1
    %xl1 = add i64 %x, %xka
    %xm1 = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %a1a2, i64 %xl1
    %ra1 = load { i64, { i64, i8* } }, { i64, { i64, i8* } }* %xm1
    %xn1 = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } zeroinitializer, { i64, { i64, i8* } } %ra1, 0
    %xo1 = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xn1, { i64, { i64, i8* } }* %a1a2, 1
    %a1c1 = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xo1, 0
    %a2a1 = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xo1, 1
    %xp1 = call i1 @Sorting_Strings_strcmp_impl ({ i64, { i64, i8* } } %a1, { i64, { i64, i8* } } %a1c1)
    %p1 = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %a2a1, i64 %xl1
    store { i64, { i64, i8* } } %a1c1, { i64, { i64, i8* } }* %p1
    br i1 %xp1, label %thend, label %elsed

  thend:
    %xs1 = add i64 %x, %xka
    %xt = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %a1a2, i64 %xs1
    %rb1 = load { i64, { i64, i8* } }, { i64, { i64, i8* } }* %xt
    %xu = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } zeroinitializer, { i64, { i64, i8* } } %rb1, 0
    %xv = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xu, { i64, { i64, i8* } }* %a1a2, 1
    %a1ca2 = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xv, 0
    %a2c2 = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xv, 1
    %xw2 = add i64 %x, %a1b2
    %pa1 = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %a2c2, i64 %xw2
    store { i64, { i64, i8* } } %a1ca2, { i64, { i64, i8* } }* %pa1
    %xy2 = add i64 %x, %xka
    %pb2 = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %a2c2, i64 %xy2
    store { i64, { i64, i8* } } %a1, { i64, { i64, i8* } }* %pb2
    br label %ctd_ifd

  elsed:
    %xs2 = add i64 %x, %a1b2
    %pa2 = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %a1a2, i64 %xs2
    store { i64, { i64, i8* } } %a1, { i64, { i64, i8* } }* %pa2
    br label %ctd_ifd

  ctd_ifd:
    %x17 = phi { i64, { i64, i8* } }* [ %a1a2, %elsed ], [ %a2c2, %thend ]
    br label %ctd_ifc

  elsec:
    %xj2 = add i64 %x, %a1b2
    %p2 = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %a1a2, i64 %xj2
    store { i64, { i64, i8* } } %a1, { i64, { i64, i8* } }* %p2
    br label %ctd_ifc

  ctd_ifc:
    %x18 = phi { i64, { i64, i8* } }* [ %a1a2, %elsec ], [ %x17, %ctd_ifd ]
    ret { i64, { i64, i8* } }* %x18
}

define i64* @heapsort(i64* %x, i64 %x1, i64 %x2) {

  start:
    %x3 = sub i64 %x2, %x1
    %xa = icmp slt i64 1, %x3
    br i1 %xa, label %then, label %else

  then:
    %xb = call i64* @Sorting_Export_Code_unat_sort_heapify_btu_impl (i64 %x1, i64 %x2, i64* %x)
    %xc = insertvalue { i64*, i64 } zeroinitializer, i64* %xb, 0
    %xd = insertvalue { i64*, i64 } %xc, i64 %x2, 1
    br label %while_start

  while_start:
    %xca = phi { i64*, i64 } [ %x5, %while_body ], [ %xd, %then ]
    %a1 = extractvalue { i64*, i64 } %xca, 0
    %a2 = extractvalue { i64*, i64 } %xca, 1
    %xda = add i64 %x1, 1
    %x4 = icmp slt i64 %xda, %a2
    br i1 %x4, label %while_body, label %while_end

  while_body:
    %a11 = extractvalue { i64*, i64 } %xca, 0
    %a21 = extractvalue { i64*, i64 } %xca, 1
    %xda1 = sub i64 %a21, 1
    %xea = call i64* @Proto_IICF_EOArray_swap_eo_impl (i64* %a11, i64 %x1, i64 %xda1)
    %xfa = sub i64 %a21, 1
    %xg = call i64* @Sorting_Export_Code_unat_sort_sift_down_impl (i64 %x1, i64 %xfa, i64 %x1, i64* %xea)
    %xha = sub i64 %a21, 1
    %xi = insertvalue { i64*, i64 } zeroinitializer, i64* %xg, 0
    %x5 = insertvalue { i64*, i64 } %xi, i64 %xha, 1
    br label %while_start

  while_end:
    %a12 = extractvalue { i64*, i64 } %xca, 0
    %a22 = extractvalue { i64*, i64 } %xca, 1
    br label %ctd_if

  else:
    br label %ctd_if

  ctd_if:
    %x6 = phi i64* [ %x, %else ], [ %a12, %while_end ]
    ret i64* %x6
}

define i64* @introsort(i64* %x, i64 %x1, i64 %x2) {

  start:
    %x3 = sub i64 %x2, %x1
    %xa = icmp slt i64 1, %x3
    br i1 %xa, label %then, label %else

  then:
    %xb = sub i64 %x2, %x1
    %xc = sub i64 64, 1
    %xd = call i64 @Sorting_Log2_word_clz_impl (i64 %xb)
    %xe = sub i64 %xc, %xd
    %xf = mul i64 %xe, 2
    %xg = call i64* @introsort_aux (i64* %x, i64 %x1, i64 %x2, i64 %xf)
    %x4 = call i64* @insertion_sort (i64* %xg, i64 %x1, i64 %x2)
    br label %ctd_if

  else:
    br label %ctd_if

  ctd_if:
    %x5 = phi i64* [ %x, %else ], [ %x4, %then ]
    ret i64* %x5
}

define i64* @Sorting_Export_Code_unat_sort_sift_down_impl(i64 %x, i64 %x1, i64 %x2, i64* %x3) {

  start:
    %x4 = sub i64 %x2, %x
    %xa = add i64 %x, %x4
    %xb = getelementptr i64, i64* %x3, i64 %xa
    %r = load i64, i64* %xb
    %xc = insertvalue { i64, i64* } zeroinitializer, i64 %r, 0
    %xd = insertvalue { i64, i64* } %xc, i64* %x3, 1
    %a1 = extractvalue { i64, i64* } %xd, 0
    %a2 = extractvalue { i64, i64* } %xd, 1
    %xe = insertvalue { i64, i1 } zeroinitializer, i64 %x4, 0
    %tmpb = insertvalue { i64, i1 } %xe, i1 1, 1
    %xf = insertvalue { i64*, { i64, i1 } } zeroinitializer, i64* %a2, 0
    %xg = insertvalue { i64*, { i64, i1 } } %xf, { i64, i1 } %tmpb, 1
    br label %while_start

  while_start:
    %xea = phi { i64*, { i64, i1 } } [ %x16, %ctd_if ], [ %xg, %start ]
    %a1a = extractvalue { i64*, { i64, i1 } } %xea, 0
    %xfa = extractvalue { i64*, { i64, i1 } } %xea, 1
    %a1b = extractvalue { i64, i1 } %xfa, 0
    %a2b = extractvalue { i64, i1 } %xfa, 1
    %xga = sub i64 %x1, %x
    %xha = sub i64 %xga, 1
    %xia = udiv i64 %xha, 2
    %xj = icmp slt i64 %a1b, %xia
    %x5 = and i1 %xj, %a2b
    br i1 %x5, label %while_body, label %while_end

  while_body:
    %a1a1 = extractvalue { i64*, { i64, i1 } } %xea, 0
    %xfa1 = extractvalue { i64*, { i64, i1 } } %xea, 1
    %a1b1 = extractvalue { i64, i1 } %xfa1, 0
    %a2b1 = extractvalue { i64, i1 } %xfa1, 1
    %xga1 = mul i64 2, %a1b1
    %xha1 = add i64 %xga1, 1
    %xi = mul i64 2, %a1b1
    %xja = add i64 %xi, 2
    %xk = add i64 %x, %xha1
    %xl = add i64 %x, %xja
    %xm = getelementptr i64, i64* %a1a1, i64 %xk
    %ra = load i64, i64* %xm
    %xn = insertvalue { i64, i64* } zeroinitializer, i64 %ra, 0
    %xo = insertvalue { i64, i64* } %xn, i64* %a1a1, 1
    %a1c = extractvalue { i64, i64* } %xo, 0
    %a2a = extractvalue { i64, i64* } %xo, 1
    %xp = getelementptr i64, i64* %a2a, i64 %xl
    %rb = load i64, i64* %xp
    %xq = insertvalue { i64, i64* } zeroinitializer, i64 %rb, 0
    %xr = insertvalue { i64, i64* } %xq, i64* %a2a, 1
    %a1aa = extractvalue { i64, i64* } %xr, 0
    %a2aa = extractvalue { i64, i64* } %xr, 1
    %xs = icmp ult i64 %a1c, %a1aa
    %p = getelementptr i64, i64* %a2aa, i64 %xk
    store i64 %a1c, i64* %p
    %pa = getelementptr i64, i64* %a2aa, i64 %xl
    store i64 %a1aa, i64* %pa
    br i1 %xs, label %then, label %else

  then:
    %xw = add i64 %x, %xja
    %xx = getelementptr i64, i64* %a1a1, i64 %xw
    %rc = load i64, i64* %xx
    %xy = insertvalue { i64, i64* } zeroinitializer, i64 %rc, 0
    %xz = insertvalue { i64, i64* } %xy, i64* %a1a1, 1
    %a1d = extractvalue { i64, i64* } %xz, 0
    %a2c = extractvalue { i64, i64* } %xz, 1
    %ya = icmp ult i64 %a1, %a1d
    %pb = getelementptr i64, i64* %a2c, i64 %xw
    store i64 %a1d, i64* %pb
    br i1 %ya, label %thena, label %elsea

  thena:
    %yd = add i64 %x, %xja
    %ye = getelementptr i64, i64* %a1a1, i64 %yd
    %rd = load i64, i64* %ye
    %yf = insertvalue { i64, i64* } zeroinitializer, i64 %rd, 0
    %yg = insertvalue { i64, i64* } %yf, i64* %a1a1, 1
    %a1ca = extractvalue { i64, i64* } %yg, 0
    %a2ca = extractvalue { i64, i64* } %yg, 1
    %yh = add i64 %x, %a1b1
    %pc = getelementptr i64, i64* %a2ca, i64 %yh
    store i64 %a1ca, i64* %pc
    %yj = insertvalue { i64*, { i64, i1 } } zeroinitializer, i64* %a2ca, 0
    %yk = insertvalue { i64, i1 } zeroinitializer, i64 %xja, 0
    %x6 = insertvalue { i64, i1 } %yk, i1 1, 1
    %x7 = insertvalue { i64*, { i64, i1 } } %yj, { i64, i1 } %x6, 1
    br label %ctd_ifa

  elsea:
    %yd1 = insertvalue { i64*, { i64, i1 } } zeroinitializer, i64* %a1a1, 0
    %ye1 = insertvalue { i64, i1 } zeroinitializer, i64 %a1b1, 0
    %x8 = insertvalue { i64, i1 } %ye1, i1 0, 1
    %x9 = insertvalue { i64*, { i64, i1 } } %yd1, { i64, i1 } %x8, 1
    br label %ctd_ifa

  ctd_ifa:
    %x10 = phi { i64*, { i64, i1 } } [ %x9, %elsea ], [ %x7, %thena ]
    br label %ctd_if

  else:
    %xw1 = add i64 %x, %xha1
    %xx1 = getelementptr i64, i64* %a1a1, i64 %xw1
    %rc1 = load i64, i64* %xx1
    %xy1 = insertvalue { i64, i64* } zeroinitializer, i64 %rc1, 0
    %xz1 = insertvalue { i64, i64* } %xy1, i64* %a1a1, 1
    %a1d1 = extractvalue { i64, i64* } %xz1, 0
    %a2c1 = extractvalue { i64, i64* } %xz1, 1
    %ya1 = icmp ult i64 %a1, %a1d1
    %pb1 = getelementptr i64, i64* %a2c1, i64 %xw1
    store i64 %a1d1, i64* %pb1
    br i1 %ya1, label %thenb, label %elseb

  thenb:
    %yd2 = add i64 %x, %xha1
    %ye2 = getelementptr i64, i64* %a1a1, i64 %yd2
    %rd1 = load i64, i64* %ye2
    %yf1 = insertvalue { i64, i64* } zeroinitializer, i64 %rd1, 0
    %yg1 = insertvalue { i64, i64* } %yf1, i64* %a1a1, 1
    %a1ca1 = extractvalue { i64, i64* } %yg1, 0
    %a2ca1 = extractvalue { i64, i64* } %yg1, 1
    %yh1 = add i64 %x, %a1b1
    %pc1 = getelementptr i64, i64* %a2ca1, i64 %yh1
    store i64 %a1ca1, i64* %pc1
    %yj1 = insertvalue { i64*, { i64, i1 } } zeroinitializer, i64* %a2ca1, 0
    %yk1 = insertvalue { i64, i1 } zeroinitializer, i64 %xha1, 0
    %x11 = insertvalue { i64, i1 } %yk1, i1 1, 1
    %x12 = insertvalue { i64*, { i64, i1 } } %yj1, { i64, i1 } %x11, 1
    br label %ctd_ifb

  elseb:
    %yd3 = insertvalue { i64*, { i64, i1 } } zeroinitializer, i64* %a1a1, 0
    %ye3 = insertvalue { i64, i1 } zeroinitializer, i64 %a1b1, 0
    %x13 = insertvalue { i64, i1 } %ye3, i1 0, 1
    %x14 = insertvalue { i64*, { i64, i1 } } %yd3, { i64, i1 } %x13, 1
    br label %ctd_ifb

  ctd_ifb:
    %x15 = phi { i64*, { i64, i1 } } [ %x14, %elseb ], [ %x12, %thenb ]
    br label %ctd_if

  ctd_if:
    %x16 = phi { i64*, { i64, i1 } } [ %x15, %ctd_ifb ], [ %x10, %ctd_ifa ]
    br label %while_start

  while_end:
    %a1a2 = extractvalue { i64*, { i64, i1 } } %xea, 0
    %xfa2 = extractvalue { i64*, { i64, i1 } } %xea, 1
    %a1b2 = extractvalue { i64, i1 } %xfa2, 0
    %a2b2 = extractvalue { i64, i1 } %xfa2, 1
    %xga2 = sub i64 %x1, %x
    %xha2 = udiv i64 %xga2, 2
    %xi1 = icmp slt i64 %a1b2, %xha2
    br i1 %xi1, label %thenc, label %elsec

  thenc:
    %xj1 = mul i64 2, %a1b2
    %xka = add i64 %xj1, 1
    %xl1 = add i64 %x, %xka
    %xm1 = getelementptr i64, i64* %a1a2, i64 %xl1
    %ra1 = load i64, i64* %xm1
    %xn1 = insertvalue { i64, i64* } zeroinitializer, i64 %ra1, 0
    %xo1 = insertvalue { i64, i64* } %xn1, i64* %a1a2, 1
    %a1c1 = extractvalue { i64, i64* } %xo1, 0
    %a2a1 = extractvalue { i64, i64* } %xo1, 1
    %xp1 = icmp ult i64 %a1, %a1c1
    %p1 = getelementptr i64, i64* %a2a1, i64 %xl1
    store i64 %a1c1, i64* %p1
    br i1 %xp1, label %thend, label %elsed

  thend:
    %xs1 = add i64 %x, %xka
    %xt = getelementptr i64, i64* %a1a2, i64 %xs1
    %rb1 = load i64, i64* %xt
    %xu = insertvalue { i64, i64* } zeroinitializer, i64 %rb1, 0
    %xv = insertvalue { i64, i64* } %xu, i64* %a1a2, 1
    %a1ca2 = extractvalue { i64, i64* } %xv, 0
    %a2c2 = extractvalue { i64, i64* } %xv, 1
    %xw2 = add i64 %x, %a1b2
    %pa1 = getelementptr i64, i64* %a2c2, i64 %xw2
    store i64 %a1ca2, i64* %pa1
    %xy2 = add i64 %x, %xka
    %pb2 = getelementptr i64, i64* %a2c2, i64 %xy2
    store i64 %a1, i64* %pb2
    br label %ctd_ifd

  elsed:
    %xs2 = add i64 %x, %a1b2
    %pa2 = getelementptr i64, i64* %a1a2, i64 %xs2
    store i64 %a1, i64* %pa2
    br label %ctd_ifd

  ctd_ifd:
    %x17 = phi i64* [ %a1a2, %elsed ], [ %a2c2, %thend ]
    br label %ctd_ifc

  elsec:
    %xj2 = add i64 %x, %a1b2
    %p2 = getelementptr i64, i64* %a1a2, i64 %xj2
    store i64 %a1, i64* %p2
    br label %ctd_ifc

  ctd_ifc:
    %x18 = phi i64* [ %a1a2, %elsec ], [ %x17, %ctd_ifd ]
    ret i64* %x18
}

define { i64, { i64, i8* } }* @Sorting_Export_Code_str_sort_heapify_btu_impl(i64 %x, i64 %x1, { i64, { i64, i8* } }* %x2) {

  start:
    %xa = sub i64 %x1, 1
    %xb = insertvalue { { i64, { i64, i8* } }*, i64 } zeroinitializer, { i64, { i64, i8* } }* %x2, 0
    %xc = insertvalue { { i64, { i64, i8* } }*, i64 } %xb, i64 %xa, 1
    br label %while_start

  while_start:
    %xaa = phi { { i64, { i64, i8* } }*, i64 } [ %x5, %while_body ], [ %xc, %start ]
    %a1 = extractvalue { { i64, { i64, i8* } }*, i64 } %xaa, 0
    %x3 = extractvalue { { i64, { i64, i8* } }*, i64 } %xaa, 1
    %x4 = icmp slt i64 %x, %x3
    br i1 %x4, label %while_body, label %while_end

  while_body:
    %a11 = extractvalue { { i64, { i64, i8* } }*, i64 } %xaa, 0
    %a2 = extractvalue { { i64, { i64, i8* } }*, i64 } %xaa, 1
    %xba = sub i64 %a2, 1
    %xca = call { i64, { i64, i8* } }* @Sorting_Export_Code_str_sort_sift_down_impl (i64 %x, i64 %x1, i64 %xba, { i64, { i64, i8* } }* %a11)
    %xda = insertvalue { { i64, { i64, i8* } }*, i64 } zeroinitializer, { i64, { i64, i8* } }* %xca, 0
    %x5 = insertvalue { { i64, { i64, i8* } }*, i64 } %xda, i64 %xba, 1
    br label %while_start

  while_end:
    %a12 = extractvalue { { i64, { i64, i8* } }*, i64 } %xaa, 0
    %a21 = extractvalue { { i64, { i64, i8* } }*, i64 } %xaa, 1
    ret { i64, { i64, i8* } }* %a12
}

define { i1, { i64, { i64, i8* } }* } @Sorting_Export_Code_str_sort_maybe_insort_impl({ i64, { i64, i8* } }* %x, i64 %x1, i64 %x2) {

  start:
    %x3 = icmp ne i64 %x1, %x2
    br i1 %x3, label %then, label %else

  then:
    %xaa = add i64 %x1, 1
    %xba = add i64 8, 1
    %xc = insertvalue { i64, { i64, { i64, i8* } }* } zeroinitializer, i64 %xba, 0
    %tmpa = insertvalue { i64, { i64, { i64, i8* } }* } %xc, { i64, { i64, i8* } }* %x, 1
    %xd = insertvalue { i64, { i64, { i64, { i64, i8* } }* } } zeroinitializer, i64 %xaa, 0
    %xe = insertvalue { i64, { i64, { i64, { i64, i8* } }* } } %xd, { i64, { i64, { i64, i8* } }* } %tmpa, 1
    br label %while_start

  while_start:
    %xca = phi { i64, { i64, { i64, { i64, i8* } }* } } [ %x12, %ctd_ifd ], [ %xe, %then ]
    %a1 = extractvalue { i64, { i64, { i64, { i64, i8* } }* } } %xca, 0
    %xda = extractvalue { i64, { i64, { i64, { i64, i8* } }* } } %xca, 1
    %a1a = extractvalue { i64, { i64, { i64, i8* } }* } %xda, 0
    %a2a = extractvalue { i64, { i64, { i64, i8* } }* } %xda, 1
    %xea = icmp slt i64 %a1, %x2
    %x4 = icmp slt i64 0, %a1a
    %x5 = and i1 %xea, %x4
    br i1 %x5, label %while_body, label %while_end

  while_body:
    %a11 = extractvalue { i64, { i64, { i64, { i64, i8* } }* } } %xca, 0
    %xda1 = extractvalue { i64, { i64, { i64, { i64, i8* } }* } } %xca, 1
    %a1a1 = extractvalue { i64, { i64, { i64, i8* } }* } %xda1, 0
    %a2a1 = extractvalue { i64, { i64, { i64, i8* } }* } %xda1, 1
    %xea1 = icmp slt i64 %x1, %a11
    br i1 %xea1, label %thena, label %elsea

  thena:
    %bib = sub i64 %a11, 1
    %xfa = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %a2a1, i64 %a11
    %r = load { i64, { i64, i8* } }, { i64, { i64, i8* } }* %xfa
    %xg = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } zeroinitializer, { i64, { i64, i8* } } %r, 0
    %xh = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xg, { i64, { i64, i8* } }* %a2a1, 1
    %a1b = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xh, 0
    %a2 = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xh, 1
    %xi = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %a2, i64 %bib
    %ra = load { i64, { i64, i8* } }, { i64, { i64, i8* } }* %xi
    %xj = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } zeroinitializer, { i64, { i64, i8* } } %ra, 0
    %xk = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xj, { i64, { i64, i8* } }* %a2, 1
    %a1aa = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xk, 0
    %a2aa = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xk, 1
    %xl = call i1 @Sorting_Strings_strcmp_impl ({ i64, { i64, i8* } } %a1b, { i64, { i64, i8* } } %a1aa)
    %p = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %a2aa, i64 %a11
    store { i64, { i64, i8* } } %a1b, { i64, { i64, i8* } }* %p
    %pa = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %a2aa, i64 %bib
    store { i64, { i64, i8* } } %a1aa, { i64, { i64, i8* } }* %pa
    br label %ctd_ifa

  elsea:
    br label %ctd_ifa

  ctd_ifa:
    %xf = phi i1 [ 0, %elsea ], [ %xl, %thena ]
    br i1 %xf, label %thenb, label %elseb

  thenb:
    %xg1 = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %a2a1, i64 %a11
    %r1 = load { i64, { i64, i8* } }, { i64, { i64, i8* } }* %xg1
    %xh1 = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } zeroinitializer, { i64, { i64, i8* } } %r1, 0
    %xi1 = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xh1, { i64, { i64, i8* } }* %a2a1, 1
    %a1b1 = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xi1, 0
    %a21 = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xi1, 1
    %xja = sub i64 %a11, 1
    %xk1 = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %a21, i64 %xja
    %ra1 = load { i64, { i64, i8* } }, { i64, { i64, i8* } }* %xk1
    %xl1 = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } zeroinitializer, { i64, { i64, i8* } } %ra1, 0
    %xm = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xl1, { i64, { i64, i8* } }* %a21, 1
    %a1aa1 = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xm, 0
    %a2aa1 = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xm, 1
    %p1 = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %a2aa1, i64 %a11
    store { i64, { i64, i8* } } %a1aa1, { i64, { i64, i8* } }* %p1
    %xoa = sub i64 %a11, 1
    %xp = insertvalue { { i64, { i64, i8* } }*, i64 } zeroinitializer, { i64, { i64, i8* } }* %a2aa1, 0
    %xq = insertvalue { { i64, { i64, i8* } }*, i64 } %xp, i64 %xoa, 1
    br label %while_starta

  while_starta:
    %xpa = phi { { i64, { i64, i8* } }*, i64 } [ %x7, %while_bodya ], [ %xq, %thenb ]
    %a1ba = extractvalue { { i64, { i64, i8* } }*, i64 } %xpa, 0
    %a2b = extractvalue { { i64, { i64, i8* } }*, i64 } %xpa, 1
    %xqa = icmp slt i64 %x1, %a2b
    br i1 %xqa, label %thenc, label %elsec

  thenc:
    %bib1 = sub i64 %a2b, 1
    %xra = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %a1ba, i64 %bib1
    %rb = load { i64, { i64, i8* } }, { i64, { i64, i8* } }* %xra
    %xs = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } zeroinitializer, { i64, { i64, i8* } } %rb, 0
    %xt = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xs, { i64, { i64, i8* } }* %a1ba, 1
    %a1c = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xt, 0
    %a2c = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xt, 1
    %xu = call i1 @Sorting_Strings_strcmp_impl ({ i64, { i64, i8* } } %a1b1, { i64, { i64, i8* } } %a1c)
    %pa1 = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %a2c, i64 %bib1
    store { i64, { i64, i8* } } %a1c, { i64, { i64, i8* } }* %pa1
    br label %ctd_ifc

  elsec:
    br label %ctd_ifc

  ctd_ifc:
    %x6 = phi i1 [ 0, %elsec ], [ %xu, %thenc ]
    br i1 %x6, label %while_bodya, label %while_enda

  while_bodya:
    %a1ba1 = extractvalue { { i64, { i64, i8* } }*, i64 } %xpa, 0
    %a2b1 = extractvalue { { i64, { i64, i8* } }*, i64 } %xpa, 1
    %xqa1 = sub i64 %a2b1, 1
    %xra1 = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %a1ba1, i64 %xqa1
    %rb1 = load { i64, { i64, i8* } }, { i64, { i64, i8* } }* %xra1
    %xs1 = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } zeroinitializer, { i64, { i64, i8* } } %rb1, 0
    %xt1 = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xs1, { i64, { i64, i8* } }* %a1ba1, 1
    %a1c1 = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xt1, 0
    %a2c1 = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xt1, 1
    %pa2 = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %a2c1, i64 %a2b1
    store { i64, { i64, i8* } } %a1c1, { i64, { i64, i8* } }* %pa2
    %xva = sub i64 %a2b1, 1
    %xw = insertvalue { { i64, { i64, i8* } }*, i64 } zeroinitializer, { i64, { i64, i8* } }* %a2c1, 0
    %x7 = insertvalue { { i64, { i64, i8* } }*, i64 } %xw, i64 %xva, 1
    br label %while_starta

  while_enda:
    %a1ba2 = extractvalue { { i64, { i64, i8* } }*, i64 } %xpa, 0
    %a2b2 = extractvalue { { i64, { i64, i8* } }*, i64 } %xpa, 1
    %pa3 = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %a1ba2, i64 %a2b2
    store { i64, { i64, i8* } } %a1b1, { i64, { i64, i8* } }* %pa3
    %xr = sub i64 %a11, %a2b2
    %xs2 = insertvalue { i64, { i64, { i64, i8* } }* } zeroinitializer, i64 %xr, 0
    %x8 = insertvalue { i64, { i64, { i64, i8* } }* } %xs2, { i64, { i64, i8* } }* %a1ba2, 1
    br label %ctd_ifb

  elseb:
    %xga = insertvalue { i64, { i64, { i64, i8* } }* } zeroinitializer, i64 0, 0
    %x9 = insertvalue { i64, { i64, { i64, i8* } }* } %xga, { i64, { i64, i8* } }* %a2a1, 1
    br label %ctd_ifb

  ctd_ifb:
    %xg2 = phi { i64, { i64, { i64, i8* } }* } [ %x9, %elseb ], [ %x8, %while_enda ]
    %a1b2 = extractvalue { i64, { i64, { i64, i8* } }* } %xg2, 0
    %a2b3 = extractvalue { i64, { i64, { i64, i8* } }* } %xg2, 1
    %xha = add i64 %a11, 1
    %xi2 = icmp slt i64 %a1b2, %a1a1
    br i1 %xi2, label %thend, label %elsed

  thend:
    %x10 = sub i64 %a1a1, %a1b2
    br label %ctd_ifd

  elsed:
    br label %ctd_ifd

  ctd_ifd:
    %xj1 = phi i64 [ 0, %elsed ], [ %x10, %thend ]
    %xk2 = insertvalue { i64, { i64, { i64, { i64, i8* } }* } } zeroinitializer, i64 %xha, 0
    %xl2 = insertvalue { i64, { i64, { i64, i8* } }* } zeroinitializer, i64 %xj1, 0
    %x11 = insertvalue { i64, { i64, { i64, i8* } }* } %xl2, { i64, { i64, i8* } }* %a2b3, 1
    %x12 = insertvalue { i64, { i64, { i64, { i64, i8* } }* } } %xk2, { i64, { i64, { i64, i8* } }* } %x11, 1
    br label %while_start

  while_end:
    %a12 = extractvalue { i64, { i64, { i64, { i64, i8* } }* } } %xca, 0
    %xda2 = extractvalue { i64, { i64, { i64, { i64, i8* } }* } } %xca, 1
    %a1a2 = extractvalue { i64, { i64, { i64, i8* } }* } %xda2, 0
    %a2a2 = extractvalue { i64, { i64, { i64, i8* } }* } %xda2, 1
    %xea2 = icmp eq i64 %a12, %x2
    %xf1 = insertvalue { i1, { i64, { i64, i8* } }* } zeroinitializer, i1 %xea2, 0
    %x13 = insertvalue { i1, { i64, { i64, i8* } }* } %xf1, { i64, { i64, i8* } }* %a2a2, 1
    br label %ctd_if

  else:
    %xaa1 = insertvalue { i1, { i64, { i64, i8* } }* } zeroinitializer, i1 1, 0
    %x14 = insertvalue { i1, { i64, { i64, i8* } }* } %xaa1, { i64, { i64, i8* } }* %x, 1
    br label %ctd_if

  ctd_if:
    %x15 = phi { i1, { i64, { i64, i8* } }* } [ %x14, %else ], [ %x13, %while_end ]
    ret { i1, { i64, { i64, i8* } }* } %x15
}

define { { i64, { i64, i8* } }*, i64 } @Sorting_Export_Code_str_sort_qs_partition_impl(i64 %x, i64 %x1, i64 %x2, { i64, { i64, i8* } }* %x3) {

  start:
    br label %while_start

  while_start:
    %s = phi i64 [ %x5, %while_body ], [ %x, %start ]
    %x4 = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %x3, i64 %s
    %r = load { i64, { i64, i8* } }, { i64, { i64, i8* } }* %x4
    %xa = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } zeroinitializer, { i64, { i64, i8* } } %r, 0
    %xb = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xa, { i64, { i64, i8* } }* %x3, 1
    %a1 = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xb, 0
    %a2 = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xb, 1
    %xc = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %a2, i64 %x2
    %ra = load { i64, { i64, i8* } }, { i64, { i64, i8* } }* %xc
    %xd = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } zeroinitializer, { i64, { i64, i8* } } %ra, 0
    %xe = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xd, { i64, { i64, i8* } }* %a2, 1
    %a1a = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xe, 0
    %a2a = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xe, 1
    %xf = call i1 @Sorting_Strings_strcmp_impl ({ i64, { i64, i8* } } %a1, { i64, { i64, i8* } } %a1a)
    %p = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %a2a, i64 %s
    store { i64, { i64, i8* } } %a1, { i64, { i64, i8* } }* %p
    %pa = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %a2a, i64 %x2
    store { i64, { i64, i8* } } %a1a, { i64, { i64, i8* } }* %pa
    br i1 %xf, label %while_body, label %while_end

  while_body:
    %x5 = add i64 %s, 1
    br label %while_start

  while_end:
    %xaa = sub i64 %x1, 1
    br label %while_starta

  while_starta:
    %s1 = phi i64 [ %x7, %while_bodya ], [ %xaa, %while_end ]
    %xb1 = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %x3, i64 %x2
    %r1 = load { i64, { i64, i8* } }, { i64, { i64, i8* } }* %xb1
    %xc1 = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } zeroinitializer, { i64, { i64, i8* } } %r1, 0
    %xd1 = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xc1, { i64, { i64, i8* } }* %x3, 1
    %a11 = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xd1, 0
    %a21 = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xd1, 1
    %xe1 = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %a21, i64 %s1
    %ra1 = load { i64, { i64, i8* } }, { i64, { i64, i8* } }* %xe1
    %xf1 = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } zeroinitializer, { i64, { i64, i8* } } %ra1, 0
    %xg = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xf1, { i64, { i64, i8* } }* %a21, 1
    %a1a1 = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xg, 0
    %a2a1 = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xg, 1
    %xh = call i1 @Sorting_Strings_strcmp_impl ({ i64, { i64, i8* } } %a11, { i64, { i64, i8* } } %a1a1)
    %p1 = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %a2a1, i64 %x2
    store { i64, { i64, i8* } } %a11, { i64, { i64, i8* } }* %p1
    %pa1 = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %a2a1, i64 %s1
    store { i64, { i64, i8* } } %a1a1, { i64, { i64, i8* } }* %pa1
    br i1 %xh, label %while_bodya, label %while_enda

  while_bodya:
    %x7 = sub i64 %s1, 1
    br label %while_starta

  while_enda:
    %xc2 = insertvalue { i64, i64 } zeroinitializer, i64 %s, 0
    %tmpa = insertvalue { i64, i64 } %xc2, i64 %s1, 1
    %xd2 = insertvalue { { i64, { i64, i8* } }*, { i64, i64 } } zeroinitializer, { i64, { i64, i8* } }* %x3, 0
    %xe2 = insertvalue { { i64, { i64, i8* } }*, { i64, i64 } } %xd2, { i64, i64 } %tmpa, 1
    br label %while_startb

  while_startb:
    %xca = phi { { i64, { i64, i8* } }*, { i64, i64 } } [ %x13, %while_endd ], [ %xe2, %while_enda ]
    %a12 = extractvalue { { i64, { i64, i8* } }*, { i64, i64 } } %xca, 0
    %xda = extractvalue { { i64, { i64, i8* } }*, { i64, i64 } } %xca, 1
    %a = extractvalue { i64, i64 } %xda, 0
    %x8 = extractvalue { i64, i64 } %xda, 1
    %x9 = icmp slt i64 %a, %x8
    br i1 %x9, label %while_bodyb, label %while_endb

  while_bodyb:
    %a13 = extractvalue { { i64, { i64, i8* } }*, { i64, i64 } } %xca, 0
    %xda1 = extractvalue { { i64, { i64, i8* } }*, { i64, i64 } } %xca, 1
    %a1a2 = extractvalue { i64, i64 } %xda1, 0
    %a2a2 = extractvalue { i64, i64 } %xda1, 1
    %xea = call { i64, { i64, i8* } }* @Proto_IICF_EOArray_swap_eo_impl1 ({ i64, { i64, i8* } }* %a13, i64 %a1a2, i64 %a2a2)
    %xfa = add i64 %a1a2, 1
    br label %while_startc

  while_startc:
    %s2 = phi i64 [ %x10, %while_bodyc ], [ %xfa, %while_bodyb ]
    %xg1 = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %xea, i64 %s2
    %r2 = load { i64, { i64, i8* } }, { i64, { i64, i8* } }* %xg1
    %xh1 = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } zeroinitializer, { i64, { i64, i8* } } %r2, 0
    %xi = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xh1, { i64, { i64, i8* } }* %xea, 1
    %a1b = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xi, 0
    %a22 = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xi, 1
    %xj = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %a22, i64 %x2
    %ra2 = load { i64, { i64, i8* } }, { i64, { i64, i8* } }* %xj
    %xk = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } zeroinitializer, { i64, { i64, i8* } } %ra2, 0
    %xl = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xk, { i64, { i64, i8* } }* %a22, 1
    %a1aa = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xl, 0
    %a2aa = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xl, 1
    %xm = call i1 @Sorting_Strings_strcmp_impl ({ i64, { i64, i8* } } %a1b, { i64, { i64, i8* } } %a1aa)
    %p2 = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %a2aa, i64 %s2
    store { i64, { i64, i8* } } %a1b, { i64, { i64, i8* } }* %p2
    %pa2 = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %a2aa, i64 %x2
    store { i64, { i64, i8* } } %a1aa, { i64, { i64, i8* } }* %pa2
    br i1 %xm, label %while_bodyc, label %while_endc

  while_bodyc:
    %x10 = add i64 %s2, 1
    br label %while_startc

  while_endc:
    %xha = sub i64 %a2a2, 1
    br label %while_startd

  while_startd:
    %s3 = phi i64 [ %x11, %while_bodyd ], [ %xha, %while_endc ]
    %xi1 = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %xea, i64 %x2
    %r3 = load { i64, { i64, i8* } }, { i64, { i64, i8* } }* %xi1
    %xj1 = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } zeroinitializer, { i64, { i64, i8* } } %r3, 0
    %xk1 = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xj1, { i64, { i64, i8* } }* %xea, 1
    %a1b1 = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xk1, 0
    %a23 = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xk1, 1
    %xl1 = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %a23, i64 %s3
    %ra3 = load { i64, { i64, i8* } }, { i64, { i64, i8* } }* %xl1
    %xm1 = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } zeroinitializer, { i64, { i64, i8* } } %ra3, 0
    %xn = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xm1, { i64, { i64, i8* } }* %a23, 1
    %a1aa1 = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xn, 0
    %a2aa1 = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xn, 1
    %xo = call i1 @Sorting_Strings_strcmp_impl ({ i64, { i64, i8* } } %a1b1, { i64, { i64, i8* } } %a1aa1)
    %p3 = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %a2aa1, i64 %x2
    store { i64, { i64, i8* } } %a1b1, { i64, { i64, i8* } }* %p3
    %pa3 = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %a2aa1, i64 %s3
    store { i64, { i64, i8* } } %a1aa1, { i64, { i64, i8* } }* %pa3
    br i1 %xo, label %while_bodyd, label %while_endd

  while_bodyd:
    %x11 = sub i64 %s3, 1
    br label %while_startd

  while_endd:
    %xj2 = insertvalue { { i64, { i64, i8* } }*, { i64, i64 } } zeroinitializer, { i64, { i64, i8* } }* %xea, 0
    %xk2 = insertvalue { i64, i64 } zeroinitializer, i64 %s2, 0
    %x12 = insertvalue { i64, i64 } %xk2, i64 %s3, 1
    %x13 = insertvalue { { i64, { i64, i8* } }*, { i64, i64 } } %xj2, { i64, i64 } %x12, 1
    br label %while_startb

  while_endb:
    %a14 = extractvalue { { i64, { i64, i8* } }*, { i64, i64 } } %xca, 0
    %xda2 = extractvalue { { i64, { i64, i8* } }*, { i64, i64 } } %xca, 1
    %a1a3 = extractvalue { i64, i64 } %xda2, 0
    %a2a3 = extractvalue { i64, i64 } %xda2, 1
    %xea1 = insertvalue { { i64, { i64, i8* } }*, i64 } zeroinitializer, { i64, { i64, i8* } }* %a14, 0
    %x14 = insertvalue { { i64, { i64, i8* } }*, i64 } %xea1, i64 %a1a3, 1
    ret { { i64, { i64, i8* } }*, i64 } %x14
}

define i64* @Sorting_Export_Code_unat_sort_heapify_btu_impl(i64 %x, i64 %x1, i64* %x2) {

  start:
    %xa = sub i64 %x1, 1
    %xb = insertvalue { i64*, i64 } zeroinitializer, i64* %x2, 0
    %xc = insertvalue { i64*, i64 } %xb, i64 %xa, 1
    br label %while_start

  while_start:
    %xaa = phi { i64*, i64 } [ %x5, %while_body ], [ %xc, %start ]
    %a1 = extractvalue { i64*, i64 } %xaa, 0
    %x3 = extractvalue { i64*, i64 } %xaa, 1
    %x4 = icmp slt i64 %x, %x3
    br i1 %x4, label %while_body, label %while_end

  while_body:
    %a11 = extractvalue { i64*, i64 } %xaa, 0
    %a2 = extractvalue { i64*, i64 } %xaa, 1
    %xba = sub i64 %a2, 1
    %xca = call i64* @Sorting_Export_Code_unat_sort_sift_down_impl (i64 %x, i64 %x1, i64 %xba, i64* %a11)
    %xda = insertvalue { i64*, i64 } zeroinitializer, i64* %xca, 0
    %x5 = insertvalue { i64*, i64 } %xda, i64 %xba, 1
    br label %while_start

  while_end:
    %a12 = extractvalue { i64*, i64 } %xaa, 0
    %a21 = extractvalue { i64*, i64 } %xaa, 1
    ret i64* %a12
}

define { i64, { i64, i8* } }* @Sorting_Export_Code_str_sort_introsort_aux_impl({ i64, { i64, i8* } }* %x, i64 %x1, i64 %x2, i64 %x3) {

  start:
    %x4 = insertvalue { i64, i64 } zeroinitializer, i64 %x2, 0
    %tmpa = insertvalue { i64, i64 } %x4, i64 %x3, 1
    %xa = insertvalue { i64, { i64, i64 } } zeroinitializer, i64 %x1, 0
    %tmpab = insertvalue { i64, { i64, i64 } } %xa, { i64, i64 } %tmpa, 1
    %xb = insertvalue { { i64, { i64, i8* } }*, { i64, { i64, i64 } } } zeroinitializer, { i64, { i64, i8* } }* %x, 0
    %x5 = insertvalue { { i64, { i64, i8* } }*, { i64, { i64, i64 } } } %xb, { i64, { i64, i64 } } %tmpab, 1
    %x6 = call { i64, { i64, i8* } }* @Sorting_Export_Code_str_sort_introsort_aux_impl_f_07240052 ({ { i64, { i64, i8* } }*, { i64, { i64, i64 } } } %x5)
    ret { i64, { i64, i8* } }* %x6
}

define { i1, i64* } @Sorting_Export_Code_unat_sort_maybe_insort_impl(i64* %x, i64 %x1, i64 %x2) {

  start:
    %x3 = icmp ne i64 %x1, %x2
    br i1 %x3, label %then, label %else

  then:
    %xaa = add i64 %x1, 1
    %xba = add i64 8, 1
    %xc = insertvalue { i64, i64* } zeroinitializer, i64 %xba, 0
    %tmpa = insertvalue { i64, i64* } %xc, i64* %x, 1
    %xd = insertvalue { i64, { i64, i64* } } zeroinitializer, i64 %xaa, 0
    %xe = insertvalue { i64, { i64, i64* } } %xd, { i64, i64* } %tmpa, 1
    br label %while_start

  while_start:
    %xca = phi { i64, { i64, i64* } } [ %x12, %ctd_ifd ], [ %xe, %then ]
    %a1 = extractvalue { i64, { i64, i64* } } %xca, 0
    %xda = extractvalue { i64, { i64, i64* } } %xca, 1
    %a1a = extractvalue { i64, i64* } %xda, 0
    %a2a = extractvalue { i64, i64* } %xda, 1
    %xea = icmp slt i64 %a1, %x2
    %x4 = icmp slt i64 0, %a1a
    %x5 = and i1 %xea, %x4
    br i1 %x5, label %while_body, label %while_end

  while_body:
    %a11 = extractvalue { i64, { i64, i64* } } %xca, 0
    %xda1 = extractvalue { i64, { i64, i64* } } %xca, 1
    %a1a1 = extractvalue { i64, i64* } %xda1, 0
    %a2a1 = extractvalue { i64, i64* } %xda1, 1
    %xea1 = icmp slt i64 %x1, %a11
    br i1 %xea1, label %thena, label %elsea

  thena:
    %bib = sub i64 %a11, 1
    %xfa = getelementptr i64, i64* %a2a1, i64 %a11
    %r = load i64, i64* %xfa
    %xg = insertvalue { i64, i64* } zeroinitializer, i64 %r, 0
    %xh = insertvalue { i64, i64* } %xg, i64* %a2a1, 1
    %a1b = extractvalue { i64, i64* } %xh, 0
    %a2 = extractvalue { i64, i64* } %xh, 1
    %xi = getelementptr i64, i64* %a2, i64 %bib
    %ra = load i64, i64* %xi
    %xj = insertvalue { i64, i64* } zeroinitializer, i64 %ra, 0
    %xk = insertvalue { i64, i64* } %xj, i64* %a2, 1
    %a1aa = extractvalue { i64, i64* } %xk, 0
    %a2aa = extractvalue { i64, i64* } %xk, 1
    %xl = icmp ult i64 %a1b, %a1aa
    %p = getelementptr i64, i64* %a2aa, i64 %a11
    store i64 %a1b, i64* %p
    %pa = getelementptr i64, i64* %a2aa, i64 %bib
    store i64 %a1aa, i64* %pa
    br label %ctd_ifa

  elsea:
    br label %ctd_ifa

  ctd_ifa:
    %xf = phi i1 [ 0, %elsea ], [ %xl, %thena ]
    br i1 %xf, label %thenb, label %elseb

  thenb:
    %xg1 = getelementptr i64, i64* %a2a1, i64 %a11
    %r1 = load i64, i64* %xg1
    %xh1 = insertvalue { i64, i64* } zeroinitializer, i64 %r1, 0
    %xi1 = insertvalue { i64, i64* } %xh1, i64* %a2a1, 1
    %a1b1 = extractvalue { i64, i64* } %xi1, 0
    %a21 = extractvalue { i64, i64* } %xi1, 1
    %xja = sub i64 %a11, 1
    %xk1 = getelementptr i64, i64* %a21, i64 %xja
    %ra1 = load i64, i64* %xk1
    %xl1 = insertvalue { i64, i64* } zeroinitializer, i64 %ra1, 0
    %xm = insertvalue { i64, i64* } %xl1, i64* %a21, 1
    %a1aa1 = extractvalue { i64, i64* } %xm, 0
    %a2aa1 = extractvalue { i64, i64* } %xm, 1
    %p1 = getelementptr i64, i64* %a2aa1, i64 %a11
    store i64 %a1aa1, i64* %p1
    %xoa = sub i64 %a11, 1
    %xp = insertvalue { i64*, i64 } zeroinitializer, i64* %a2aa1, 0
    %xq = insertvalue { i64*, i64 } %xp, i64 %xoa, 1
    br label %while_starta

  while_starta:
    %xpa = phi { i64*, i64 } [ %x7, %while_bodya ], [ %xq, %thenb ]
    %a1ba = extractvalue { i64*, i64 } %xpa, 0
    %a2b = extractvalue { i64*, i64 } %xpa, 1
    %xqa = icmp slt i64 %x1, %a2b
    br i1 %xqa, label %thenc, label %elsec

  thenc:
    %bib1 = sub i64 %a2b, 1
    %xra = getelementptr i64, i64* %a1ba, i64 %bib1
    %rb = load i64, i64* %xra
    %xs = insertvalue { i64, i64* } zeroinitializer, i64 %rb, 0
    %xt = insertvalue { i64, i64* } %xs, i64* %a1ba, 1
    %a1c = extractvalue { i64, i64* } %xt, 0
    %a2c = extractvalue { i64, i64* } %xt, 1
    %xu = icmp ult i64 %a1b1, %a1c
    %pa1 = getelementptr i64, i64* %a2c, i64 %bib1
    store i64 %a1c, i64* %pa1
    br label %ctd_ifc

  elsec:
    br label %ctd_ifc

  ctd_ifc:
    %x6 = phi i1 [ 0, %elsec ], [ %xu, %thenc ]
    br i1 %x6, label %while_bodya, label %while_enda

  while_bodya:
    %a1ba1 = extractvalue { i64*, i64 } %xpa, 0
    %a2b1 = extractvalue { i64*, i64 } %xpa, 1
    %xqa1 = sub i64 %a2b1, 1
    %xra1 = getelementptr i64, i64* %a1ba1, i64 %xqa1
    %rb1 = load i64, i64* %xra1
    %xs1 = insertvalue { i64, i64* } zeroinitializer, i64 %rb1, 0
    %xt1 = insertvalue { i64, i64* } %xs1, i64* %a1ba1, 1
    %a1c1 = extractvalue { i64, i64* } %xt1, 0
    %a2c1 = extractvalue { i64, i64* } %xt1, 1
    %pa2 = getelementptr i64, i64* %a2c1, i64 %a2b1
    store i64 %a1c1, i64* %pa2
    %xva = sub i64 %a2b1, 1
    %xw = insertvalue { i64*, i64 } zeroinitializer, i64* %a2c1, 0
    %x7 = insertvalue { i64*, i64 } %xw, i64 %xva, 1
    br label %while_starta

  while_enda:
    %a1ba2 = extractvalue { i64*, i64 } %xpa, 0
    %a2b2 = extractvalue { i64*, i64 } %xpa, 1
    %pa3 = getelementptr i64, i64* %a1ba2, i64 %a2b2
    store i64 %a1b1, i64* %pa3
    %xr = sub i64 %a11, %a2b2
    %xs2 = insertvalue { i64, i64* } zeroinitializer, i64 %xr, 0
    %x8 = insertvalue { i64, i64* } %xs2, i64* %a1ba2, 1
    br label %ctd_ifb

  elseb:
    %xga = insertvalue { i64, i64* } zeroinitializer, i64 0, 0
    %x9 = insertvalue { i64, i64* } %xga, i64* %a2a1, 1
    br label %ctd_ifb

  ctd_ifb:
    %xg2 = phi { i64, i64* } [ %x9, %elseb ], [ %x8, %while_enda ]
    %a1b2 = extractvalue { i64, i64* } %xg2, 0
    %a2b3 = extractvalue { i64, i64* } %xg2, 1
    %xha = add i64 %a11, 1
    %xi2 = icmp slt i64 %a1b2, %a1a1
    br i1 %xi2, label %thend, label %elsed

  thend:
    %x10 = sub i64 %a1a1, %a1b2
    br label %ctd_ifd

  elsed:
    br label %ctd_ifd

  ctd_ifd:
    %xj1 = phi i64 [ 0, %elsed ], [ %x10, %thend ]
    %xk2 = insertvalue { i64, { i64, i64* } } zeroinitializer, i64 %xha, 0
    %xl2 = insertvalue { i64, i64* } zeroinitializer, i64 %xj1, 0
    %x11 = insertvalue { i64, i64* } %xl2, i64* %a2b3, 1
    %x12 = insertvalue { i64, { i64, i64* } } %xk2, { i64, i64* } %x11, 1
    br label %while_start

  while_end:
    %a12 = extractvalue { i64, { i64, i64* } } %xca, 0
    %xda2 = extractvalue { i64, { i64, i64* } } %xca, 1
    %a1a2 = extractvalue { i64, i64* } %xda2, 0
    %a2a2 = extractvalue { i64, i64* } %xda2, 1
    %xea2 = icmp eq i64 %a12, %x2
    %xf1 = insertvalue { i1, i64* } zeroinitializer, i1 %xea2, 0
    %x13 = insertvalue { i1, i64* } %xf1, i64* %a2a2, 1
    br label %ctd_if

  else:
    %xaa1 = insertvalue { i1, i64* } zeroinitializer, i1 1, 0
    %x14 = insertvalue { i1, i64* } %xaa1, i64* %x, 1
    br label %ctd_if

  ctd_if:
    %x15 = phi { i1, i64* } [ %x14, %else ], [ %x13, %while_end ]
    ret { i1, i64* } %x15
}

define { i64*, i64 } @Sorting_Export_Code_unat_sort_qs_partition_impl(i64 %x, i64 %x1, i64 %x2, i64* %x3) {

  start:
    br label %while_start

  while_start:
    %s = phi i64 [ %x5, %while_body ], [ %x, %start ]
    %x4 = getelementptr i64, i64* %x3, i64 %s
    %r = load i64, i64* %x4
    %xa = insertvalue { i64, i64* } zeroinitializer, i64 %r, 0
    %xb = insertvalue { i64, i64* } %xa, i64* %x3, 1
    %a1 = extractvalue { i64, i64* } %xb, 0
    %a2 = extractvalue { i64, i64* } %xb, 1
    %xc = getelementptr i64, i64* %a2, i64 %x2
    %ra = load i64, i64* %xc
    %xd = insertvalue { i64, i64* } zeroinitializer, i64 %ra, 0
    %xe = insertvalue { i64, i64* } %xd, i64* %a2, 1
    %a1a = extractvalue { i64, i64* } %xe, 0
    %a2a = extractvalue { i64, i64* } %xe, 1
    %xf = icmp ult i64 %a1, %a1a
    %p = getelementptr i64, i64* %a2a, i64 %s
    store i64 %a1, i64* %p
    %pa = getelementptr i64, i64* %a2a, i64 %x2
    store i64 %a1a, i64* %pa
    br i1 %xf, label %while_body, label %while_end

  while_body:
    %x5 = add i64 %s, 1
    br label %while_start

  while_end:
    %xaa = sub i64 %x1, 1
    br label %while_starta

  while_starta:
    %s1 = phi i64 [ %x7, %while_bodya ], [ %xaa, %while_end ]
    %xb1 = getelementptr i64, i64* %x3, i64 %x2
    %r1 = load i64, i64* %xb1
    %xc1 = insertvalue { i64, i64* } zeroinitializer, i64 %r1, 0
    %xd1 = insertvalue { i64, i64* } %xc1, i64* %x3, 1
    %a11 = extractvalue { i64, i64* } %xd1, 0
    %a21 = extractvalue { i64, i64* } %xd1, 1
    %xe1 = getelementptr i64, i64* %a21, i64 %s1
    %ra1 = load i64, i64* %xe1
    %xf1 = insertvalue { i64, i64* } zeroinitializer, i64 %ra1, 0
    %xg = insertvalue { i64, i64* } %xf1, i64* %a21, 1
    %a1a1 = extractvalue { i64, i64* } %xg, 0
    %a2a1 = extractvalue { i64, i64* } %xg, 1
    %xh = icmp ult i64 %a11, %a1a1
    %p1 = getelementptr i64, i64* %a2a1, i64 %x2
    store i64 %a11, i64* %p1
    %pa1 = getelementptr i64, i64* %a2a1, i64 %s1
    store i64 %a1a1, i64* %pa1
    br i1 %xh, label %while_bodya, label %while_enda

  while_bodya:
    %x7 = sub i64 %s1, 1
    br label %while_starta

  while_enda:
    %xc2 = insertvalue { i64, i64 } zeroinitializer, i64 %s, 0
    %tmpa = insertvalue { i64, i64 } %xc2, i64 %s1, 1
    %xd2 = insertvalue { i64*, { i64, i64 } } zeroinitializer, i64* %x3, 0
    %xe2 = insertvalue { i64*, { i64, i64 } } %xd2, { i64, i64 } %tmpa, 1
    br label %while_startb

  while_startb:
    %xca = phi { i64*, { i64, i64 } } [ %x13, %while_endd ], [ %xe2, %while_enda ]
    %a12 = extractvalue { i64*, { i64, i64 } } %xca, 0
    %xda = extractvalue { i64*, { i64, i64 } } %xca, 1
    %a = extractvalue { i64, i64 } %xda, 0
    %x8 = extractvalue { i64, i64 } %xda, 1
    %x9 = icmp slt i64 %a, %x8
    br i1 %x9, label %while_bodyb, label %while_endb

  while_bodyb:
    %a13 = extractvalue { i64*, { i64, i64 } } %xca, 0
    %xda1 = extractvalue { i64*, { i64, i64 } } %xca, 1
    %a1a2 = extractvalue { i64, i64 } %xda1, 0
    %a2a2 = extractvalue { i64, i64 } %xda1, 1
    %xea = call i64* @Proto_IICF_EOArray_swap_eo_impl (i64* %a13, i64 %a1a2, i64 %a2a2)
    %xfa = add i64 %a1a2, 1
    br label %while_startc

  while_startc:
    %s2 = phi i64 [ %x10, %while_bodyc ], [ %xfa, %while_bodyb ]
    %xg1 = getelementptr i64, i64* %xea, i64 %s2
    %r2 = load i64, i64* %xg1
    %xh1 = insertvalue { i64, i64* } zeroinitializer, i64 %r2, 0
    %xi = insertvalue { i64, i64* } %xh1, i64* %xea, 1
    %a1b = extractvalue { i64, i64* } %xi, 0
    %a22 = extractvalue { i64, i64* } %xi, 1
    %xj = getelementptr i64, i64* %a22, i64 %x2
    %ra2 = load i64, i64* %xj
    %xk = insertvalue { i64, i64* } zeroinitializer, i64 %ra2, 0
    %xl = insertvalue { i64, i64* } %xk, i64* %a22, 1
    %a1aa = extractvalue { i64, i64* } %xl, 0
    %a2aa = extractvalue { i64, i64* } %xl, 1
    %xm = icmp ult i64 %a1b, %a1aa
    %p2 = getelementptr i64, i64* %a2aa, i64 %s2
    store i64 %a1b, i64* %p2
    %pa2 = getelementptr i64, i64* %a2aa, i64 %x2
    store i64 %a1aa, i64* %pa2
    br i1 %xm, label %while_bodyc, label %while_endc

  while_bodyc:
    %x10 = add i64 %s2, 1
    br label %while_startc

  while_endc:
    %xha = sub i64 %a2a2, 1
    br label %while_startd

  while_startd:
    %s3 = phi i64 [ %x11, %while_bodyd ], [ %xha, %while_endc ]
    %xi1 = getelementptr i64, i64* %xea, i64 %x2
    %r3 = load i64, i64* %xi1
    %xj1 = insertvalue { i64, i64* } zeroinitializer, i64 %r3, 0
    %xk1 = insertvalue { i64, i64* } %xj1, i64* %xea, 1
    %a1b1 = extractvalue { i64, i64* } %xk1, 0
    %a23 = extractvalue { i64, i64* } %xk1, 1
    %xl1 = getelementptr i64, i64* %a23, i64 %s3
    %ra3 = load i64, i64* %xl1
    %xm1 = insertvalue { i64, i64* } zeroinitializer, i64 %ra3, 0
    %xn = insertvalue { i64, i64* } %xm1, i64* %a23, 1
    %a1aa1 = extractvalue { i64, i64* } %xn, 0
    %a2aa1 = extractvalue { i64, i64* } %xn, 1
    %xo = icmp ult i64 %a1b1, %a1aa1
    %p3 = getelementptr i64, i64* %a2aa1, i64 %x2
    store i64 %a1b1, i64* %p3
    %pa3 = getelementptr i64, i64* %a2aa1, i64 %s3
    store i64 %a1aa1, i64* %pa3
    br i1 %xo, label %while_bodyd, label %while_endd

  while_bodyd:
    %x11 = sub i64 %s3, 1
    br label %while_startd

  while_endd:
    %xj2 = insertvalue { i64*, { i64, i64 } } zeroinitializer, i64* %xea, 0
    %xk2 = insertvalue { i64, i64 } zeroinitializer, i64 %s2, 0
    %x12 = insertvalue { i64, i64 } %xk2, i64 %s3, 1
    %x13 = insertvalue { i64*, { i64, i64 } } %xj2, { i64, i64 } %x12, 1
    br label %while_startb

  while_endb:
    %a14 = extractvalue { i64*, { i64, i64 } } %xca, 0
    %xda2 = extractvalue { i64*, { i64, i64 } } %xca, 1
    %a1a3 = extractvalue { i64, i64 } %xda2, 0
    %a2a3 = extractvalue { i64, i64 } %xda2, 1
    %xea1 = insertvalue { i64*, i64 } zeroinitializer, i64* %a14, 0
    %x14 = insertvalue { i64*, i64 } %xea1, i64 %a1a3, 1
    ret { i64*, i64 } %x14
}

define { i1, { i64, { i64, { i64, i8* } }* } } @Sorting_Export_Code_str_sort_partition_left_impl({ i64, { i64, i8* } }* %x, i64 %x1, i64 %x2) {

  start:
    %xa = sub i64 %x2, 1
    br label %while_start

  while_start:
    %s = phi i64 [ %x3, %while_body ], [ %xa, %start ]
    %xaa = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %x, i64 %x1
    %r = load { i64, { i64, i8* } }, { i64, { i64, i8* } }* %xaa
    %xb = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } zeroinitializer, { i64, { i64, i8* } } %r, 0
    %xc = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xb, { i64, { i64, i8* } }* %x, 1
    %a1 = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xc, 0
    %a2 = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xc, 1
    %xd = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %a2, i64 %s
    %ra = load { i64, { i64, i8* } }, { i64, { i64, i8* } }* %xd
    %xe = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } zeroinitializer, { i64, { i64, i8* } } %ra, 0
    %xf = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xe, { i64, { i64, i8* } }* %a2, 1
    %a1a = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xf, 0
    %a2a = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xf, 1
    %xg = call i1 @Sorting_Strings_strcmp_impl ({ i64, { i64, i8* } } %a1, { i64, { i64, i8* } } %a1a)
    %p = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %a2a, i64 %x1
    store { i64, { i64, i8* } } %a1, { i64, { i64, i8* } }* %p
    %pa = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %a2a, i64 %s
    store { i64, { i64, i8* } } %a1a, { i64, { i64, i8* } }* %pa
    br i1 %xg, label %while_body, label %while_end

  while_body:
    %x3 = sub i64 %s, 1
    br label %while_start

  while_end:
    %xba = add i64 %s, 1
    %xc1 = icmp eq i64 %xba, %x2
    br i1 %xc1, label %then, label %else

  then:
    %x4 = add i64 %x1, 1
    br label %while_starta

  while_starta:
    %s1 = phi i64 [ %x7, %while_bodya ], [ %x4, %then ]
    %xda = sub i64 %x2, 1
    %xeaa = icmp slt i64 %s1, %xda
    br i1 %xeaa, label %thena, label %elsea

  thena:
    %xf1 = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %x, i64 %x1
    %r1 = load { i64, { i64, i8* } }, { i64, { i64, i8* } }* %xf1
    %xg1 = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } zeroinitializer, { i64, { i64, i8* } } %r1, 0
    %xh = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xg1, { i64, { i64, i8* } }* %x, 1
    %a11 = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xh, 0
    %a21 = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xh, 1
    %xi = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %a21, i64 %s1
    %ra1 = load { i64, { i64, i8* } }, { i64, { i64, i8* } }* %xi
    %xj = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } zeroinitializer, { i64, { i64, i8* } } %ra1, 0
    %xk = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xj, { i64, { i64, i8* } }* %a21, 1
    %a1a1 = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xk, 0
    %a2a1 = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xk, 1
    %xl = call i1 @Sorting_Strings_strcmp_impl ({ i64, { i64, i8* } } %a11, { i64, { i64, i8* } } %a1a1)
    %p1 = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %a2a1, i64 %x1
    store { i64, { i64, i8* } } %a11, { i64, { i64, i8* } }* %p1
    %pa1 = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %a2a1, i64 %s1
    store { i64, { i64, i8* } } %a1a1, { i64, { i64, i8* } }* %pa1
    %x5 = add i1 %xl, 1
    br label %ctd_ifa

  elsea:
    br label %ctd_ifa

  ctd_ifa:
    %x6 = phi i1 [ 0, %elsea ], [ %x5, %thena ]
    br i1 %x6, label %while_bodya, label %while_enda

  while_bodya:
    %x7 = add i64 %s1, 1
    br label %while_starta

  while_enda:
    br label %ctd_if

  else:
    %x9 = add i64 %x1, 1
    br label %while_startb

  while_startb:
    %s2 = phi i64 [ %x11, %while_bodyb ], [ %x9, %else ]
    %xda1 = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %x, i64 %x1
    %r2 = load { i64, { i64, i8* } }, { i64, { i64, i8* } }* %xda1
    %xea = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } zeroinitializer, { i64, { i64, i8* } } %r2, 0
    %xf2 = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xea, { i64, { i64, i8* } }* %x, 1
    %a12 = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xf2, 0
    %a22 = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xf2, 1
    %xg2 = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %a22, i64 %s2
    %ra2 = load { i64, { i64, i8* } }, { i64, { i64, i8* } }* %xg2
    %xh1 = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } zeroinitializer, { i64, { i64, i8* } } %ra2, 0
    %xi1 = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xh1, { i64, { i64, i8* } }* %a22, 1
    %a1a2 = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xi1, 0
    %a2a2 = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xi1, 1
    %xj1 = call i1 @Sorting_Strings_strcmp_impl ({ i64, { i64, i8* } } %a12, { i64, { i64, i8* } } %a1a2)
    %p2 = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %a2a2, i64 %x1
    store { i64, { i64, i8* } } %a12, { i64, { i64, i8* } }* %p2
    %pa2 = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %a2a2, i64 %s2
    store { i64, { i64, i8* } } %a1a2, { i64, { i64, i8* } }* %pa2
    %x10 = add i1 %xj1, 1
    br i1 %x10, label %while_bodyb, label %while_endb

  while_bodyb:
    %x11 = add i64 %s2, 1
    br label %while_startb

  while_endb:
    br label %ctd_if

  ctd_if:
    %xd1 = phi i64 [ %s2, %while_endb ], [ %s1, %while_enda ]
    %xe1 = insertvalue { i64, i64 } zeroinitializer, i64 %xd1, 0
    %tmpa = insertvalue { i64, i64 } %xe1, i64 %s, 1
    %xf3 = insertvalue { { i64, { i64, i8* } }*, { i64, i64 } } zeroinitializer, { i64, { i64, i8* } }* %x, 0
    %xg3 = insertvalue { { i64, { i64, i8* } }*, { i64, i64 } } %xf3, { i64, i64 } %tmpa, 1
    br label %while_startc

  while_startc:
    %xea1 = phi { { i64, { i64, i8* } }*, { i64, i64 } } [ %x19, %while_ende ], [ %xg3, %ctd_if ]
    %a13 = extractvalue { { i64, { i64, i8* } }*, { i64, i64 } } %xea1, 0
    %xfa = extractvalue { { i64, { i64, i8* } }*, { i64, i64 } } %xea1, 1
    %a = extractvalue { i64, i64 } %xfa, 0
    %x13 = extractvalue { i64, i64 } %xfa, 1
    %x14 = icmp slt i64 %a, %x13
    br i1 %x14, label %while_bodyc, label %while_endc

  while_bodyc:
    %a14 = extractvalue { { i64, { i64, i8* } }*, { i64, i64 } } %xea1, 0
    %xfa1 = extractvalue { { i64, { i64, i8* } }*, { i64, i64 } } %xea1, 1
    %a1a3 = extractvalue { i64, i64 } %xfa1, 0
    %a2a3 = extractvalue { i64, i64 } %xfa1, 1
    %xga = call { i64, { i64, i8* } }* @Proto_IICF_EOArray_swap_eo_impl1 ({ i64, { i64, i8* } }* %a14, i64 %a1a3, i64 %a2a3)
    %xha = sub i64 %a2a3, 1
    br label %while_startd

  while_startd:
    %s3 = phi i64 [ %x15, %while_bodyd ], [ %xha, %while_bodyc ]
    %xi2 = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %xga, i64 %x1
    %r3 = load { i64, { i64, i8* } }, { i64, { i64, i8* } }* %xi2
    %xj2 = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } zeroinitializer, { i64, { i64, i8* } } %r3, 0
    %xk1 = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xj2, { i64, { i64, i8* } }* %xga, 1
    %a1b = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xk1, 0
    %a23 = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xk1, 1
    %xl1 = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %a23, i64 %s3
    %ra3 = load { i64, { i64, i8* } }, { i64, { i64, i8* } }* %xl1
    %xm = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } zeroinitializer, { i64, { i64, i8* } } %ra3, 0
    %xn = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xm, { i64, { i64, i8* } }* %a23, 1
    %a1aa = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xn, 0
    %a2aa = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xn, 1
    %xo = call i1 @Sorting_Strings_strcmp_impl ({ i64, { i64, i8* } } %a1b, { i64, { i64, i8* } } %a1aa)
    %p3 = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %a2aa, i64 %x1
    store { i64, { i64, i8* } } %a1b, { i64, { i64, i8* } }* %p3
    %pa3 = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %a2aa, i64 %s3
    store { i64, { i64, i8* } } %a1aa, { i64, { i64, i8* } }* %pa3
    br i1 %xo, label %while_bodyd, label %while_endd

  while_bodyd:
    %x15 = sub i64 %s3, 1
    br label %while_startd

  while_endd:
    %xja = add i64 %a1a3, 1
    br label %while_starte

  while_starte:
    %s4 = phi i64 [ %x17, %while_bodye ], [ %xja, %while_endd ]
    %xk2 = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %xga, i64 %x1
    %r4 = load { i64, { i64, i8* } }, { i64, { i64, i8* } }* %xk2
    %xl2 = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } zeroinitializer, { i64, { i64, i8* } } %r4, 0
    %xm1 = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xl2, { i64, { i64, i8* } }* %xga, 1
    %a1b1 = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xm1, 0
    %a24 = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xm1, 1
    %xn1 = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %a24, i64 %s4
    %ra4 = load { i64, { i64, i8* } }, { i64, { i64, i8* } }* %xn1
    %xo1 = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } zeroinitializer, { i64, { i64, i8* } } %ra4, 0
    %xp = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xo1, { i64, { i64, i8* } }* %a24, 1
    %a1aa1 = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xp, 0
    %a2aa1 = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xp, 1
    %xq = call i1 @Sorting_Strings_strcmp_impl ({ i64, { i64, i8* } } %a1b1, { i64, { i64, i8* } } %a1aa1)
    %p4 = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %a2aa1, i64 %x1
    store { i64, { i64, i8* } } %a1b1, { i64, { i64, i8* } }* %p4
    %pa4 = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %a2aa1, i64 %s4
    store { i64, { i64, i8* } } %a1aa1, { i64, { i64, i8* } }* %pa4
    %x16 = add i1 %xq, 1
    br i1 %x16, label %while_bodye, label %while_ende

  while_bodye:
    %x17 = add i64 %s4, 1
    br label %while_starte

  while_ende:
    %xl3 = insertvalue { { i64, { i64, i8* } }*, { i64, i64 } } zeroinitializer, { i64, { i64, i8* } }* %xga, 0
    %xm2 = insertvalue { i64, i64 } zeroinitializer, i64 %s4, 0
    %x18 = insertvalue { i64, i64 } %xm2, i64 %s3, 1
    %x19 = insertvalue { { i64, { i64, i8* } }*, { i64, i64 } } %xl3, { i64, i64 } %x18, 1
    br label %while_startc

  while_endc:
    %a15 = extractvalue { { i64, { i64, i8* } }*, { i64, i64 } } %xea1, 0
    %xfa2 = extractvalue { { i64, { i64, i8* } }*, { i64, i64 } } %xea1, 1
    %a1a4 = extractvalue { i64, i64 } %xfa2, 0
    %a2a4 = extractvalue { i64, i64 } %xfa2, 1
    %xga1 = call { i64, { i64, i8* } }* @Proto_IICF_EOArray_swap_eo_impl1 ({ i64, { i64, i8* } }* %a15, i64 %x1, i64 %a2a4)
    %xha1 = insertvalue { i1, { i64, { i64, { i64, i8* } }* } } zeroinitializer, i1 0, 0
    %xi4 = insertvalue { i64, { i64, { i64, i8* } }* } zeroinitializer, i64 %a2a4, 0
    %x20 = insertvalue { i64, { i64, { i64, i8* } }* } %xi4, { i64, { i64, i8* } }* %xga1, 1
    %x21 = insertvalue { i1, { i64, { i64, { i64, i8* } }* } } %xha1, { i64, { i64, { i64, i8* } }* } %x20, 1
    ret { i1, { i64, { i64, { i64, i8* } }* } } %x21
}

define i64* @introsort_aux(i64* %x, i64 %x1, i64 %x2, i64 %x3) {

  start:
    %x4 = insertvalue { i64, i64 } zeroinitializer, i64 %x2, 0
    %tmpa = insertvalue { i64, i64 } %x4, i64 %x3, 1
    %xa = insertvalue { i64, { i64, i64 } } zeroinitializer, i64 %x1, 0
    %tmpab = insertvalue { i64, { i64, i64 } } %xa, { i64, i64 } %tmpa, 1
    %xb = insertvalue { i64*, { i64, { i64, i64 } } } zeroinitializer, i64* %x, 0
    %x5 = insertvalue { i64*, { i64, { i64, i64 } } } %xb, { i64, { i64, i64 } } %tmpab, 1
    %x6 = call i64* @Sorting_Export_Code_unat_sort_introsort_aux_impl_f_07195614 ({ i64*, { i64, { i64, i64 } } } %x5)
    ret i64* %x6
}

define { i1, { i64, i64* } } @Sorting_Export_Code_unat_sort_partition_left_impl(i64* %x, i64 %x1, i64 %x2) {

  start:
    %xa = sub i64 %x2, 1
    br label %while_start

  while_start:
    %s = phi i64 [ %x3, %while_body ], [ %xa, %start ]
    %xaa = getelementptr i64, i64* %x, i64 %x1
    %r = load i64, i64* %xaa
    %xb = insertvalue { i64, i64* } zeroinitializer, i64 %r, 0
    %xc = insertvalue { i64, i64* } %xb, i64* %x, 1
    %a1 = extractvalue { i64, i64* } %xc, 0
    %a2 = extractvalue { i64, i64* } %xc, 1
    %xd = getelementptr i64, i64* %a2, i64 %s
    %ra = load i64, i64* %xd
    %xe = insertvalue { i64, i64* } zeroinitializer, i64 %ra, 0
    %xf = insertvalue { i64, i64* } %xe, i64* %a2, 1
    %a1a = extractvalue { i64, i64* } %xf, 0
    %a2a = extractvalue { i64, i64* } %xf, 1
    %xg = icmp ult i64 %a1, %a1a
    %p = getelementptr i64, i64* %a2a, i64 %x1
    store i64 %a1, i64* %p
    %pa = getelementptr i64, i64* %a2a, i64 %s
    store i64 %a1a, i64* %pa
    br i1 %xg, label %while_body, label %while_end

  while_body:
    %x3 = sub i64 %s, 1
    br label %while_start

  while_end:
    %xba = add i64 %s, 1
    %xc1 = icmp eq i64 %xba, %x2
    br i1 %xc1, label %then, label %else

  then:
    %x4 = add i64 %x1, 1
    br label %while_starta

  while_starta:
    %s1 = phi i64 [ %x7, %while_bodya ], [ %x4, %then ]
    %xda = sub i64 %x2, 1
    %xeaa = icmp slt i64 %s1, %xda
    br i1 %xeaa, label %thena, label %elsea

  thena:
    %xf1 = getelementptr i64, i64* %x, i64 %x1
    %r1 = load i64, i64* %xf1
    %xg1 = insertvalue { i64, i64* } zeroinitializer, i64 %r1, 0
    %xh = insertvalue { i64, i64* } %xg1, i64* %x, 1
    %a11 = extractvalue { i64, i64* } %xh, 0
    %a21 = extractvalue { i64, i64* } %xh, 1
    %xi = getelementptr i64, i64* %a21, i64 %s1
    %ra1 = load i64, i64* %xi
    %xj = insertvalue { i64, i64* } zeroinitializer, i64 %ra1, 0
    %xk = insertvalue { i64, i64* } %xj, i64* %a21, 1
    %a1a1 = extractvalue { i64, i64* } %xk, 0
    %a2a1 = extractvalue { i64, i64* } %xk, 1
    %xl = icmp ult i64 %a11, %a1a1
    %p1 = getelementptr i64, i64* %a2a1, i64 %x1
    store i64 %a11, i64* %p1
    %pa1 = getelementptr i64, i64* %a2a1, i64 %s1
    store i64 %a1a1, i64* %pa1
    %x5 = add i1 %xl, 1
    br label %ctd_ifa

  elsea:
    br label %ctd_ifa

  ctd_ifa:
    %x6 = phi i1 [ 0, %elsea ], [ %x5, %thena ]
    br i1 %x6, label %while_bodya, label %while_enda

  while_bodya:
    %x7 = add i64 %s1, 1
    br label %while_starta

  while_enda:
    br label %ctd_if

  else:
    %x9 = add i64 %x1, 1
    br label %while_startb

  while_startb:
    %s2 = phi i64 [ %x11, %while_bodyb ], [ %x9, %else ]
    %xda1 = getelementptr i64, i64* %x, i64 %x1
    %r2 = load i64, i64* %xda1
    %xea = insertvalue { i64, i64* } zeroinitializer, i64 %r2, 0
    %xf2 = insertvalue { i64, i64* } %xea, i64* %x, 1
    %a12 = extractvalue { i64, i64* } %xf2, 0
    %a22 = extractvalue { i64, i64* } %xf2, 1
    %xg2 = getelementptr i64, i64* %a22, i64 %s2
    %ra2 = load i64, i64* %xg2
    %xh1 = insertvalue { i64, i64* } zeroinitializer, i64 %ra2, 0
    %xi1 = insertvalue { i64, i64* } %xh1, i64* %a22, 1
    %a1a2 = extractvalue { i64, i64* } %xi1, 0
    %a2a2 = extractvalue { i64, i64* } %xi1, 1
    %xj1 = icmp ult i64 %a12, %a1a2
    %p2 = getelementptr i64, i64* %a2a2, i64 %x1
    store i64 %a12, i64* %p2
    %pa2 = getelementptr i64, i64* %a2a2, i64 %s2
    store i64 %a1a2, i64* %pa2
    %x10 = add i1 %xj1, 1
    br i1 %x10, label %while_bodyb, label %while_endb

  while_bodyb:
    %x11 = add i64 %s2, 1
    br label %while_startb

  while_endb:
    br label %ctd_if

  ctd_if:
    %xd1 = phi i64 [ %s2, %while_endb ], [ %s1, %while_enda ]
    %xe1 = insertvalue { i64, i64 } zeroinitializer, i64 %xd1, 0
    %tmpa = insertvalue { i64, i64 } %xe1, i64 %s, 1
    %xf3 = insertvalue { i64*, { i64, i64 } } zeroinitializer, i64* %x, 0
    %xg3 = insertvalue { i64*, { i64, i64 } } %xf3, { i64, i64 } %tmpa, 1
    br label %while_startc

  while_startc:
    %xea1 = phi { i64*, { i64, i64 } } [ %x19, %while_ende ], [ %xg3, %ctd_if ]
    %a13 = extractvalue { i64*, { i64, i64 } } %xea1, 0
    %xfa = extractvalue { i64*, { i64, i64 } } %xea1, 1
    %a = extractvalue { i64, i64 } %xfa, 0
    %x13 = extractvalue { i64, i64 } %xfa, 1
    %x14 = icmp slt i64 %a, %x13
    br i1 %x14, label %while_bodyc, label %while_endc

  while_bodyc:
    %a14 = extractvalue { i64*, { i64, i64 } } %xea1, 0
    %xfa1 = extractvalue { i64*, { i64, i64 } } %xea1, 1
    %a1a3 = extractvalue { i64, i64 } %xfa1, 0
    %a2a3 = extractvalue { i64, i64 } %xfa1, 1
    %xga = call i64* @Proto_IICF_EOArray_swap_eo_impl (i64* %a14, i64 %a1a3, i64 %a2a3)
    %xha = sub i64 %a2a3, 1
    br label %while_startd

  while_startd:
    %s3 = phi i64 [ %x15, %while_bodyd ], [ %xha, %while_bodyc ]
    %xi2 = getelementptr i64, i64* %xga, i64 %x1
    %r3 = load i64, i64* %xi2
    %xj2 = insertvalue { i64, i64* } zeroinitializer, i64 %r3, 0
    %xk1 = insertvalue { i64, i64* } %xj2, i64* %xga, 1
    %a1b = extractvalue { i64, i64* } %xk1, 0
    %a23 = extractvalue { i64, i64* } %xk1, 1
    %xl1 = getelementptr i64, i64* %a23, i64 %s3
    %ra3 = load i64, i64* %xl1
    %xm = insertvalue { i64, i64* } zeroinitializer, i64 %ra3, 0
    %xn = insertvalue { i64, i64* } %xm, i64* %a23, 1
    %a1aa = extractvalue { i64, i64* } %xn, 0
    %a2aa = extractvalue { i64, i64* } %xn, 1
    %xo = icmp ult i64 %a1b, %a1aa
    %p3 = getelementptr i64, i64* %a2aa, i64 %x1
    store i64 %a1b, i64* %p3
    %pa3 = getelementptr i64, i64* %a2aa, i64 %s3
    store i64 %a1aa, i64* %pa3
    br i1 %xo, label %while_bodyd, label %while_endd

  while_bodyd:
    %x15 = sub i64 %s3, 1
    br label %while_startd

  while_endd:
    %xja = add i64 %a1a3, 1
    br label %while_starte

  while_starte:
    %s4 = phi i64 [ %x17, %while_bodye ], [ %xja, %while_endd ]
    %xk2 = getelementptr i64, i64* %xga, i64 %x1
    %r4 = load i64, i64* %xk2
    %xl2 = insertvalue { i64, i64* } zeroinitializer, i64 %r4, 0
    %xm1 = insertvalue { i64, i64* } %xl2, i64* %xga, 1
    %a1b1 = extractvalue { i64, i64* } %xm1, 0
    %a24 = extractvalue { i64, i64* } %xm1, 1
    %xn1 = getelementptr i64, i64* %a24, i64 %s4
    %ra4 = load i64, i64* %xn1
    %xo1 = insertvalue { i64, i64* } zeroinitializer, i64 %ra4, 0
    %xp = insertvalue { i64, i64* } %xo1, i64* %a24, 1
    %a1aa1 = extractvalue { i64, i64* } %xp, 0
    %a2aa1 = extractvalue { i64, i64* } %xp, 1
    %xq = icmp ult i64 %a1b1, %a1aa1
    %p4 = getelementptr i64, i64* %a2aa1, i64 %x1
    store i64 %a1b1, i64* %p4
    %pa4 = getelementptr i64, i64* %a2aa1, i64 %s4
    store i64 %a1aa1, i64* %pa4
    %x16 = add i1 %xq, 1
    br i1 %x16, label %while_bodye, label %while_ende

  while_bodye:
    %x17 = add i64 %s4, 1
    br label %while_starte

  while_ende:
    %xl3 = insertvalue { i64*, { i64, i64 } } zeroinitializer, i64* %xga, 0
    %xm2 = insertvalue { i64, i64 } zeroinitializer, i64 %s4, 0
    %x18 = insertvalue { i64, i64 } %xm2, i64 %s3, 1
    %x19 = insertvalue { i64*, { i64, i64 } } %xl3, { i64, i64 } %x18, 1
    br label %while_startc

  while_endc:
    %a15 = extractvalue { i64*, { i64, i64 } } %xea1, 0
    %xfa2 = extractvalue { i64*, { i64, i64 } } %xea1, 1
    %a1a4 = extractvalue { i64, i64 } %xfa2, 0
    %a2a4 = extractvalue { i64, i64 } %xfa2, 1
    %xga1 = call i64* @Proto_IICF_EOArray_swap_eo_impl (i64* %a15, i64 %x1, i64 %a2a4)
    %xha1 = insertvalue { i1, { i64, i64* } } zeroinitializer, i1 0, 0
    %xi4 = insertvalue { i64, i64* } zeroinitializer, i64 %a2a4, 0
    %x20 = insertvalue { i64, i64* } %xi4, i64* %xga1, 1
    %x21 = insertvalue { i1, { i64, i64* } } %xha1, { i64, i64* } %x20, 1
    ret { i1, { i64, i64* } } %x21
}

define { i64, { i64, i8* } }* @Sorting_Export_Code_str_sort_is_guarded_insert_impl({ i64, { i64, i8* } }* %x, i64 %x1, i64 %x2) {

  start:
    %x3 = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %x, i64 %x2
    %r = load { i64, { i64, i8* } }, { i64, { i64, i8* } }* %x3
    %xa = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } zeroinitializer, { i64, { i64, i8* } } %r, 0
    %xb = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xa, { i64, { i64, i8* } }* %x, 1
    %a1 = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xb, 0
    %a2 = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xb, 1
    %xc = insertvalue { { i64, { i64, i8* } }*, i64 } zeroinitializer, { i64, { i64, i8* } }* %a2, 0
    %xd = insertvalue { { i64, { i64, i8* } }*, i64 } %xc, i64 %x2, 1
    br label %while_start

  while_start:
    %xca = phi { { i64, { i64, i8* } }*, i64 } [ %x5, %while_body ], [ %xd, %start ]
    %a1a = extractvalue { { i64, { i64, i8* } }*, i64 } %xca, 0
    %a2a = extractvalue { { i64, { i64, i8* } }*, i64 } %xca, 1
    %xda = icmp slt i64 %x1, %a2a
    br i1 %xda, label %then, label %else

  then:
    %bib = sub i64 %a2a, 1
    %xea = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %a1a, i64 %bib
    %ra = load { i64, { i64, i8* } }, { i64, { i64, i8* } }* %xea
    %xf = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } zeroinitializer, { i64, { i64, i8* } } %ra, 0
    %xg = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xf, { i64, { i64, i8* } }* %a1a, 1
    %a1b = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xg, 0
    %a2b = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xg, 1
    %xh = call i1 @Sorting_Strings_strcmp_impl ({ i64, { i64, i8* } } %a1, { i64, { i64, i8* } } %a1b)
    %p = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %a2b, i64 %bib
    store { i64, { i64, i8* } } %a1b, { i64, { i64, i8* } }* %p
    br label %ctd_if

  else:
    br label %ctd_if

  ctd_if:
    %x4 = phi i1 [ 0, %else ], [ %xh, %then ]
    br i1 %x4, label %while_body, label %while_end

  while_body:
    %a1a1 = extractvalue { { i64, { i64, i8* } }*, i64 } %xca, 0
    %a2a1 = extractvalue { { i64, { i64, i8* } }*, i64 } %xca, 1
    %xda1 = sub i64 %a2a1, 1
    %xea1 = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %a1a1, i64 %xda1
    %ra1 = load { i64, { i64, i8* } }, { i64, { i64, i8* } }* %xea1
    %xf1 = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } zeroinitializer, { i64, { i64, i8* } } %ra1, 0
    %xg1 = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xf1, { i64, { i64, i8* } }* %a1a1, 1
    %a1b1 = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xg1, 0
    %a2b1 = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xg1, 1
    %p1 = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %a2b1, i64 %a2a1
    store { i64, { i64, i8* } } %a1b1, { i64, { i64, i8* } }* %p1
    %xia = sub i64 %a2a1, 1
    %xj = insertvalue { { i64, { i64, i8* } }*, i64 } zeroinitializer, { i64, { i64, i8* } }* %a2b1, 0
    %x5 = insertvalue { { i64, { i64, i8* } }*, i64 } %xj, i64 %xia, 1
    br label %while_start

  while_end:
    %a1a2 = extractvalue { { i64, { i64, i8* } }*, i64 } %xca, 0
    %a2a2 = extractvalue { { i64, { i64, i8* } }*, i64 } %xca, 1
    %p2 = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %a1a2, i64 %a2a2
    store { i64, { i64, i8* } } %a1, { i64, { i64, i8* } }* %p2
    ret { i64, { i64, i8* } }* %a1a2
}

define { i64, { i64, i8* } }* @Sorting_Export_Code_str_sort_pdq_guarded_insort_impl({ i64, { i64, i8* } }* %x, i64 %x1, i64 %x2) {

  start:
    %x3 = icmp ne i64 %x1, %x2
    br i1 %x3, label %then, label %else

  then:
    %xaa = add i64 %x1, 1
    %xb = insertvalue { i64, { i64, { i64, i8* } }* } zeroinitializer, i64 %xaa, 0
    %xc = insertvalue { i64, { i64, { i64, i8* } }* } %xb, { i64, { i64, i8* } }* %x, 1
    br label %while_start

  while_start:
    %xba = phi { i64, { i64, { i64, i8* } }* } [ %x7, %ctd_ifb ], [ %xc, %then ]
    %a1 = extractvalue { i64, { i64, { i64, i8* } }* } %xba, 0
    %a2 = extractvalue { i64, { i64, { i64, i8* } }* } %xba, 1
    %x4 = icmp slt i64 %a1, %x2
    br i1 %x4, label %while_body, label %while_end

  while_body:
    %a11 = extractvalue { i64, { i64, { i64, i8* } }* } %xba, 0
    %a21 = extractvalue { i64, { i64, { i64, i8* } }* } %xba, 1
    %xca = icmp slt i64 %x1, %a11
    br i1 %xca, label %thena, label %elsea

  thena:
    %bib = sub i64 %a11, 1
    %xda = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %a21, i64 %a11
    %r = load { i64, { i64, i8* } }, { i64, { i64, i8* } }* %xda
    %xe = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } zeroinitializer, { i64, { i64, i8* } } %r, 0
    %xf = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xe, { i64, { i64, i8* } }* %a21, 1
    %a1a = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xf, 0
    %a2a = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xf, 1
    %xg = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %a2a, i64 %bib
    %ra = load { i64, { i64, i8* } }, { i64, { i64, i8* } }* %xg
    %xh = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } zeroinitializer, { i64, { i64, i8* } } %ra, 0
    %xi = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xh, { i64, { i64, i8* } }* %a2a, 1
    %a1aa = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xi, 0
    %a2aa = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xi, 1
    %xj = call i1 @Sorting_Strings_strcmp_impl ({ i64, { i64, i8* } } %a1a, { i64, { i64, i8* } } %a1aa)
    %p = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %a2aa, i64 %a11
    store { i64, { i64, i8* } } %a1a, { i64, { i64, i8* } }* %p
    %pa = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %a2aa, i64 %bib
    store { i64, { i64, i8* } } %a1aa, { i64, { i64, i8* } }* %pa
    br label %ctd_ifa

  elsea:
    br label %ctd_ifa

  ctd_ifa:
    %xd = phi i1 [ 0, %elsea ], [ %xj, %thena ]
    br i1 %xd, label %thenb, label %elseb

  thenb:
    %xe1 = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %a21, i64 %a11
    %r1 = load { i64, { i64, i8* } }, { i64, { i64, i8* } }* %xe1
    %xf1 = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } zeroinitializer, { i64, { i64, i8* } } %r1, 0
    %xg1 = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xf1, { i64, { i64, i8* } }* %a21, 1
    %a1a1 = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xg1, 0
    %a2a1 = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xg1, 1
    %xha = sub i64 %a11, 1
    %xi1 = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %a2a1, i64 %xha
    %ra1 = load { i64, { i64, i8* } }, { i64, { i64, i8* } }* %xi1
    %xj1 = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } zeroinitializer, { i64, { i64, i8* } } %ra1, 0
    %xk = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xj1, { i64, { i64, i8* } }* %a2a1, 1
    %a1aa1 = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xk, 0
    %a2aa1 = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xk, 1
    %p1 = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %a2aa1, i64 %a11
    store { i64, { i64, i8* } } %a1aa1, { i64, { i64, i8* } }* %p1
    %xma = sub i64 %a11, 1
    %xn = insertvalue { { i64, { i64, i8* } }*, i64 } zeroinitializer, { i64, { i64, i8* } }* %a2aa1, 0
    %xo = insertvalue { { i64, { i64, i8* } }*, i64 } %xn, i64 %xma, 1
    br label %while_starta

  while_starta:
    %xna = phi { { i64, { i64, i8* } }*, i64 } [ %x6, %while_bodya ], [ %xo, %thenb ]
    %a1b = extractvalue { { i64, { i64, i8* } }*, i64 } %xna, 0
    %a2b = extractvalue { { i64, { i64, i8* } }*, i64 } %xna, 1
    %xoa = icmp slt i64 %x1, %a2b
    br i1 %xoa, label %thenc, label %elsec

  thenc:
    %bib1 = sub i64 %a2b, 1
    %xpa = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %a1b, i64 %bib1
    %rb = load { i64, { i64, i8* } }, { i64, { i64, i8* } }* %xpa
    %xq = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } zeroinitializer, { i64, { i64, i8* } } %rb, 0
    %xr = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xq, { i64, { i64, i8* } }* %a1b, 1
    %a1c = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xr, 0
    %a2c = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xr, 1
    %xs = call i1 @Sorting_Strings_strcmp_impl ({ i64, { i64, i8* } } %a1a1, { i64, { i64, i8* } } %a1c)
    %pa1 = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %a2c, i64 %bib1
    store { i64, { i64, i8* } } %a1c, { i64, { i64, i8* } }* %pa1
    br label %ctd_ifc

  elsec:
    br label %ctd_ifc

  ctd_ifc:
    %x5 = phi i1 [ 0, %elsec ], [ %xs, %thenc ]
    br i1 %x5, label %while_bodya, label %while_enda

  while_bodya:
    %a1b1 = extractvalue { { i64, { i64, i8* } }*, i64 } %xna, 0
    %a2b1 = extractvalue { { i64, { i64, i8* } }*, i64 } %xna, 1
    %xoa1 = sub i64 %a2b1, 1
    %xpa1 = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %a1b1, i64 %xoa1
    %rb1 = load { i64, { i64, i8* } }, { i64, { i64, i8* } }* %xpa1
    %xq1 = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } zeroinitializer, { i64, { i64, i8* } } %rb1, 0
    %xr1 = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xq1, { i64, { i64, i8* } }* %a1b1, 1
    %a1c1 = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xr1, 0
    %a2c1 = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xr1, 1
    %pa2 = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %a2c1, i64 %a2b1
    store { i64, { i64, i8* } } %a1c1, { i64, { i64, i8* } }* %pa2
    %xta = sub i64 %a2b1, 1
    %xu = insertvalue { { i64, { i64, i8* } }*, i64 } zeroinitializer, { i64, { i64, i8* } }* %a2c1, 0
    %x6 = insertvalue { { i64, { i64, i8* } }*, i64 } %xu, i64 %xta, 1
    br label %while_starta

  while_enda:
    %a1b2 = extractvalue { { i64, { i64, i8* } }*, i64 } %xna, 0
    %a2b2 = extractvalue { { i64, { i64, i8* } }*, i64 } %xna, 1
    %pa3 = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %a1b2, i64 %a2b2
    store { i64, { i64, i8* } } %a1a1, { i64, { i64, i8* } }* %pa3
    br label %ctd_ifb

  elseb:
    br label %ctd_ifb

  ctd_ifb:
    %xe2 = phi { i64, { i64, i8* } }* [ %a21, %elseb ], [ %a1b2, %while_enda ]
    %xfa = add i64 %a11, 1
    %xg2 = insertvalue { i64, { i64, { i64, i8* } }* } zeroinitializer, i64 %xfa, 0
    %x7 = insertvalue { i64, { i64, { i64, i8* } }* } %xg2, { i64, { i64, i8* } }* %xe2, 1
    br label %while_start

  while_end:
    %a12 = extractvalue { i64, { i64, { i64, i8* } }* } %xba, 0
    %x8 = extractvalue { i64, { i64, { i64, i8* } }* } %xba, 1
    br label %ctd_if

  else:
    br label %ctd_if

  ctd_if:
    %x9 = phi { i64, { i64, i8* } }* [ %x, %else ], [ %x8, %while_end ]
    ret { i64, { i64, i8* } }* %x9
}

define { i64, { i64, i8* } }* @Sorting_Export_Code_str_sort_pdqsort_impl_f_07258824({ i1, { { i64, { i64, i8* } }*, { i64, { i64, i64 } } } } %x) {

  start:
    %a1 = extractvalue { i1, { { i64, { i64, i8* } }*, { i64, { i64, i64 } } } } %x, 0
    %xea = extractvalue { i1, { { i64, { i64, i8* } }*, { i64, { i64, i64 } } } } %x, 1
    %a1a = extractvalue { { i64, { i64, i8* } }*, { i64, { i64, i64 } } } %xea, 0
    %xfa = extractvalue { { i64, { i64, i8* } }*, { i64, { i64, i64 } } } %xea, 1
    %a1b = extractvalue { i64, { i64, i64 } } %xfa, 0
    %xga = extractvalue { i64, { i64, i64 } } %xfa, 1
    %a1c = extractvalue { i64, i64 } %xga, 0
    %a2c = extractvalue { i64, i64 } %xga, 1
    %xh = sub i64 %a1c, %a1b
    %xia = icmp slt i64 %xh, 24
    br i1 %xia, label %then, label %else

  then:
    br i1 %a1, label %thena, label %elsea

  thena:
    %x1 = call { i64, { i64, i8* } }* @Sorting_Export_Code_str_sort_pdq_guarded_insort_impl ({ i64, { i64, i8* } }* %a1a, i64 %a1b, i64 %a1c)
    br label %ctd_ifa

  elsea:
    %x2 = call { i64, { i64, i8* } }* @Sorting_Export_Code_str_sort_pdq_unguarded_insort_impl ({ i64, { i64, i8* } }* %a1a, i64 %a1b, i64 %a1c)
    br label %ctd_ifa

  ctd_ifa:
    %x3 = phi { i64, { i64, i8* } }* [ %x2, %elsea ], [ %x1, %thena ]
    br label %ctd_if

  else:
    %xj = sub i64 %a1c, %a1b
    %xka = udiv i64 %xj, 2
    %xl = icmp slt i64 128, %xj
    br i1 %xl, label %thenb, label %elseb

  thenb:
    %xm = add i64 %a1b, %xka
    %xna = sub i64 %a1c, 1
    %xo = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %a1a, i64 %xm
    %r = load { i64, { i64, i8* } }, { i64, { i64, i8* } }* %xo
    %xp = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } zeroinitializer, { i64, { i64, i8* } } %r, 0
    %xq = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xp, { i64, { i64, i8* } }* %a1a, 1
    %a1d = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xq, 0
    %a2 = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xq, 1
    %xr = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %a2, i64 %a1b
    %ra = load { i64, { i64, i8* } }, { i64, { i64, i8* } }* %xr
    %xs = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } zeroinitializer, { i64, { i64, i8* } } %ra, 0
    %xt = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xs, { i64, { i64, i8* } }* %a2, 1
    %a1aa = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xt, 0
    %a2a = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xt, 1
    %xu = call i1 @Sorting_Strings_strcmp_impl ({ i64, { i64, i8* } } %a1d, { i64, { i64, i8* } } %a1aa)
    %p = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %a2a, i64 %xm
    store { i64, { i64, i8* } } %a1d, { i64, { i64, i8* } }* %p
    %pa = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %a2a, i64 %a1b
    store { i64, { i64, i8* } } %a1aa, { i64, { i64, i8* } }* %pa
    br i1 %xu, label %thenc, label %elsec

  thenc:
    %x4 = call { i64, { i64, i8* } }* @Proto_IICF_EOArray_swap_eo_impl1 ({ i64, { i64, i8* } }* %a1a, i64 %a1b, i64 %xm)
    br label %ctd_ifc

  elsec:
    br label %ctd_ifc

  ctd_ifc:
    %xy = phi { i64, { i64, i8* } }* [ %a1a, %elsec ], [ %x4, %thenc ]
    %xz = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %xy, i64 %xna
    %rb = load { i64, { i64, i8* } }, { i64, { i64, i8* } }* %xz
    %ya = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } zeroinitializer, { i64, { i64, i8* } } %rb, 0
    %yb = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %ya, { i64, { i64, i8* } }* %xy, 1
    %a1e = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %yb, 0
    %a2b = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %yb, 1
    %yc = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %a2b, i64 %xm
    %rc = load { i64, { i64, i8* } }, { i64, { i64, i8* } }* %yc
    %yd = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } zeroinitializer, { i64, { i64, i8* } } %rc, 0
    %ye = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %yd, { i64, { i64, i8* } }* %a2b, 1
    %a1ab = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %ye, 0
    %a2aa = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %ye, 1
    %yf = call i1 @Sorting_Strings_strcmp_impl ({ i64, { i64, i8* } } %a1e, { i64, { i64, i8* } } %a1ab)
    %pb = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %a2aa, i64 %xna
    store { i64, { i64, i8* } } %a1e, { i64, { i64, i8* } }* %pb
    %pc = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %a2aa, i64 %xm
    store { i64, { i64, i8* } } %a1ab, { i64, { i64, i8* } }* %pc
    br i1 %yf, label %thend, label %elsed

  thend:
    %x5 = call { i64, { i64, i8* } }* @Proto_IICF_EOArray_swap_eo_impl1 ({ i64, { i64, i8* } }* %xy, i64 %xm, i64 %xna)
    br label %ctd_ifd

  elsed:
    br label %ctd_ifd

  ctd_ifd:
    %yj = phi { i64, { i64, i8* } }* [ %xy, %elsed ], [ %x5, %thend ]
    %yk = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %yj, i64 %xm
    %rd = load { i64, { i64, i8* } }, { i64, { i64, i8* } }* %yk
    %yl = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } zeroinitializer, { i64, { i64, i8* } } %rd, 0
    %ym = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %yl, { i64, { i64, i8* } }* %yj, 1
    %a1f = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %ym, 0
    %a2d = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %ym, 1
    %yn = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %a2d, i64 %a1b
    %re = load { i64, { i64, i8* } }, { i64, { i64, i8* } }* %yn
    %yo = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } zeroinitializer, { i64, { i64, i8* } } %re, 0
    %yp = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %yo, { i64, { i64, i8* } }* %a2d, 1
    %a1ac = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %yp, 0
    %a2ab = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %yp, 1
    %yq = call i1 @Sorting_Strings_strcmp_impl ({ i64, { i64, i8* } } %a1f, { i64, { i64, i8* } } %a1ac)
    %pd = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %a2ab, i64 %xm
    store { i64, { i64, i8* } } %a1f, { i64, { i64, i8* } }* %pd
    %pe = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %a2ab, i64 %a1b
    store { i64, { i64, i8* } } %a1ac, { i64, { i64, i8* } }* %pe
    br i1 %yq, label %thene, label %elsee

  thene:
    %x6 = call { i64, { i64, i8* } }* @Proto_IICF_EOArray_swap_eo_impl1 ({ i64, { i64, i8* } }* %yj, i64 %a1b, i64 %xm)
    br label %ctd_ife

  elsee:
    br label %ctd_ife

  ctd_ife:
    %yu = phi { i64, { i64, i8* } }* [ %yj, %elsee ], [ %x6, %thene ]
    %yva = add i64 %a1b, 1
    %yw = add i64 %a1b, %xka
    %yxa = sub i64 %yw, 1
    %yya = sub i64 %a1c, 2
    %yz = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %yu, i64 %yxa
    %rf = load { i64, { i64, i8* } }, { i64, { i64, i8* } }* %yz
    %za = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } zeroinitializer, { i64, { i64, i8* } } %rf, 0
    %zb = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %za, { i64, { i64, i8* } }* %yu, 1
    %a1g = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %zb, 0
    %a2e = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %zb, 1
    %zc = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %a2e, i64 %yva
    %rg = load { i64, { i64, i8* } }, { i64, { i64, i8* } }* %zc
    %zd = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } zeroinitializer, { i64, { i64, i8* } } %rg, 0
    %ze = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %zd, { i64, { i64, i8* } }* %a2e, 1
    %a1ad = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %ze, 0
    %a2ac = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %ze, 1
    %zf = call i1 @Sorting_Strings_strcmp_impl ({ i64, { i64, i8* } } %a1g, { i64, { i64, i8* } } %a1ad)
    %pf = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %a2ac, i64 %yxa
    store { i64, { i64, i8* } } %a1g, { i64, { i64, i8* } }* %pf
    %pg = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %a2ac, i64 %yva
    store { i64, { i64, i8* } } %a1ad, { i64, { i64, i8* } }* %pg
    br i1 %zf, label %thenf, label %elsef

  thenf:
    %x7 = call { i64, { i64, i8* } }* @Proto_IICF_EOArray_swap_eo_impl1 ({ i64, { i64, i8* } }* %yu, i64 %yva, i64 %yxa)
    br label %ctd_iff

  elsef:
    br label %ctd_iff

  ctd_iff:
    %zj = phi { i64, { i64, i8* } }* [ %yu, %elsef ], [ %x7, %thenf ]
    %zk = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %zj, i64 %yya
    %rh = load { i64, { i64, i8* } }, { i64, { i64, i8* } }* %zk
    %zl = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } zeroinitializer, { i64, { i64, i8* } } %rh, 0
    %zm = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %zl, { i64, { i64, i8* } }* %zj, 1
    %a1h = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %zm, 0
    %a2f = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %zm, 1
    %zn = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %a2f, i64 %yxa
    %ri = load { i64, { i64, i8* } }, { i64, { i64, i8* } }* %zn
    %zo = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } zeroinitializer, { i64, { i64, i8* } } %ri, 0
    %zp = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %zo, { i64, { i64, i8* } }* %a2f, 1
    %a1ae = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %zp, 0
    %a2ad = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %zp, 1
    %zq = call i1 @Sorting_Strings_strcmp_impl ({ i64, { i64, i8* } } %a1h, { i64, { i64, i8* } } %a1ae)
    %ph = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %a2ad, i64 %yya
    store { i64, { i64, i8* } } %a1h, { i64, { i64, i8* } }* %ph
    %pi = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %a2ad, i64 %yxa
    store { i64, { i64, i8* } } %a1ae, { i64, { i64, i8* } }* %pi
    br i1 %zq, label %theng, label %elseg

  theng:
    %x8 = call { i64, { i64, i8* } }* @Proto_IICF_EOArray_swap_eo_impl1 ({ i64, { i64, i8* } }* %zj, i64 %yxa, i64 %yya)
    br label %ctd_ifg

  elseg:
    br label %ctd_ifg

  ctd_ifg:
    %zu = phi { i64, { i64, i8* } }* [ %zj, %elseg ], [ %x8, %theng ]
    %zv = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %zu, i64 %yxa
    %rj = load { i64, { i64, i8* } }, { i64, { i64, i8* } }* %zv
    %zw = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } zeroinitializer, { i64, { i64, i8* } } %rj, 0
    %zx = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %zw, { i64, { i64, i8* } }* %zu, 1
    %a1i = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %zx, 0
    %a2g = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %zx, 1
    %zy = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %a2g, i64 %yva
    %rk = load { i64, { i64, i8* } }, { i64, { i64, i8* } }* %zy
    %zz = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } zeroinitializer, { i64, { i64, i8* } } %rk, 0
    %aaa = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %zz, { i64, { i64, i8* } }* %a2g, 1
    %a1af = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %aaa, 0
    %a2ae = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %aaa, 1
    %aab = call i1 @Sorting_Strings_strcmp_impl ({ i64, { i64, i8* } } %a1i, { i64, { i64, i8* } } %a1af)
    %pj = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %a2ae, i64 %yxa
    store { i64, { i64, i8* } } %a1i, { i64, { i64, i8* } }* %pj
    %pk = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %a2ae, i64 %yva
    store { i64, { i64, i8* } } %a1af, { i64, { i64, i8* } }* %pk
    br i1 %aab, label %thenh, label %elseh

  thenh:
    %x9 = call { i64, { i64, i8* } }* @Proto_IICF_EOArray_swap_eo_impl1 ({ i64, { i64, i8* } }* %zu, i64 %yva, i64 %yxa)
    br label %ctd_ifh

  elseh:
    br label %ctd_ifh

  ctd_ifh:
    %aaf = phi { i64, { i64, i8* } }* [ %zu, %elseh ], [ %x9, %thenh ]
    %aaga = add i64 %a1b, 2
    %aah = add i64 %a1b, %xka
    %aaia = add i64 %aah, 1
    %aaja = sub i64 %a1c, 3
    %aak = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %aaf, i64 %aaia
    %rl = load { i64, { i64, i8* } }, { i64, { i64, i8* } }* %aak
    %aal = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } zeroinitializer, { i64, { i64, i8* } } %rl, 0
    %aam = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %aal, { i64, { i64, i8* } }* %aaf, 1
    %a1j = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %aam, 0
    %a2h = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %aam, 1
    %aan = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %a2h, i64 %aaga
    %rm = load { i64, { i64, i8* } }, { i64, { i64, i8* } }* %aan
    %aao = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } zeroinitializer, { i64, { i64, i8* } } %rm, 0
    %aap = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %aao, { i64, { i64, i8* } }* %a2h, 1
    %a1ag = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %aap, 0
    %a2af = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %aap, 1
    %aaq = call i1 @Sorting_Strings_strcmp_impl ({ i64, { i64, i8* } } %a1j, { i64, { i64, i8* } } %a1ag)
    %pl = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %a2af, i64 %aaia
    store { i64, { i64, i8* } } %a1j, { i64, { i64, i8* } }* %pl
    %pm = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %a2af, i64 %aaga
    store { i64, { i64, i8* } } %a1ag, { i64, { i64, i8* } }* %pm
    br i1 %aaq, label %theni, label %elsei

  theni:
    %x10 = call { i64, { i64, i8* } }* @Proto_IICF_EOArray_swap_eo_impl1 ({ i64, { i64, i8* } }* %aaf, i64 %aaga, i64 %aaia)
    br label %ctd_ifi

  elsei:
    br label %ctd_ifi

  ctd_ifi:
    %aau = phi { i64, { i64, i8* } }* [ %aaf, %elsei ], [ %x10, %theni ]
    %aav = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %aau, i64 %aaja
    %rn = load { i64, { i64, i8* } }, { i64, { i64, i8* } }* %aav
    %aaw = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } zeroinitializer, { i64, { i64, i8* } } %rn, 0
    %aax = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %aaw, { i64, { i64, i8* } }* %aau, 1
    %a1k = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %aax, 0
    %a2i = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %aax, 1
    %aay = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %a2i, i64 %aaia
    %ro = load { i64, { i64, i8* } }, { i64, { i64, i8* } }* %aay
    %aaz = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } zeroinitializer, { i64, { i64, i8* } } %ro, 0
    %aba = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %aaz, { i64, { i64, i8* } }* %a2i, 1
    %a1ah = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %aba, 0
    %a2ag = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %aba, 1
    %abb = call i1 @Sorting_Strings_strcmp_impl ({ i64, { i64, i8* } } %a1k, { i64, { i64, i8* } } %a1ah)
    %pn = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %a2ag, i64 %aaja
    store { i64, { i64, i8* } } %a1k, { i64, { i64, i8* } }* %pn
    %po = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %a2ag, i64 %aaia
    store { i64, { i64, i8* } } %a1ah, { i64, { i64, i8* } }* %po
    br i1 %abb, label %thenj, label %elsej

  thenj:
    %x11 = call { i64, { i64, i8* } }* @Proto_IICF_EOArray_swap_eo_impl1 ({ i64, { i64, i8* } }* %aau, i64 %aaia, i64 %aaja)
    br label %ctd_ifj

  elsej:
    br label %ctd_ifj

  ctd_ifj:
    %abf = phi { i64, { i64, i8* } }* [ %aau, %elsej ], [ %x11, %thenj ]
    %abg = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %abf, i64 %aaia
    %rp = load { i64, { i64, i8* } }, { i64, { i64, i8* } }* %abg
    %abh = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } zeroinitializer, { i64, { i64, i8* } } %rp, 0
    %abi = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %abh, { i64, { i64, i8* } }* %abf, 1
    %a1l = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %abi, 0
    %a2j = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %abi, 1
    %abj = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %a2j, i64 %aaga
    %rq = load { i64, { i64, i8* } }, { i64, { i64, i8* } }* %abj
    %abk = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } zeroinitializer, { i64, { i64, i8* } } %rq, 0
    %abl = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %abk, { i64, { i64, i8* } }* %a2j, 1
    %a1ai = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %abl, 0
    %a2ah = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %abl, 1
    %abm = call i1 @Sorting_Strings_strcmp_impl ({ i64, { i64, i8* } } %a1l, { i64, { i64, i8* } } %a1ai)
    %pp = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %a2ah, i64 %aaia
    store { i64, { i64, i8* } } %a1l, { i64, { i64, i8* } }* %pp
    %pq = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %a2ah, i64 %aaga
    store { i64, { i64, i8* } } %a1ai, { i64, { i64, i8* } }* %pq
    br i1 %abm, label %thenk, label %elsek

  thenk:
    %x12 = call { i64, { i64, i8* } }* @Proto_IICF_EOArray_swap_eo_impl1 ({ i64, { i64, i8* } }* %abf, i64 %aaga, i64 %aaia)
    br label %ctd_ifk

  elsek:
    br label %ctd_ifk

  ctd_ifk:
    %abq = phi { i64, { i64, i8* } }* [ %abf, %elsek ], [ %x12, %thenk ]
    %abr = add i64 %a1b, %xka
    %absa = sub i64 %abr, 1
    %abt = add i64 %a1b, %xka
    %abu = add i64 %a1b, %xka
    %abva = add i64 %abu, 1
    %abw = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %abq, i64 %abt
    %rr = load { i64, { i64, i8* } }, { i64, { i64, i8* } }* %abw
    %abx = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } zeroinitializer, { i64, { i64, i8* } } %rr, 0
    %aby = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %abx, { i64, { i64, i8* } }* %abq, 1
    %a1m = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %aby, 0
    %a2k = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %aby, 1
    %abz = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %a2k, i64 %absa
    %rs = load { i64, { i64, i8* } }, { i64, { i64, i8* } }* %abz
    %aca = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } zeroinitializer, { i64, { i64, i8* } } %rs, 0
    %acb = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %aca, { i64, { i64, i8* } }* %a2k, 1
    %a1aj = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %acb, 0
    %a2ai = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %acb, 1
    %acc = call i1 @Sorting_Strings_strcmp_impl ({ i64, { i64, i8* } } %a1m, { i64, { i64, i8* } } %a1aj)
    %pr = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %a2ai, i64 %abt
    store { i64, { i64, i8* } } %a1m, { i64, { i64, i8* } }* %pr
    %ps = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %a2ai, i64 %absa
    store { i64, { i64, i8* } } %a1aj, { i64, { i64, i8* } }* %ps
    br i1 %acc, label %thenl, label %elsel

  thenl:
    %x13 = call { i64, { i64, i8* } }* @Proto_IICF_EOArray_swap_eo_impl1 ({ i64, { i64, i8* } }* %abq, i64 %absa, i64 %abt)
    br label %ctd_ifl

  elsel:
    br label %ctd_ifl

  ctd_ifl:
    %acg = phi { i64, { i64, i8* } }* [ %abq, %elsel ], [ %x13, %thenl ]
    %ach = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %acg, i64 %abva
    %rt = load { i64, { i64, i8* } }, { i64, { i64, i8* } }* %ach
    %aci = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } zeroinitializer, { i64, { i64, i8* } } %rt, 0
    %acj = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %aci, { i64, { i64, i8* } }* %acg, 1
    %a1n = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %acj, 0
    %a2l = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %acj, 1
    %ack = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %a2l, i64 %abt
    %ru = load { i64, { i64, i8* } }, { i64, { i64, i8* } }* %ack
    %acl = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } zeroinitializer, { i64, { i64, i8* } } %ru, 0
    %acm = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %acl, { i64, { i64, i8* } }* %a2l, 1
    %a1ak = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %acm, 0
    %a2aj = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %acm, 1
    %acn = call i1 @Sorting_Strings_strcmp_impl ({ i64, { i64, i8* } } %a1n, { i64, { i64, i8* } } %a1ak)
    %pt = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %a2aj, i64 %abva
    store { i64, { i64, i8* } } %a1n, { i64, { i64, i8* } }* %pt
    %pu = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %a2aj, i64 %abt
    store { i64, { i64, i8* } } %a1ak, { i64, { i64, i8* } }* %pu
    br i1 %acn, label %thenm, label %elsem

  thenm:
    %x14 = call { i64, { i64, i8* } }* @Proto_IICF_EOArray_swap_eo_impl1 ({ i64, { i64, i8* } }* %acg, i64 %abt, i64 %abva)
    br label %ctd_ifm

  elsem:
    br label %ctd_ifm

  ctd_ifm:
    %acr = phi { i64, { i64, i8* } }* [ %acg, %elsem ], [ %x14, %thenm ]
    %acs = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %acr, i64 %abt
    %rv = load { i64, { i64, i8* } }, { i64, { i64, i8* } }* %acs
    %act = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } zeroinitializer, { i64, { i64, i8* } } %rv, 0
    %acu = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %act, { i64, { i64, i8* } }* %acr, 1
    %a1o = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %acu, 0
    %a2m = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %acu, 1
    %acv = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %a2m, i64 %absa
    %rw = load { i64, { i64, i8* } }, { i64, { i64, i8* } }* %acv
    %acw = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } zeroinitializer, { i64, { i64, i8* } } %rw, 0
    %acx = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %acw, { i64, { i64, i8* } }* %a2m, 1
    %a1al = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %acx, 0
    %a2ak = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %acx, 1
    %acy = call i1 @Sorting_Strings_strcmp_impl ({ i64, { i64, i8* } } %a1o, { i64, { i64, i8* } } %a1al)
    %pv = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %a2ak, i64 %abt
    store { i64, { i64, i8* } } %a1o, { i64, { i64, i8* } }* %pv
    %pw = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %a2ak, i64 %absa
    store { i64, { i64, i8* } } %a1al, { i64, { i64, i8* } }* %pw
    br i1 %acy, label %thenn, label %elsen

  thenn:
    %x15 = call { i64, { i64, i8* } }* @Proto_IICF_EOArray_swap_eo_impl1 ({ i64, { i64, i8* } }* %acr, i64 %absa, i64 %abt)
    br label %ctd_ifn

  elsen:
    br label %ctd_ifn

  ctd_ifn:
    %adc = phi { i64, { i64, i8* } }* [ %acr, %elsen ], [ %x15, %thenn ]
    %x16 = add i64 %a1b, %xka
    %x17 = call { i64, { i64, i8* } }* @Proto_IICF_EOArray_swap_eo_impl1 ({ i64, { i64, i8* } }* %adc, i64 %a1b, i64 %x16)
    br label %ctd_ifb

  elseb:
    %xm1 = add i64 %a1b, %xka
    %bic = sub i64 %a1c, 1
    %xna1 = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %a1a, i64 %a1b
    %r1 = load { i64, { i64, i8* } }, { i64, { i64, i8* } }* %xna1
    %xo1 = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } zeroinitializer, { i64, { i64, i8* } } %r1, 0
    %xp1 = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xo1, { i64, { i64, i8* } }* %a1a, 1
    %a1d1 = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xp1, 0
    %a21 = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xp1, 1
    %xq1 = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %a21, i64 %xm1
    %ra1 = load { i64, { i64, i8* } }, { i64, { i64, i8* } }* %xq1
    %xr1 = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } zeroinitializer, { i64, { i64, i8* } } %ra1, 0
    %xs1 = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xr1, { i64, { i64, i8* } }* %a21, 1
    %a1aa1 = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xs1, 0
    %a2a1 = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xs1, 1
    %xt1 = call i1 @Sorting_Strings_strcmp_impl ({ i64, { i64, i8* } } %a1d1, { i64, { i64, i8* } } %a1aa1)
    %p1 = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %a2a1, i64 %a1b
    store { i64, { i64, i8* } } %a1d1, { i64, { i64, i8* } }* %p1
    %pa1 = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %a2a1, i64 %xm1
    store { i64, { i64, i8* } } %a1aa1, { i64, { i64, i8* } }* %pa1
    br i1 %xt1, label %theno, label %elseo

  theno:
    %x18 = call { i64, { i64, i8* } }* @Proto_IICF_EOArray_swap_eo_impl1 ({ i64, { i64, i8* } }* %a1a, i64 %xm1, i64 %a1b)
    br label %ctd_ifo

  elseo:
    br label %ctd_ifo

  ctd_ifo:
    %xx = phi { i64, { i64, i8* } }* [ %a1a, %elseo ], [ %x18, %theno ]
    %xy1 = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %xx, i64 %bic
    %rb1 = load { i64, { i64, i8* } }, { i64, { i64, i8* } }* %xy1
    %xz1 = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } zeroinitializer, { i64, { i64, i8* } } %rb1, 0
    %ya1 = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xz1, { i64, { i64, i8* } }* %xx, 1
    %a1e1 = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %ya1, 0
    %a2b1 = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %ya1, 1
    %yb1 = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %a2b1, i64 %a1b
    %rc1 = load { i64, { i64, i8* } }, { i64, { i64, i8* } }* %yb1
    %yc1 = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } zeroinitializer, { i64, { i64, i8* } } %rc1, 0
    %yd1 = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %yc1, { i64, { i64, i8* } }* %a2b1, 1
    %a1ab1 = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %yd1, 0
    %a2aa1 = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %yd1, 1
    %ye1 = call i1 @Sorting_Strings_strcmp_impl ({ i64, { i64, i8* } } %a1e1, { i64, { i64, i8* } } %a1ab1)
    %pb1 = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %a2aa1, i64 %bic
    store { i64, { i64, i8* } } %a1e1, { i64, { i64, i8* } }* %pb1
    %pc1 = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %a2aa1, i64 %a1b
    store { i64, { i64, i8* } } %a1ab1, { i64, { i64, i8* } }* %pc1
    br i1 %ye1, label %thenp, label %elsep

  thenp:
    %x19 = call { i64, { i64, i8* } }* @Proto_IICF_EOArray_swap_eo_impl1 ({ i64, { i64, i8* } }* %xx, i64 %a1b, i64 %bic)
    br label %ctd_ifp

  elsep:
    br label %ctd_ifp

  ctd_ifp:
    %yi = phi { i64, { i64, i8* } }* [ %xx, %elsep ], [ %x19, %thenp ]
    %yj1 = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %yi, i64 %a1b
    %rd1 = load { i64, { i64, i8* } }, { i64, { i64, i8* } }* %yj1
    %yk1 = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } zeroinitializer, { i64, { i64, i8* } } %rd1, 0
    %yl1 = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %yk1, { i64, { i64, i8* } }* %yi, 1
    %a1f1 = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %yl1, 0
    %a2d1 = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %yl1, 1
    %ym1 = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %a2d1, i64 %xm1
    %re1 = load { i64, { i64, i8* } }, { i64, { i64, i8* } }* %ym1
    %yn1 = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } zeroinitializer, { i64, { i64, i8* } } %re1, 0
    %yo1 = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %yn1, { i64, { i64, i8* } }* %a2d1, 1
    %a1ac1 = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %yo1, 0
    %a2ab1 = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %yo1, 1
    %yp1 = call i1 @Sorting_Strings_strcmp_impl ({ i64, { i64, i8* } } %a1f1, { i64, { i64, i8* } } %a1ac1)
    %pd1 = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %a2ab1, i64 %a1b
    store { i64, { i64, i8* } } %a1f1, { i64, { i64, i8* } }* %pd1
    %pe1 = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %a2ab1, i64 %xm1
    store { i64, { i64, i8* } } %a1ac1, { i64, { i64, i8* } }* %pe1
    br i1 %yp1, label %thenq, label %elseq

  thenq:
    %x20 = call { i64, { i64, i8* } }* @Proto_IICF_EOArray_swap_eo_impl1 ({ i64, { i64, i8* } }* %yi, i64 %xm1, i64 %a1b)
    br label %ctd_ifq

  elseq:
    br label %ctd_ifq

  ctd_ifq:
    %x21 = phi { i64, { i64, i8* } }* [ %yi, %elseq ], [ %x20, %thenq ]
    br label %ctd_ifb

  ctd_ifb:
    %xm2 = phi { i64, { i64, i8* } }* [ %x21, %ctd_ifq ], [ %x17, %ctd_ifn ]
    br i1 %a1, label %thenr, label %elser

  thenr:
    br label %ctd_ifr

  elser:
    %xna2 = sub i64 %a1b, 1
    %xo2 = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %xm2, i64 %xna2
    %r2 = load { i64, { i64, i8* } }, { i64, { i64, i8* } }* %xo2
    %xp2 = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } zeroinitializer, { i64, { i64, i8* } } %r2, 0
    %xq2 = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xp2, { i64, { i64, i8* } }* %xm2, 1
    %a1d2 = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xq2, 0
    %a22 = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xq2, 1
    %xr2 = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %a22, i64 %a1b
    %ra2 = load { i64, { i64, i8* } }, { i64, { i64, i8* } }* %xr2
    %xs2 = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } zeroinitializer, { i64, { i64, i8* } } %ra2, 0
    %xt2 = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xs2, { i64, { i64, i8* } }* %a22, 1
    %a1aa2 = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xt2, 0
    %a2a2 = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xt2, 1
    %xu1 = call i1 @Sorting_Strings_strcmp_impl ({ i64, { i64, i8* } } %a1d2, { i64, { i64, i8* } } %a1aa2)
    %p2 = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %a2a2, i64 %xna2
    store { i64, { i64, i8* } } %a1d2, { i64, { i64, i8* } }* %p2
    %pa2 = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %a2a2, i64 %a1b
    store { i64, { i64, i8* } } %a1aa2, { i64, { i64, i8* } }* %pa2
    %x22 = add i1 %xu1, 1
    br label %ctd_ifr

  ctd_ifr:
    %xn = phi i1 [ %x22, %elser ], [ 0, %thenr ]
    br i1 %xn, label %thens, label %elses

  thens:
    %xo3 = call { i1, { i64, { i64, { i64, i8* } }* } } @Sorting_Export_Code_str_sort_partition_left_impl ({ i64, { i64, i8* } }* %xm2, i64 %a1b, i64 %a1c)
    %a1d3 = extractvalue { i1, { i64, { i64, { i64, i8* } }* } } %xo3, 0
    %xp3 = extractvalue { i1, { i64, { i64, { i64, i8* } }* } } %xo3, 1
    %a1e2 = extractvalue { i64, { i64, { i64, i8* } }* } %xp3, 0
    %a2e1 = extractvalue { i64, { i64, { i64, i8* } }* } %xp3, 1
    %xqa = add i64 %a1e2, 1
    %xr3 = insertvalue { i64, i64 } zeroinitializer, i64 %a1c, 0
    %tmpad = insertvalue { i64, i64 } %xr3, i64 %a2c, 1
    %xs3 = insertvalue { i64, { i64, i64 } } zeroinitializer, i64 %xqa, 0
    %tmpae = insertvalue { i64, { i64, i64 } } %xs3, { i64, i64 } %tmpad, 1
    %xt3 = insertvalue { { i64, { i64, i8* } }*, { i64, { i64, i64 } } } zeroinitializer, { i64, { i64, i8* } }* %a2e1, 0
    %tmpaf = insertvalue { { i64, { i64, i8* } }*, { i64, { i64, i64 } } } %xt3, { i64, { i64, i64 } } %tmpae, 1
    %xu2 = insertvalue { i1, { { i64, { i64, i8* } }*, { i64, { i64, i64 } } } } zeroinitializer, i1 0, 0
    %x23 = insertvalue { i1, { { i64, { i64, i8* } }*, { i64, { i64, i64 } } } } %xu2, { { i64, { i64, i8* } }*, { i64, { i64, i64 } } } %tmpaf, 1
    %x24 = call { i64, { i64, i8* } }* @Sorting_Export_Code_str_sort_pdqsort_impl_f_07258824 ({ i1, { { i64, { i64, i8* } }*, { i64, { i64, i64 } } } } %x23)
    br label %ctd_ifs

  elses:
    %xoa = add i64 %a1b, 1
    br label %while_start

  while_start:
    %s = phi i64 [ %x25, %while_body ], [ %xoa, %elses ]
    %xp4 = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %xm2, i64 %s
    %r3 = load { i64, { i64, i8* } }, { i64, { i64, i8* } }* %xp4
    %xq3 = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } zeroinitializer, { i64, { i64, i8* } } %r3, 0
    %xr4 = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xq3, { i64, { i64, i8* } }* %xm2, 1
    %a1d4 = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xr4, 0
    %a23 = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xr4, 1
    %xs4 = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %a23, i64 %a1b
    %ra3 = load { i64, { i64, i8* } }, { i64, { i64, i8* } }* %xs4
    %xt4 = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } zeroinitializer, { i64, { i64, i8* } } %ra3, 0
    %xu3 = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xt4, { i64, { i64, i8* } }* %a23, 1
    %a1aa3 = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xu3, 0
    %a2a3 = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xu3, 1
    %xv = call i1 @Sorting_Strings_strcmp_impl ({ i64, { i64, i8* } } %a1d4, { i64, { i64, i8* } } %a1aa3)
    %p3 = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %a2a3, i64 %s
    store { i64, { i64, i8* } } %a1d4, { i64, { i64, i8* } }* %p3
    %pa3 = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %a2a3, i64 %a1b
    store { i64, { i64, i8* } } %a1aa3, { i64, { i64, i8* } }* %pa3
    br i1 %xv, label %while_body, label %while_end

  while_body:
    %x25 = add i64 %s, 1
    br label %while_start

  while_end:
    %xqa1 = add i64 %a1b, 1
    %xr5 = icmp eq i64 %s, %xqa1
    br i1 %xr5, label %thent, label %elset

  thent:
    %x26 = sub i64 %a1c, 1
    br label %while_starta

  while_starta:
    %s1 = phi i64 [ %x29, %while_bodya ], [ %x26, %thent ]
    %xsa = add i64 %a1b, 1
    %xta = icmp slt i64 %xsa, %s1
    br i1 %xta, label %thenu, label %elseu

  thenu:
    %xu4 = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %xm2, i64 %s1
    %r4 = load { i64, { i64, i8* } }, { i64, { i64, i8* } }* %xu4
    %xv1 = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } zeroinitializer, { i64, { i64, i8* } } %r4, 0
    %xw = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xv1, { i64, { i64, i8* } }* %xm2, 1
    %a1d5 = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xw, 0
    %a24 = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xw, 1
    %xx1 = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %a24, i64 %a1b
    %ra4 = load { i64, { i64, i8* } }, { i64, { i64, i8* } }* %xx1
    %xy2 = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } zeroinitializer, { i64, { i64, i8* } } %ra4, 0
    %xz2 = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xy2, { i64, { i64, i8* } }* %a24, 1
    %a1aa4 = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xz2, 0
    %a2a4 = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xz2, 1
    %ya2 = call i1 @Sorting_Strings_strcmp_impl ({ i64, { i64, i8* } } %a1d5, { i64, { i64, i8* } } %a1aa4)
    %p4 = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %a2a4, i64 %s1
    store { i64, { i64, i8* } } %a1d5, { i64, { i64, i8* } }* %p4
    %pa4 = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %a2a4, i64 %a1b
    store { i64, { i64, i8* } } %a1aa4, { i64, { i64, i8* } }* %pa4
    %x27 = add i1 %ya2, 1
    br label %ctd_ifu

  elseu:
    br label %ctd_ifu

  ctd_ifu:
    %x28 = phi i1 [ 0, %elseu ], [ %x27, %thenu ]
    br i1 %x28, label %while_bodya, label %while_enda

  while_bodya:
    %x29 = sub i64 %s1, 1
    br label %while_starta

  while_enda:
    br label %ctd_ift

  elset:
    %x31 = sub i64 %a1c, 1
    br label %while_startb

  while_startb:
    %s2 = phi i64 [ %x33, %while_bodyb ], [ %x31, %elset ]
    %xsa1 = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %xm2, i64 %s2
    %r5 = load { i64, { i64, i8* } }, { i64, { i64, i8* } }* %xsa1
    %xt5 = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } zeroinitializer, { i64, { i64, i8* } } %r5, 0
    %xu5 = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xt5, { i64, { i64, i8* } }* %xm2, 1
    %a1d6 = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xu5, 0
    %a25 = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xu5, 1
    %xv2 = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %a25, i64 %a1b
    %ra5 = load { i64, { i64, i8* } }, { i64, { i64, i8* } }* %xv2
    %xw1 = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } zeroinitializer, { i64, { i64, i8* } } %ra5, 0
    %xx2 = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xw1, { i64, { i64, i8* } }* %a25, 1
    %a1aa5 = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xx2, 0
    %a2a5 = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xx2, 1
    %xy3 = call i1 @Sorting_Strings_strcmp_impl ({ i64, { i64, i8* } } %a1d6, { i64, { i64, i8* } } %a1aa5)
    %p5 = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %a2a5, i64 %s2
    store { i64, { i64, i8* } } %a1d6, { i64, { i64, i8* } }* %p5
    %pa5 = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %a2a5, i64 %a1b
    store { i64, { i64, i8* } } %a1aa5, { i64, { i64, i8* } }* %pa5
    %x32 = add i1 %xy3, 1
    br i1 %x32, label %while_bodyb, label %while_endb

  while_bodyb:
    %x33 = sub i64 %s2, 1
    br label %while_startb

  while_endb:
    br label %ctd_ift

  ctd_ift:
    %xs5 = phi i64 [ %s2, %while_endb ], [ %s1, %while_enda ]
    %xt6 = icmp sle i64 %xs5, %s
    %xu6 = insertvalue { i64, i64 } zeroinitializer, i64 %s, 0
    %tmpd = insertvalue { i64, i64 } %xu6, i64 %xs5, 1
    %xv3 = insertvalue { { i64, { i64, i8* } }*, { i64, i64 } } zeroinitializer, { i64, { i64, i8* } }* %xm2, 0
    %xw2 = insertvalue { { i64, { i64, i8* } }*, { i64, i64 } } %xv3, { i64, i64 } %tmpd, 1
    br label %while_startc

  while_startc:
    %xua = phi { { i64, { i64, i8* } }*, { i64, i64 } } [ %x41, %while_ende ], [ %xw2, %ctd_ift ]
    %a1d7 = extractvalue { { i64, { i64, i8* } }*, { i64, i64 } } %xua, 0
    %xva = extractvalue { { i64, { i64, i8* } }*, { i64, i64 } } %xua, 1
    %a = extractvalue { i64, i64 } %xva, 0
    %x35 = extractvalue { i64, i64 } %xva, 1
    %x36 = icmp slt i64 %a, %x35
    br i1 %x36, label %while_bodyc, label %while_endc

  while_bodyc:
    %a1d8 = extractvalue { { i64, { i64, i8* } }*, { i64, i64 } } %xua, 0
    %xva1 = extractvalue { { i64, { i64, i8* } }*, { i64, i64 } } %xua, 1
    %a1aa6 = extractvalue { i64, i64 } %xva1, 0
    %a2a6 = extractvalue { i64, i64 } %xva1, 1
    %xwa = call { i64, { i64, i8* } }* @Proto_IICF_EOArray_swap_eo_impl1 ({ i64, { i64, i8* } }* %a1d8, i64 %a1aa6, i64 %a2a6)
    %xxa = add i64 %a1aa6, 1
    br label %while_startd

  while_startd:
    %s3 = phi i64 [ %x37, %while_bodyd ], [ %xxa, %while_bodyc ]
    %xy4 = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %xwa, i64 %s3
    %r6 = load { i64, { i64, i8* } }, { i64, { i64, i8* } }* %xy4
    %xz3 = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } zeroinitializer, { i64, { i64, i8* } } %r6, 0
    %ya3 = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xz3, { i64, { i64, i8* } }* %xwa, 1
    %a1e3 = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %ya3, 0
    %a26 = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %ya3, 1
    %yb2 = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %a26, i64 %a1b
    %ra6 = load { i64, { i64, i8* } }, { i64, { i64, i8* } }* %yb2
    %yc2 = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } zeroinitializer, { i64, { i64, i8* } } %ra6, 0
    %yd2 = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %yc2, { i64, { i64, i8* } }* %a26, 1
    %a1ab2 = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %yd2, 0
    %a2aa2 = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %yd2, 1
    %ye2 = call i1 @Sorting_Strings_strcmp_impl ({ i64, { i64, i8* } } %a1e3, { i64, { i64, i8* } } %a1ab2)
    %p6 = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %a2aa2, i64 %s3
    store { i64, { i64, i8* } } %a1e3, { i64, { i64, i8* } }* %p6
    %pa6 = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %a2aa2, i64 %a1b
    store { i64, { i64, i8* } } %a1ab2, { i64, { i64, i8* } }* %pa6
    br i1 %ye2, label %while_bodyd, label %while_endd

  while_bodyd:
    %x37 = add i64 %s3, 1
    br label %while_startd

  while_endd:
    %xza = sub i64 %a2a6, 1
    br label %while_starte

  while_starte:
    %s4 = phi i64 [ %x39, %while_bodye ], [ %xza, %while_endd ]
    %ya4 = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %xwa, i64 %s4
    %r7 = load { i64, { i64, i8* } }, { i64, { i64, i8* } }* %ya4
    %yb3 = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } zeroinitializer, { i64, { i64, i8* } } %r7, 0
    %yc3 = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %yb3, { i64, { i64, i8* } }* %xwa, 1
    %a1e4 = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %yc3, 0
    %a27 = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %yc3, 1
    %yd3 = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %a27, i64 %a1b
    %ra7 = load { i64, { i64, i8* } }, { i64, { i64, i8* } }* %yd3
    %ye3 = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } zeroinitializer, { i64, { i64, i8* } } %ra7, 0
    %yf1 = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %ye3, { i64, { i64, i8* } }* %a27, 1
    %a1ab3 = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %yf1, 0
    %a2aa3 = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %yf1, 1
    %yg = call i1 @Sorting_Strings_strcmp_impl ({ i64, { i64, i8* } } %a1e4, { i64, { i64, i8* } } %a1ab3)
    %p7 = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %a2aa3, i64 %s4
    store { i64, { i64, i8* } } %a1e4, { i64, { i64, i8* } }* %p7
    %pa7 = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %a2aa3, i64 %a1b
    store { i64, { i64, i8* } } %a1ab3, { i64, { i64, i8* } }* %pa7
    %x38 = add i1 %yg, 1
    br i1 %x38, label %while_bodye, label %while_ende

  while_bodye:
    %x39 = sub i64 %s4, 1
    br label %while_starte

  while_ende:
    %yb4 = insertvalue { { i64, { i64, i8* } }*, { i64, i64 } } zeroinitializer, { i64, { i64, i8* } }* %xwa, 0
    %yc4 = insertvalue { i64, i64 } zeroinitializer, i64 %s3, 0
    %x40 = insertvalue { i64, i64 } %yc4, i64 %s4, 1
    %x41 = insertvalue { { i64, { i64, i8* } }*, { i64, i64 } } %yb4, { i64, i64 } %x40, 1
    br label %while_startc

  while_endc:
    %a1d9 = extractvalue { { i64, { i64, i8* } }*, { i64, i64 } } %xua, 0
    %xva2 = extractvalue { { i64, { i64, i8* } }*, { i64, i64 } } %xua, 1
    %a1aa7 = extractvalue { i64, i64 } %xva2, 0
    %a2a7 = extractvalue { i64, i64 } %xva2, 1
    %xwa1 = sub i64 %a1aa7, 1
    %xxa1 = icmp ne i64 %a1b, %xwa1
    br i1 %xxa1, label %thenv, label %elsev

  thenv:
    %x42 = sub i64 %a1aa7, 1
    %x43 = call { i64, { i64, i8* } }* @Proto_IICF_EOArray_swap_eo_impl1 ({ i64, { i64, i8* } }* %a1d9, i64 %a1b, i64 %x42)
    br label %ctd_ifv

  elsev:
    br label %ctd_ifv

  ctd_ifv:
    %xy6 = phi { i64, { i64, i8* } }* [ %a1d9, %elsev ], [ %x43, %thenv ]
    %xza1 = sub i64 %a1aa7, 1
    %ya6 = insertvalue { i1, { i64, { i64, { i64, i8* } }* } } zeroinitializer, i1 %xt6, 0
    %yb5 = insertvalue { i64, { i64, { i64, i8* } }* } zeroinitializer, i64 %xza1, 0
    %yc5 = insertvalue { i64, { i64, { i64, i8* } }* } %yb5, { i64, { i64, i8* } }* %xy6, 1
    %yba = insertvalue { i1, { i64, { i64, { i64, i8* } }* } } %ya6, { i64, { i64, { i64, i8* } }* } %yc5, 1
    %a1da = extractvalue { i1, { i64, { i64, { i64, i8* } }* } } %yba, 0
    %yca = extractvalue { i1, { i64, { i64, { i64, i8* } }* } } %yba, 1
    %a1e5 = extractvalue { i64, { i64, { i64, i8* } }* } %yca, 0
    %a2e2 = extractvalue { i64, { i64, { i64, i8* } }* } %yca, 1
    %yd4 = sub i64 %a1c, %a1b
    %ye4 = sub i64 %a1e5, %a1b
    %yfa = add i64 %a1e5, 1
    %yg1 = sub i64 %a1c, %yfa
    %yha = udiv i64 %yd4, 8
    %yi1 = icmp slt i64 %ye4, %yha
    %yj2 = icmp slt i64 %yg1, %yha
    %yk2 = or i1 %yi1, %yj2
    br i1 %yk2, label %thenw, label %elsew

  thenw:
    %yl2 = icmp sle i64 16, %ye4
    br i1 %yl2, label %thenx, label %elsex

  thenx:
    %yma = udiv i64 %ye4, 4
    %yn2 = add i64 %a1b, %yma
    %yoa = sub i64 %a1e5, 1
    %yp2 = sub i64 %a1e5, %yma
    %yq1 = call { i64, { i64, i8* } }* @Proto_IICF_EOArray_swap_eo_impl1 ({ i64, { i64, i8* } }* %a2e2, i64 %a1b, i64 %yn2)
    %yr = call { i64, { i64, i8* } }* @Proto_IICF_EOArray_swap_eo_impl1 ({ i64, { i64, i8* } }* %yq1, i64 %yoa, i64 %yp2)
    %ys = icmp slt i64 128, %ye4
    br i1 %ys, label %theny, label %elsey

  theny:
    %yta = add i64 %a1b, 1
    %yua = add i64 %a1b, 2
    %yva1 = sub i64 %a1e5, 2
    %ywa = sub i64 %a1e5, 3
    %yxa1 = add i64 %yn2, 1
    %yya1 = add i64 %yn2, 2
    %yza = sub i64 %yp2, 1
    %zaa = sub i64 %yp2, 2
    %zb1 = call { i64, { i64, i8* } }* @Proto_IICF_EOArray_swap_eo_impl1 ({ i64, { i64, i8* } }* %yr, i64 %yta, i64 %yxa1)
    %zc1 = call { i64, { i64, i8* } }* @Proto_IICF_EOArray_swap_eo_impl1 ({ i64, { i64, i8* } }* %zb1, i64 %yua, i64 %yya1)
    %zd1 = call { i64, { i64, i8* } }* @Proto_IICF_EOArray_swap_eo_impl1 ({ i64, { i64, i8* } }* %zc1, i64 %yva1, i64 %yza)
    %x44 = call { i64, { i64, i8* } }* @Proto_IICF_EOArray_swap_eo_impl1 ({ i64, { i64, i8* } }* %zd1, i64 %ywa, i64 %zaa)
    br label %ctd_ify

  elsey:
    br label %ctd_ify

  ctd_ify:
    %x45 = phi { i64, { i64, i8* } }* [ %yr, %elsey ], [ %x44, %theny ]
    br label %ctd_ifx

  elsex:
    br label %ctd_ifx

  ctd_ifx:
    %ym2 = phi { i64, { i64, i8* } }* [ %a2e2, %elsex ], [ %x45, %ctd_ify ]
    %yn3 = icmp sle i64 16, %yg1
    br i1 %yn3, label %thenz, label %elsez

  thenz:
    %yoa1 = add i64 %a1e5, 1
    %ypa = sub i64 %a1c, 1
    %yqa = udiv i64 %yg1, 4
    %yr1 = add i64 %yoa1, %yqa
    %ys1 = sub i64 %a1c, %yqa
    %yt = call { i64, { i64, i8* } }* @Proto_IICF_EOArray_swap_eo_impl1 ({ i64, { i64, i8* } }* %ym2, i64 %yoa1, i64 %yr1)
    %yu1 = call { i64, { i64, i8* } }* @Proto_IICF_EOArray_swap_eo_impl1 ({ i64, { i64, i8* } }* %yt, i64 %ypa, i64 %ys1)
    %yv = icmp slt i64 128, %yg1
    br i1 %yv, label %theoa, label %elsfa

  theoa:
    %ywa1 = add i64 %a1e5, 2
    %yxa2 = add i64 %a1e5, 3
    %yya2 = sub i64 %a1c, 2
    %yza1 = sub i64 %a1c, 3
    %zaa1 = sub i64 %ys1, 1
    %zba = sub i64 %ys1, 2
    %zca = add i64 %yr1, 1
    %zda = add i64 %yr1, 2
    %ze1 = call { i64, { i64, i8* } }* @Proto_IICF_EOArray_swap_eo_impl1 ({ i64, { i64, i8* } }* %yu1, i64 %ywa1, i64 %zca)
    %zf1 = call { i64, { i64, i8* } }* @Proto_IICF_EOArray_swap_eo_impl1 ({ i64, { i64, i8* } }* %ze1, i64 %yxa2, i64 %zda)
    %zg = call { i64, { i64, i8* } }* @Proto_IICF_EOArray_swap_eo_impl1 ({ i64, { i64, i8* } }* %zf1, i64 %yya2, i64 %zaa1)
    %x46 = call { i64, { i64, i8* } }* @Proto_IICF_EOArray_swap_eo_impl1 ({ i64, { i64, i8* } }* %zg, i64 %yza1, i64 %zba)
    br label %ctd_iga

  elsfa:
    br label %ctd_iga

  ctd_iga:
    %x47 = phi { i64, { i64, i8* } }* [ %yu1, %elsfa ], [ %x46, %theoa ]
    br label %ctd_ifz

  elsez:
    br label %ctd_ifz

  ctd_ifz:
    %yo2 = phi { i64, { i64, i8* } }* [ %ym2, %elsez ], [ %x47, %ctd_iga ]
    %ypa1 = insertvalue { i1, { i64, { i64, i8* } }* } zeroinitializer, i1 1, 0
    %x48 = insertvalue { i1, { i64, { i64, i8* } }* } %ypa1, { i64, { i64, i8* } }* %yo2, 1
    br label %ctd_ifw

  elsew:
    %yla = insertvalue { i1, { i64, { i64, i8* } }* } zeroinitializer, i1 0, 0
    %x49 = insertvalue { i1, { i64, { i64, i8* } }* } %yla, { i64, { i64, i8* } }* %a2e2, 1
    br label %ctd_ifw

  ctd_ifw:
    %yl3 = phi { i1, { i64, { i64, i8* } }* } [ %x49, %elsew ], [ %x48, %ctd_ifz ]
    %a1f2 = extractvalue { i1, { i64, { i64, i8* } }* } %yl3, 0
    %a2f1 = extractvalue { i1, { i64, { i64, i8* } }* } %yl3, 1
    br i1 %a1f2, label %theob, label %elsfb

  theob:
    %x50 = sub i64 %a2c, 1
    br label %ctd_igb

  elsfb:
    br label %ctd_igb

  ctd_igb:
    %ym3 = phi i64 [ %a2c, %elsfb ], [ %x50, %theob ]
    %yna = icmp eq i64 %ym3, 0
    br i1 %yna, label %theoc, label %elsfc

  theoc:
    %yo3 = call { i64, { i64, i8* } }* @Sorting_Export_Code_str_sort_heapsort_impl ({ i64, { i64, i8* } }* %a2f1, i64 %a1b, i64 %a1c)
    %ypa2 = insertvalue { i1, { i64, { i64, i8* } }* } zeroinitializer, i1 1, 0
    %x51 = insertvalue { i1, { i64, { i64, i8* } }* } %ypa2, { i64, { i64, i8* } }* %yo3, 1
    br label %ctd_igc

  elsfc:
    %yoa2 = add i1 %a1f2, 1
    %yp3 = and i1 %a1da, %yoa2
    br i1 %yp3, label %theod, label %elsfd

  theod:
    %yq2 = call { i1, { i64, { i64, i8* } }* } @Sorting_Export_Code_str_sort_maybe_insort_impl ({ i64, { i64, i8* } }* %a2f1, i64 %a1b, i64 %a1e5)
    %a1g1 = extractvalue { i1, { i64, { i64, i8* } }* } %yq2, 0
    %a2g1 = extractvalue { i1, { i64, { i64, i8* } }* } %yq2, 1
    br i1 %a1g1, label %theoe, label %elsfe

  theoe:
    %yra = add i64 %a1e5, 1
    %x52 = call { i1, { i64, { i64, i8* } }* } @Sorting_Export_Code_str_sort_maybe_insort_impl ({ i64, { i64, i8* } }* %a2g1, i64 %yra, i64 %a1c)
    br label %ctd_ige

  elsfe:
    %yra1 = insertvalue { i1, { i64, { i64, i8* } }* } zeroinitializer, i1 0, 0
    %x53 = insertvalue { i1, { i64, { i64, i8* } }* } %yra1, { i64, { i64, i8* } }* %a2g1, 1
    br label %ctd_ige

  ctd_ige:
    %x54 = phi { i1, { i64, { i64, i8* } }* } [ %x53, %elsfe ], [ %x52, %theoe ]
    br label %ctd_igd

  elsfd:
    %yqa1 = insertvalue { i1, { i64, { i64, i8* } }* } zeroinitializer, i1 0, 0
    %x55 = insertvalue { i1, { i64, { i64, i8* } }* } %yqa1, { i64, { i64, i8* } }* %a2f1, 1
    br label %ctd_igd

  ctd_igd:
    %x56 = phi { i1, { i64, { i64, i8* } }* } [ %x55, %elsfd ], [ %x54, %ctd_ige ]
    br label %ctd_igc

  ctd_igc:
    %yo4 = phi { i1, { i64, { i64, i8* } }* } [ %x56, %ctd_igd ], [ %x51, %theoc ]
    %a1g2 = extractvalue { i1, { i64, { i64, i8* } }* } %yo4, 0
    %a2g2 = extractvalue { i1, { i64, { i64, i8* } }* } %yo4, 1
    br i1 %a1g2, label %theof, label %elsff

  theof:
    br label %ctd_igf

  elsff:
    %yp4 = insertvalue { i64, i64 } zeroinitializer, i64 %a1e5, 0
    %tmpf = insertvalue { i64, i64 } %yp4, i64 %ym3, 1
    %yq3 = insertvalue { i64, { i64, i64 } } zeroinitializer, i64 %a1b, 0
    %tmpg = insertvalue { i64, { i64, i64 } } %yq3, { i64, i64 } %tmpf, 1
    %yr2 = insertvalue { { i64, { i64, i8* } }*, { i64, { i64, i64 } } } zeroinitializer, { i64, { i64, i8* } }* %a2g2, 0
    %tmph = insertvalue { { i64, { i64, i8* } }*, { i64, { i64, i64 } } } %yr2, { i64, { i64, i64 } } %tmpg, 1
    %ys2 = insertvalue { i1, { { i64, { i64, i8* } }*, { i64, { i64, i64 } } } } zeroinitializer, i1 %a1, 0
    %yt1 = insertvalue { i1, { { i64, { i64, i8* } }*, { i64, { i64, i64 } } } } %ys2, { { i64, { i64, i8* } }*, { i64, { i64, i64 } } } %tmph, 1
    %ypa3 = call { i64, { i64, i8* } }* @Sorting_Export_Code_str_sort_pdqsort_impl_f_07258824 ({ i1, { { i64, { i64, i8* } }*, { i64, { i64, i64 } } } } %yt1)
    %yqa2 = add i64 %a1e5, 1
    %yv1 = insertvalue { i64, i64 } zeroinitializer, i64 %a1c, 0
    %tmpad1 = insertvalue { i64, i64 } %yv1, i64 %ym3, 1
    %yw1 = insertvalue { i64, { i64, i64 } } zeroinitializer, i64 %yqa2, 0
    %tmpae1 = insertvalue { i64, { i64, i64 } } %yw1, { i64, i64 } %tmpad1, 1
    %yx = insertvalue { { i64, { i64, i8* } }*, { i64, { i64, i64 } } } zeroinitializer, { i64, { i64, i8* } }* %ypa3, 0
    %tmpaf1 = insertvalue { { i64, { i64, i8* } }*, { i64, { i64, i64 } } } %yx, { i64, { i64, i64 } } %tmpae1, 1
    %yy = insertvalue { i1, { { i64, { i64, i8* } }*, { i64, { i64, i64 } } } } zeroinitializer, i1 0, 0
    %x57 = insertvalue { i1, { { i64, { i64, i8* } }*, { i64, { i64, i64 } } } } %yy, { { i64, { i64, i8* } }*, { i64, { i64, i64 } } } %tmpaf1, 1
    %x58 = call { i64, { i64, i8* } }* @Sorting_Export_Code_str_sort_pdqsort_impl_f_07258824 ({ i1, { { i64, { i64, i8* } }*, { i64, { i64, i64 } } } } %x57)
    br label %ctd_igf

  ctd_igf:
    %x59 = phi { i64, { i64, i8* } }* [ %x58, %elsff ], [ %a2g2, %theof ]
    br label %ctd_ifs

  ctd_ifs:
    %x60 = phi { i64, { i64, i8* } }* [ %x59, %ctd_igf ], [ %x24, %thens ]
    br label %ctd_if

  ctd_if:
    %x61 = phi { i64, { i64, i8* } }* [ %x60, %ctd_ifs ], [ %x3, %ctd_ifa ]
    ret { i64, { i64, i8* } }* %x61
}

define i64* @Sorting_Export_Code_unat_sort_is_guarded_insert_impl(i64* %x, i64 %x1, i64 %x2) {

  start:
    %x3 = getelementptr i64, i64* %x, i64 %x2
    %r = load i64, i64* %x3
    %xa = insertvalue { i64, i64* } zeroinitializer, i64 %r, 0
    %xb = insertvalue { i64, i64* } %xa, i64* %x, 1
    %a1 = extractvalue { i64, i64* } %xb, 0
    %a2 = extractvalue { i64, i64* } %xb, 1
    %xc = insertvalue { i64*, i64 } zeroinitializer, i64* %a2, 0
    %xd = insertvalue { i64*, i64 } %xc, i64 %x2, 1
    br label %while_start

  while_start:
    %xca = phi { i64*, i64 } [ %x5, %while_body ], [ %xd, %start ]
    %a1a = extractvalue { i64*, i64 } %xca, 0
    %a2a = extractvalue { i64*, i64 } %xca, 1
    %xda = icmp slt i64 %x1, %a2a
    br i1 %xda, label %then, label %else

  then:
    %bib = sub i64 %a2a, 1
    %xea = getelementptr i64, i64* %a1a, i64 %bib
    %ra = load i64, i64* %xea
    %xf = insertvalue { i64, i64* } zeroinitializer, i64 %ra, 0
    %xg = insertvalue { i64, i64* } %xf, i64* %a1a, 1
    %a1b = extractvalue { i64, i64* } %xg, 0
    %a2b = extractvalue { i64, i64* } %xg, 1
    %xh = icmp ult i64 %a1, %a1b
    %p = getelementptr i64, i64* %a2b, i64 %bib
    store i64 %a1b, i64* %p
    br label %ctd_if

  else:
    br label %ctd_if

  ctd_if:
    %x4 = phi i1 [ 0, %else ], [ %xh, %then ]
    br i1 %x4, label %while_body, label %while_end

  while_body:
    %a1a1 = extractvalue { i64*, i64 } %xca, 0
    %a2a1 = extractvalue { i64*, i64 } %xca, 1
    %xda1 = sub i64 %a2a1, 1
    %xea1 = getelementptr i64, i64* %a1a1, i64 %xda1
    %ra1 = load i64, i64* %xea1
    %xf1 = insertvalue { i64, i64* } zeroinitializer, i64 %ra1, 0
    %xg1 = insertvalue { i64, i64* } %xf1, i64* %a1a1, 1
    %a1b1 = extractvalue { i64, i64* } %xg1, 0
    %a2b1 = extractvalue { i64, i64* } %xg1, 1
    %p1 = getelementptr i64, i64* %a2b1, i64 %a2a1
    store i64 %a1b1, i64* %p1
    %xia = sub i64 %a2a1, 1
    %xj = insertvalue { i64*, i64 } zeroinitializer, i64* %a2b1, 0
    %x5 = insertvalue { i64*, i64 } %xj, i64 %xia, 1
    br label %while_start

  while_end:
    %a1a2 = extractvalue { i64*, i64 } %xca, 0
    %a2a2 = extractvalue { i64*, i64 } %xca, 1
    %p2 = getelementptr i64, i64* %a1a2, i64 %a2a2
    store i64 %a1, i64* %p2
    ret i64* %a1a2
}

define { i64, { i64, i8* } }* @Sorting_Export_Code_str_sort_is_unguarded_insert_impl({ i64, { i64, i8* } }* %x, i64 %x1, i64 %x2) {

  start:
    %x3 = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %x, i64 %x2
    %r = load { i64, { i64, i8* } }, { i64, { i64, i8* } }* %x3
    %xa = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } zeroinitializer, { i64, { i64, i8* } } %r, 0
    %xb = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xa, { i64, { i64, i8* } }* %x, 1
    %a1 = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xb, 0
    %a2 = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xb, 1
    %xc = insertvalue { { i64, { i64, i8* } }*, i64 } zeroinitializer, { i64, { i64, i8* } }* %a2, 0
    %xd = insertvalue { { i64, { i64, i8* } }*, i64 } %xc, i64 %x2, 1
    br label %while_start

  while_start:
    %xca = phi { { i64, { i64, i8* } }*, i64 } [ %x4, %while_body ], [ %xd, %start ]
    %a1a = extractvalue { { i64, { i64, i8* } }*, i64 } %xca, 0
    %a2a = extractvalue { { i64, { i64, i8* } }*, i64 } %xca, 1
    %bib = sub i64 %a2a, 1
    %xda = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %a1a, i64 %bib
    %ra = load { i64, { i64, i8* } }, { i64, { i64, i8* } }* %xda
    %xea = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } zeroinitializer, { i64, { i64, i8* } } %ra, 0
    %xf = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xea, { i64, { i64, i8* } }* %a1a, 1
    %a1b = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xf, 0
    %a2b = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xf, 1
    %xg = call i1 @Sorting_Strings_strcmp_impl ({ i64, { i64, i8* } } %a1, { i64, { i64, i8* } } %a1b)
    %p = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %a2b, i64 %bib
    store { i64, { i64, i8* } } %a1b, { i64, { i64, i8* } }* %p
    br i1 %xg, label %while_body, label %while_end

  while_body:
    %a1a1 = extractvalue { { i64, { i64, i8* } }*, i64 } %xca, 0
    %a2a1 = extractvalue { { i64, { i64, i8* } }*, i64 } %xca, 1
    %xda1 = sub i64 %a2a1, 1
    %xea1 = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %a1a1, i64 %xda1
    %ra1 = load { i64, { i64, i8* } }, { i64, { i64, i8* } }* %xea1
    %xf1 = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } zeroinitializer, { i64, { i64, i8* } } %ra1, 0
    %xg1 = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xf1, { i64, { i64, i8* } }* %a1a1, 1
    %a1b1 = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xg1, 0
    %a2b1 = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xg1, 1
    %p1 = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %a2b1, i64 %a2a1
    store { i64, { i64, i8* } } %a1b1, { i64, { i64, i8* } }* %p1
    %xia = sub i64 %a2a1, 1
    %xj = insertvalue { { i64, { i64, i8* } }*, i64 } zeroinitializer, { i64, { i64, i8* } }* %a2b1, 0
    %x4 = insertvalue { { i64, { i64, i8* } }*, i64 } %xj, i64 %xia, 1
    br label %while_start

  while_end:
    %a1a2 = extractvalue { { i64, { i64, i8* } }*, i64 } %xca, 0
    %a2a2 = extractvalue { { i64, { i64, i8* } }*, i64 } %xca, 1
    %p2 = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %a1a2, i64 %a2a2
    store { i64, { i64, i8* } } %a1, { i64, { i64, i8* } }* %p2
    ret { i64, { i64, i8* } }* %a1a2
}

define i64* @Sorting_Export_Code_unat_sort_pdq_guarded_insort_impl(i64* %x, i64 %x1, i64 %x2) {

  start:
    %x3 = icmp ne i64 %x1, %x2
    br i1 %x3, label %then, label %else

  then:
    %xaa = add i64 %x1, 1
    %xb = insertvalue { i64, i64* } zeroinitializer, i64 %xaa, 0
    %xc = insertvalue { i64, i64* } %xb, i64* %x, 1
    br label %while_start

  while_start:
    %xba = phi { i64, i64* } [ %x7, %ctd_ifb ], [ %xc, %then ]
    %a1 = extractvalue { i64, i64* } %xba, 0
    %a2 = extractvalue { i64, i64* } %xba, 1
    %x4 = icmp slt i64 %a1, %x2
    br i1 %x4, label %while_body, label %while_end

  while_body:
    %a11 = extractvalue { i64, i64* } %xba, 0
    %a21 = extractvalue { i64, i64* } %xba, 1
    %xca = icmp slt i64 %x1, %a11
    br i1 %xca, label %thena, label %elsea

  thena:
    %bib = sub i64 %a11, 1
    %xda = getelementptr i64, i64* %a21, i64 %a11
    %r = load i64, i64* %xda
    %xe = insertvalue { i64, i64* } zeroinitializer, i64 %r, 0
    %xf = insertvalue { i64, i64* } %xe, i64* %a21, 1
    %a1a = extractvalue { i64, i64* } %xf, 0
    %a2a = extractvalue { i64, i64* } %xf, 1
    %xg = getelementptr i64, i64* %a2a, i64 %bib
    %ra = load i64, i64* %xg
    %xh = insertvalue { i64, i64* } zeroinitializer, i64 %ra, 0
    %xi = insertvalue { i64, i64* } %xh, i64* %a2a, 1
    %a1aa = extractvalue { i64, i64* } %xi, 0
    %a2aa = extractvalue { i64, i64* } %xi, 1
    %xj = icmp ult i64 %a1a, %a1aa
    %p = getelementptr i64, i64* %a2aa, i64 %a11
    store i64 %a1a, i64* %p
    %pa = getelementptr i64, i64* %a2aa, i64 %bib
    store i64 %a1aa, i64* %pa
    br label %ctd_ifa

  elsea:
    br label %ctd_ifa

  ctd_ifa:
    %xd = phi i1 [ 0, %elsea ], [ %xj, %thena ]
    br i1 %xd, label %thenb, label %elseb

  thenb:
    %xe1 = getelementptr i64, i64* %a21, i64 %a11
    %r1 = load i64, i64* %xe1
    %xf1 = insertvalue { i64, i64* } zeroinitializer, i64 %r1, 0
    %xg1 = insertvalue { i64, i64* } %xf1, i64* %a21, 1
    %a1a1 = extractvalue { i64, i64* } %xg1, 0
    %a2a1 = extractvalue { i64, i64* } %xg1, 1
    %xha = sub i64 %a11, 1
    %xi1 = getelementptr i64, i64* %a2a1, i64 %xha
    %ra1 = load i64, i64* %xi1
    %xj1 = insertvalue { i64, i64* } zeroinitializer, i64 %ra1, 0
    %xk = insertvalue { i64, i64* } %xj1, i64* %a2a1, 1
    %a1aa1 = extractvalue { i64, i64* } %xk, 0
    %a2aa1 = extractvalue { i64, i64* } %xk, 1
    %p1 = getelementptr i64, i64* %a2aa1, i64 %a11
    store i64 %a1aa1, i64* %p1
    %xma = sub i64 %a11, 1
    %xn = insertvalue { i64*, i64 } zeroinitializer, i64* %a2aa1, 0
    %xo = insertvalue { i64*, i64 } %xn, i64 %xma, 1
    br label %while_starta

  while_starta:
    %xna = phi { i64*, i64 } [ %x6, %while_bodya ], [ %xo, %thenb ]
    %a1b = extractvalue { i64*, i64 } %xna, 0
    %a2b = extractvalue { i64*, i64 } %xna, 1
    %xoa = icmp slt i64 %x1, %a2b
    br i1 %xoa, label %thenc, label %elsec

  thenc:
    %bib1 = sub i64 %a2b, 1
    %xpa = getelementptr i64, i64* %a1b, i64 %bib1
    %rb = load i64, i64* %xpa
    %xq = insertvalue { i64, i64* } zeroinitializer, i64 %rb, 0
    %xr = insertvalue { i64, i64* } %xq, i64* %a1b, 1
    %a1c = extractvalue { i64, i64* } %xr, 0
    %a2c = extractvalue { i64, i64* } %xr, 1
    %xs = icmp ult i64 %a1a1, %a1c
    %pa1 = getelementptr i64, i64* %a2c, i64 %bib1
    store i64 %a1c, i64* %pa1
    br label %ctd_ifc

  elsec:
    br label %ctd_ifc

  ctd_ifc:
    %x5 = phi i1 [ 0, %elsec ], [ %xs, %thenc ]
    br i1 %x5, label %while_bodya, label %while_enda

  while_bodya:
    %a1b1 = extractvalue { i64*, i64 } %xna, 0
    %a2b1 = extractvalue { i64*, i64 } %xna, 1
    %xoa1 = sub i64 %a2b1, 1
    %xpa1 = getelementptr i64, i64* %a1b1, i64 %xoa1
    %rb1 = load i64, i64* %xpa1
    %xq1 = insertvalue { i64, i64* } zeroinitializer, i64 %rb1, 0
    %xr1 = insertvalue { i64, i64* } %xq1, i64* %a1b1, 1
    %a1c1 = extractvalue { i64, i64* } %xr1, 0
    %a2c1 = extractvalue { i64, i64* } %xr1, 1
    %pa2 = getelementptr i64, i64* %a2c1, i64 %a2b1
    store i64 %a1c1, i64* %pa2
    %xta = sub i64 %a2b1, 1
    %xu = insertvalue { i64*, i64 } zeroinitializer, i64* %a2c1, 0
    %x6 = insertvalue { i64*, i64 } %xu, i64 %xta, 1
    br label %while_starta

  while_enda:
    %a1b2 = extractvalue { i64*, i64 } %xna, 0
    %a2b2 = extractvalue { i64*, i64 } %xna, 1
    %pa3 = getelementptr i64, i64* %a1b2, i64 %a2b2
    store i64 %a1a1, i64* %pa3
    br label %ctd_ifb

  elseb:
    br label %ctd_ifb

  ctd_ifb:
    %xe2 = phi i64* [ %a21, %elseb ], [ %a1b2, %while_enda ]
    %xfa = add i64 %a11, 1
    %xg2 = insertvalue { i64, i64* } zeroinitializer, i64 %xfa, 0
    %x7 = insertvalue { i64, i64* } %xg2, i64* %xe2, 1
    br label %while_start

  while_end:
    %a12 = extractvalue { i64, i64* } %xba, 0
    %x8 = extractvalue { i64, i64* } %xba, 1
    br label %ctd_if

  else:
    br label %ctd_if

  ctd_if:
    %x9 = phi i64* [ %x, %else ], [ %x8, %while_end ]
    ret i64* %x9
}

define i64* @Sorting_Export_Code_unat_sort_pdqsort_impl_f_07214832({ i1, { i64*, { i64, { i64, i64 } } } } %x) {

  start:
    %a1 = extractvalue { i1, { i64*, { i64, { i64, i64 } } } } %x, 0
    %xea = extractvalue { i1, { i64*, { i64, { i64, i64 } } } } %x, 1
    %a1a = extractvalue { i64*, { i64, { i64, i64 } } } %xea, 0
    %xfa = extractvalue { i64*, { i64, { i64, i64 } } } %xea, 1
    %a1b = extractvalue { i64, { i64, i64 } } %xfa, 0
    %xga = extractvalue { i64, { i64, i64 } } %xfa, 1
    %a1c = extractvalue { i64, i64 } %xga, 0
    %a2c = extractvalue { i64, i64 } %xga, 1
    %xh = sub i64 %a1c, %a1b
    %xia = icmp slt i64 %xh, 24
    br i1 %xia, label %then, label %else

  then:
    br i1 %a1, label %thena, label %elsea

  thena:
    %x1 = call i64* @Sorting_Export_Code_unat_sort_pdq_guarded_insort_impl (i64* %a1a, i64 %a1b, i64 %a1c)
    br label %ctd_ifa

  elsea:
    %x2 = call i64* @Sorting_Export_Code_unat_sort_pdq_unguarded_insort_impl (i64* %a1a, i64 %a1b, i64 %a1c)
    br label %ctd_ifa

  ctd_ifa:
    %x3 = phi i64* [ %x2, %elsea ], [ %x1, %thena ]
    br label %ctd_if

  else:
    %xj = sub i64 %a1c, %a1b
    %xka = udiv i64 %xj, 2
    %xl = icmp slt i64 128, %xj
    br i1 %xl, label %thenb, label %elseb

  thenb:
    %xm = add i64 %a1b, %xka
    %xna = sub i64 %a1c, 1
    %xo = getelementptr i64, i64* %a1a, i64 %xm
    %r = load i64, i64* %xo
    %xp = insertvalue { i64, i64* } zeroinitializer, i64 %r, 0
    %xq = insertvalue { i64, i64* } %xp, i64* %a1a, 1
    %a1d = extractvalue { i64, i64* } %xq, 0
    %a2 = extractvalue { i64, i64* } %xq, 1
    %xr = getelementptr i64, i64* %a2, i64 %a1b
    %ra = load i64, i64* %xr
    %xs = insertvalue { i64, i64* } zeroinitializer, i64 %ra, 0
    %xt = insertvalue { i64, i64* } %xs, i64* %a2, 1
    %a1aa = extractvalue { i64, i64* } %xt, 0
    %a2a = extractvalue { i64, i64* } %xt, 1
    %xu = icmp ult i64 %a1d, %a1aa
    %p = getelementptr i64, i64* %a2a, i64 %xm
    store i64 %a1d, i64* %p
    %pa = getelementptr i64, i64* %a2a, i64 %a1b
    store i64 %a1aa, i64* %pa
    br i1 %xu, label %thenc, label %elsec

  thenc:
    %x4 = call i64* @Proto_IICF_EOArray_swap_eo_impl (i64* %a1a, i64 %a1b, i64 %xm)
    br label %ctd_ifc

  elsec:
    br label %ctd_ifc

  ctd_ifc:
    %xy = phi i64* [ %a1a, %elsec ], [ %x4, %thenc ]
    %xz = getelementptr i64, i64* %xy, i64 %xna
    %rb = load i64, i64* %xz
    %ya = insertvalue { i64, i64* } zeroinitializer, i64 %rb, 0
    %yb = insertvalue { i64, i64* } %ya, i64* %xy, 1
    %a1e = extractvalue { i64, i64* } %yb, 0
    %a2b = extractvalue { i64, i64* } %yb, 1
    %yc = getelementptr i64, i64* %a2b, i64 %xm
    %rc = load i64, i64* %yc
    %yd = insertvalue { i64, i64* } zeroinitializer, i64 %rc, 0
    %ye = insertvalue { i64, i64* } %yd, i64* %a2b, 1
    %a1ab = extractvalue { i64, i64* } %ye, 0
    %a2aa = extractvalue { i64, i64* } %ye, 1
    %yf = icmp ult i64 %a1e, %a1ab
    %pb = getelementptr i64, i64* %a2aa, i64 %xna
    store i64 %a1e, i64* %pb
    %pc = getelementptr i64, i64* %a2aa, i64 %xm
    store i64 %a1ab, i64* %pc
    br i1 %yf, label %thend, label %elsed

  thend:
    %x5 = call i64* @Proto_IICF_EOArray_swap_eo_impl (i64* %xy, i64 %xm, i64 %xna)
    br label %ctd_ifd

  elsed:
    br label %ctd_ifd

  ctd_ifd:
    %yj = phi i64* [ %xy, %elsed ], [ %x5, %thend ]
    %yk = getelementptr i64, i64* %yj, i64 %xm
    %rd = load i64, i64* %yk
    %yl = insertvalue { i64, i64* } zeroinitializer, i64 %rd, 0
    %ym = insertvalue { i64, i64* } %yl, i64* %yj, 1
    %a1f = extractvalue { i64, i64* } %ym, 0
    %a2d = extractvalue { i64, i64* } %ym, 1
    %yn = getelementptr i64, i64* %a2d, i64 %a1b
    %re = load i64, i64* %yn
    %yo = insertvalue { i64, i64* } zeroinitializer, i64 %re, 0
    %yp = insertvalue { i64, i64* } %yo, i64* %a2d, 1
    %a1ac = extractvalue { i64, i64* } %yp, 0
    %a2ab = extractvalue { i64, i64* } %yp, 1
    %yq = icmp ult i64 %a1f, %a1ac
    %pd = getelementptr i64, i64* %a2ab, i64 %xm
    store i64 %a1f, i64* %pd
    %pe = getelementptr i64, i64* %a2ab, i64 %a1b
    store i64 %a1ac, i64* %pe
    br i1 %yq, label %thene, label %elsee

  thene:
    %x6 = call i64* @Proto_IICF_EOArray_swap_eo_impl (i64* %yj, i64 %a1b, i64 %xm)
    br label %ctd_ife

  elsee:
    br label %ctd_ife

  ctd_ife:
    %yu = phi i64* [ %yj, %elsee ], [ %x6, %thene ]
    %yva = add i64 %a1b, 1
    %yw = add i64 %a1b, %xka
    %yxa = sub i64 %yw, 1
    %yya = sub i64 %a1c, 2
    %yz = getelementptr i64, i64* %yu, i64 %yxa
    %rf = load i64, i64* %yz
    %za = insertvalue { i64, i64* } zeroinitializer, i64 %rf, 0
    %zb = insertvalue { i64, i64* } %za, i64* %yu, 1
    %a1g = extractvalue { i64, i64* } %zb, 0
    %a2e = extractvalue { i64, i64* } %zb, 1
    %zc = getelementptr i64, i64* %a2e, i64 %yva
    %rg = load i64, i64* %zc
    %zd = insertvalue { i64, i64* } zeroinitializer, i64 %rg, 0
    %ze = insertvalue { i64, i64* } %zd, i64* %a2e, 1
    %a1ad = extractvalue { i64, i64* } %ze, 0
    %a2ac = extractvalue { i64, i64* } %ze, 1
    %zf = icmp ult i64 %a1g, %a1ad
    %pf = getelementptr i64, i64* %a2ac, i64 %yxa
    store i64 %a1g, i64* %pf
    %pg = getelementptr i64, i64* %a2ac, i64 %yva
    store i64 %a1ad, i64* %pg
    br i1 %zf, label %thenf, label %elsef

  thenf:
    %x7 = call i64* @Proto_IICF_EOArray_swap_eo_impl (i64* %yu, i64 %yva, i64 %yxa)
    br label %ctd_iff

  elsef:
    br label %ctd_iff

  ctd_iff:
    %zj = phi i64* [ %yu, %elsef ], [ %x7, %thenf ]
    %zk = getelementptr i64, i64* %zj, i64 %yya
    %rh = load i64, i64* %zk
    %zl = insertvalue { i64, i64* } zeroinitializer, i64 %rh, 0
    %zm = insertvalue { i64, i64* } %zl, i64* %zj, 1
    %a1h = extractvalue { i64, i64* } %zm, 0
    %a2f = extractvalue { i64, i64* } %zm, 1
    %zn = getelementptr i64, i64* %a2f, i64 %yxa
    %ri = load i64, i64* %zn
    %zo = insertvalue { i64, i64* } zeroinitializer, i64 %ri, 0
    %zp = insertvalue { i64, i64* } %zo, i64* %a2f, 1
    %a1ae = extractvalue { i64, i64* } %zp, 0
    %a2ad = extractvalue { i64, i64* } %zp, 1
    %zq = icmp ult i64 %a1h, %a1ae
    %ph = getelementptr i64, i64* %a2ad, i64 %yya
    store i64 %a1h, i64* %ph
    %pi = getelementptr i64, i64* %a2ad, i64 %yxa
    store i64 %a1ae, i64* %pi
    br i1 %zq, label %theng, label %elseg

  theng:
    %x8 = call i64* @Proto_IICF_EOArray_swap_eo_impl (i64* %zj, i64 %yxa, i64 %yya)
    br label %ctd_ifg

  elseg:
    br label %ctd_ifg

  ctd_ifg:
    %zu = phi i64* [ %zj, %elseg ], [ %x8, %theng ]
    %zv = getelementptr i64, i64* %zu, i64 %yxa
    %rj = load i64, i64* %zv
    %zw = insertvalue { i64, i64* } zeroinitializer, i64 %rj, 0
    %zx = insertvalue { i64, i64* } %zw, i64* %zu, 1
    %a1i = extractvalue { i64, i64* } %zx, 0
    %a2g = extractvalue { i64, i64* } %zx, 1
    %zy = getelementptr i64, i64* %a2g, i64 %yva
    %rk = load i64, i64* %zy
    %zz = insertvalue { i64, i64* } zeroinitializer, i64 %rk, 0
    %aaa = insertvalue { i64, i64* } %zz, i64* %a2g, 1
    %a1af = extractvalue { i64, i64* } %aaa, 0
    %a2ae = extractvalue { i64, i64* } %aaa, 1
    %aab = icmp ult i64 %a1i, %a1af
    %pj = getelementptr i64, i64* %a2ae, i64 %yxa
    store i64 %a1i, i64* %pj
    %pk = getelementptr i64, i64* %a2ae, i64 %yva
    store i64 %a1af, i64* %pk
    br i1 %aab, label %thenh, label %elseh

  thenh:
    %x9 = call i64* @Proto_IICF_EOArray_swap_eo_impl (i64* %zu, i64 %yva, i64 %yxa)
    br label %ctd_ifh

  elseh:
    br label %ctd_ifh

  ctd_ifh:
    %aaf = phi i64* [ %zu, %elseh ], [ %x9, %thenh ]
    %aaga = add i64 %a1b, 2
    %aah = add i64 %a1b, %xka
    %aaia = add i64 %aah, 1
    %aaja = sub i64 %a1c, 3
    %aak = getelementptr i64, i64* %aaf, i64 %aaia
    %rl = load i64, i64* %aak
    %aal = insertvalue { i64, i64* } zeroinitializer, i64 %rl, 0
    %aam = insertvalue { i64, i64* } %aal, i64* %aaf, 1
    %a1j = extractvalue { i64, i64* } %aam, 0
    %a2h = extractvalue { i64, i64* } %aam, 1
    %aan = getelementptr i64, i64* %a2h, i64 %aaga
    %rm = load i64, i64* %aan
    %aao = insertvalue { i64, i64* } zeroinitializer, i64 %rm, 0
    %aap = insertvalue { i64, i64* } %aao, i64* %a2h, 1
    %a1ag = extractvalue { i64, i64* } %aap, 0
    %a2af = extractvalue { i64, i64* } %aap, 1
    %aaq = icmp ult i64 %a1j, %a1ag
    %pl = getelementptr i64, i64* %a2af, i64 %aaia
    store i64 %a1j, i64* %pl
    %pm = getelementptr i64, i64* %a2af, i64 %aaga
    store i64 %a1ag, i64* %pm
    br i1 %aaq, label %theni, label %elsei

  theni:
    %x10 = call i64* @Proto_IICF_EOArray_swap_eo_impl (i64* %aaf, i64 %aaga, i64 %aaia)
    br label %ctd_ifi

  elsei:
    br label %ctd_ifi

  ctd_ifi:
    %aau = phi i64* [ %aaf, %elsei ], [ %x10, %theni ]
    %aav = getelementptr i64, i64* %aau, i64 %aaja
    %rn = load i64, i64* %aav
    %aaw = insertvalue { i64, i64* } zeroinitializer, i64 %rn, 0
    %aax = insertvalue { i64, i64* } %aaw, i64* %aau, 1
    %a1k = extractvalue { i64, i64* } %aax, 0
    %a2i = extractvalue { i64, i64* } %aax, 1
    %aay = getelementptr i64, i64* %a2i, i64 %aaia
    %ro = load i64, i64* %aay
    %aaz = insertvalue { i64, i64* } zeroinitializer, i64 %ro, 0
    %aba = insertvalue { i64, i64* } %aaz, i64* %a2i, 1
    %a1ah = extractvalue { i64, i64* } %aba, 0
    %a2ag = extractvalue { i64, i64* } %aba, 1
    %abb = icmp ult i64 %a1k, %a1ah
    %pn = getelementptr i64, i64* %a2ag, i64 %aaja
    store i64 %a1k, i64* %pn
    %po = getelementptr i64, i64* %a2ag, i64 %aaia
    store i64 %a1ah, i64* %po
    br i1 %abb, label %thenj, label %elsej

  thenj:
    %x11 = call i64* @Proto_IICF_EOArray_swap_eo_impl (i64* %aau, i64 %aaia, i64 %aaja)
    br label %ctd_ifj

  elsej:
    br label %ctd_ifj

  ctd_ifj:
    %abf = phi i64* [ %aau, %elsej ], [ %x11, %thenj ]
    %abg = getelementptr i64, i64* %abf, i64 %aaia
    %rp = load i64, i64* %abg
    %abh = insertvalue { i64, i64* } zeroinitializer, i64 %rp, 0
    %abi = insertvalue { i64, i64* } %abh, i64* %abf, 1
    %a1l = extractvalue { i64, i64* } %abi, 0
    %a2j = extractvalue { i64, i64* } %abi, 1
    %abj = getelementptr i64, i64* %a2j, i64 %aaga
    %rq = load i64, i64* %abj
    %abk = insertvalue { i64, i64* } zeroinitializer, i64 %rq, 0
    %abl = insertvalue { i64, i64* } %abk, i64* %a2j, 1
    %a1ai = extractvalue { i64, i64* } %abl, 0
    %a2ah = extractvalue { i64, i64* } %abl, 1
    %abm = icmp ult i64 %a1l, %a1ai
    %pp = getelementptr i64, i64* %a2ah, i64 %aaia
    store i64 %a1l, i64* %pp
    %pq = getelementptr i64, i64* %a2ah, i64 %aaga
    store i64 %a1ai, i64* %pq
    br i1 %abm, label %thenk, label %elsek

  thenk:
    %x12 = call i64* @Proto_IICF_EOArray_swap_eo_impl (i64* %abf, i64 %aaga, i64 %aaia)
    br label %ctd_ifk

  elsek:
    br label %ctd_ifk

  ctd_ifk:
    %abq = phi i64* [ %abf, %elsek ], [ %x12, %thenk ]
    %abr = add i64 %a1b, %xka
    %absa = sub i64 %abr, 1
    %abt = add i64 %a1b, %xka
    %abu = add i64 %a1b, %xka
    %abva = add i64 %abu, 1
    %abw = getelementptr i64, i64* %abq, i64 %abt
    %rr = load i64, i64* %abw
    %abx = insertvalue { i64, i64* } zeroinitializer, i64 %rr, 0
    %aby = insertvalue { i64, i64* } %abx, i64* %abq, 1
    %a1m = extractvalue { i64, i64* } %aby, 0
    %a2k = extractvalue { i64, i64* } %aby, 1
    %abz = getelementptr i64, i64* %a2k, i64 %absa
    %rs = load i64, i64* %abz
    %aca = insertvalue { i64, i64* } zeroinitializer, i64 %rs, 0
    %acb = insertvalue { i64, i64* } %aca, i64* %a2k, 1
    %a1aj = extractvalue { i64, i64* } %acb, 0
    %a2ai = extractvalue { i64, i64* } %acb, 1
    %acc = icmp ult i64 %a1m, %a1aj
    %pr = getelementptr i64, i64* %a2ai, i64 %abt
    store i64 %a1m, i64* %pr
    %ps = getelementptr i64, i64* %a2ai, i64 %absa
    store i64 %a1aj, i64* %ps
    br i1 %acc, label %thenl, label %elsel

  thenl:
    %x13 = call i64* @Proto_IICF_EOArray_swap_eo_impl (i64* %abq, i64 %absa, i64 %abt)
    br label %ctd_ifl

  elsel:
    br label %ctd_ifl

  ctd_ifl:
    %acg = phi i64* [ %abq, %elsel ], [ %x13, %thenl ]
    %ach = getelementptr i64, i64* %acg, i64 %abva
    %rt = load i64, i64* %ach
    %aci = insertvalue { i64, i64* } zeroinitializer, i64 %rt, 0
    %acj = insertvalue { i64, i64* } %aci, i64* %acg, 1
    %a1n = extractvalue { i64, i64* } %acj, 0
    %a2l = extractvalue { i64, i64* } %acj, 1
    %ack = getelementptr i64, i64* %a2l, i64 %abt
    %ru = load i64, i64* %ack
    %acl = insertvalue { i64, i64* } zeroinitializer, i64 %ru, 0
    %acm = insertvalue { i64, i64* } %acl, i64* %a2l, 1
    %a1ak = extractvalue { i64, i64* } %acm, 0
    %a2aj = extractvalue { i64, i64* } %acm, 1
    %acn = icmp ult i64 %a1n, %a1ak
    %pt = getelementptr i64, i64* %a2aj, i64 %abva
    store i64 %a1n, i64* %pt
    %pu = getelementptr i64, i64* %a2aj, i64 %abt
    store i64 %a1ak, i64* %pu
    br i1 %acn, label %thenm, label %elsem

  thenm:
    %x14 = call i64* @Proto_IICF_EOArray_swap_eo_impl (i64* %acg, i64 %abt, i64 %abva)
    br label %ctd_ifm

  elsem:
    br label %ctd_ifm

  ctd_ifm:
    %acr = phi i64* [ %acg, %elsem ], [ %x14, %thenm ]
    %acs = getelementptr i64, i64* %acr, i64 %abt
    %rv = load i64, i64* %acs
    %act = insertvalue { i64, i64* } zeroinitializer, i64 %rv, 0
    %acu = insertvalue { i64, i64* } %act, i64* %acr, 1
    %a1o = extractvalue { i64, i64* } %acu, 0
    %a2m = extractvalue { i64, i64* } %acu, 1
    %acv = getelementptr i64, i64* %a2m, i64 %absa
    %rw = load i64, i64* %acv
    %acw = insertvalue { i64, i64* } zeroinitializer, i64 %rw, 0
    %acx = insertvalue { i64, i64* } %acw, i64* %a2m, 1
    %a1al = extractvalue { i64, i64* } %acx, 0
    %a2ak = extractvalue { i64, i64* } %acx, 1
    %acy = icmp ult i64 %a1o, %a1al
    %pv = getelementptr i64, i64* %a2ak, i64 %abt
    store i64 %a1o, i64* %pv
    %pw = getelementptr i64, i64* %a2ak, i64 %absa
    store i64 %a1al, i64* %pw
    br i1 %acy, label %thenn, label %elsen

  thenn:
    %x15 = call i64* @Proto_IICF_EOArray_swap_eo_impl (i64* %acr, i64 %absa, i64 %abt)
    br label %ctd_ifn

  elsen:
    br label %ctd_ifn

  ctd_ifn:
    %adc = phi i64* [ %acr, %elsen ], [ %x15, %thenn ]
    %x16 = add i64 %a1b, %xka
    %x17 = call i64* @Proto_IICF_EOArray_swap_eo_impl (i64* %adc, i64 %a1b, i64 %x16)
    br label %ctd_ifb

  elseb:
    %xm1 = add i64 %a1b, %xka
    %bic = sub i64 %a1c, 1
    %xna1 = getelementptr i64, i64* %a1a, i64 %a1b
    %r1 = load i64, i64* %xna1
    %xo1 = insertvalue { i64, i64* } zeroinitializer, i64 %r1, 0
    %xp1 = insertvalue { i64, i64* } %xo1, i64* %a1a, 1
    %a1d1 = extractvalue { i64, i64* } %xp1, 0
    %a21 = extractvalue { i64, i64* } %xp1, 1
    %xq1 = getelementptr i64, i64* %a21, i64 %xm1
    %ra1 = load i64, i64* %xq1
    %xr1 = insertvalue { i64, i64* } zeroinitializer, i64 %ra1, 0
    %xs1 = insertvalue { i64, i64* } %xr1, i64* %a21, 1
    %a1aa1 = extractvalue { i64, i64* } %xs1, 0
    %a2a1 = extractvalue { i64, i64* } %xs1, 1
    %xt1 = icmp ult i64 %a1d1, %a1aa1
    %p1 = getelementptr i64, i64* %a2a1, i64 %a1b
    store i64 %a1d1, i64* %p1
    %pa1 = getelementptr i64, i64* %a2a1, i64 %xm1
    store i64 %a1aa1, i64* %pa1
    br i1 %xt1, label %theno, label %elseo

  theno:
    %x18 = call i64* @Proto_IICF_EOArray_swap_eo_impl (i64* %a1a, i64 %xm1, i64 %a1b)
    br label %ctd_ifo

  elseo:
    br label %ctd_ifo

  ctd_ifo:
    %xx = phi i64* [ %a1a, %elseo ], [ %x18, %theno ]
    %xy1 = getelementptr i64, i64* %xx, i64 %bic
    %rb1 = load i64, i64* %xy1
    %xz1 = insertvalue { i64, i64* } zeroinitializer, i64 %rb1, 0
    %ya1 = insertvalue { i64, i64* } %xz1, i64* %xx, 1
    %a1e1 = extractvalue { i64, i64* } %ya1, 0
    %a2b1 = extractvalue { i64, i64* } %ya1, 1
    %yb1 = getelementptr i64, i64* %a2b1, i64 %a1b
    %rc1 = load i64, i64* %yb1
    %yc1 = insertvalue { i64, i64* } zeroinitializer, i64 %rc1, 0
    %yd1 = insertvalue { i64, i64* } %yc1, i64* %a2b1, 1
    %a1ab1 = extractvalue { i64, i64* } %yd1, 0
    %a2aa1 = extractvalue { i64, i64* } %yd1, 1
    %ye1 = icmp ult i64 %a1e1, %a1ab1
    %pb1 = getelementptr i64, i64* %a2aa1, i64 %bic
    store i64 %a1e1, i64* %pb1
    %pc1 = getelementptr i64, i64* %a2aa1, i64 %a1b
    store i64 %a1ab1, i64* %pc1
    br i1 %ye1, label %thenp, label %elsep

  thenp:
    %x19 = call i64* @Proto_IICF_EOArray_swap_eo_impl (i64* %xx, i64 %a1b, i64 %bic)
    br label %ctd_ifp

  elsep:
    br label %ctd_ifp

  ctd_ifp:
    %yi = phi i64* [ %xx, %elsep ], [ %x19, %thenp ]
    %yj1 = getelementptr i64, i64* %yi, i64 %a1b
    %rd1 = load i64, i64* %yj1
    %yk1 = insertvalue { i64, i64* } zeroinitializer, i64 %rd1, 0
    %yl1 = insertvalue { i64, i64* } %yk1, i64* %yi, 1
    %a1f1 = extractvalue { i64, i64* } %yl1, 0
    %a2d1 = extractvalue { i64, i64* } %yl1, 1
    %ym1 = getelementptr i64, i64* %a2d1, i64 %xm1
    %re1 = load i64, i64* %ym1
    %yn1 = insertvalue { i64, i64* } zeroinitializer, i64 %re1, 0
    %yo1 = insertvalue { i64, i64* } %yn1, i64* %a2d1, 1
    %a1ac1 = extractvalue { i64, i64* } %yo1, 0
    %a2ab1 = extractvalue { i64, i64* } %yo1, 1
    %yp1 = icmp ult i64 %a1f1, %a1ac1
    %pd1 = getelementptr i64, i64* %a2ab1, i64 %a1b
    store i64 %a1f1, i64* %pd1
    %pe1 = getelementptr i64, i64* %a2ab1, i64 %xm1
    store i64 %a1ac1, i64* %pe1
    br i1 %yp1, label %thenq, label %elseq

  thenq:
    %x20 = call i64* @Proto_IICF_EOArray_swap_eo_impl (i64* %yi, i64 %xm1, i64 %a1b)
    br label %ctd_ifq

  elseq:
    br label %ctd_ifq

  ctd_ifq:
    %x21 = phi i64* [ %yi, %elseq ], [ %x20, %thenq ]
    br label %ctd_ifb

  ctd_ifb:
    %xm2 = phi i64* [ %x21, %ctd_ifq ], [ %x17, %ctd_ifn ]
    br i1 %a1, label %thenr, label %elser

  thenr:
    br label %ctd_ifr

  elser:
    %xna2 = sub i64 %a1b, 1
    %xo2 = getelementptr i64, i64* %xm2, i64 %xna2
    %r2 = load i64, i64* %xo2
    %xp2 = insertvalue { i64, i64* } zeroinitializer, i64 %r2, 0
    %xq2 = insertvalue { i64, i64* } %xp2, i64* %xm2, 1
    %a1d2 = extractvalue { i64, i64* } %xq2, 0
    %a22 = extractvalue { i64, i64* } %xq2, 1
    %xr2 = getelementptr i64, i64* %a22, i64 %a1b
    %ra2 = load i64, i64* %xr2
    %xs2 = insertvalue { i64, i64* } zeroinitializer, i64 %ra2, 0
    %xt2 = insertvalue { i64, i64* } %xs2, i64* %a22, 1
    %a1aa2 = extractvalue { i64, i64* } %xt2, 0
    %a2a2 = extractvalue { i64, i64* } %xt2, 1
    %xu1 = icmp ult i64 %a1d2, %a1aa2
    %p2 = getelementptr i64, i64* %a2a2, i64 %xna2
    store i64 %a1d2, i64* %p2
    %pa2 = getelementptr i64, i64* %a2a2, i64 %a1b
    store i64 %a1aa2, i64* %pa2
    %x22 = add i1 %xu1, 1
    br label %ctd_ifr

  ctd_ifr:
    %xn = phi i1 [ %x22, %elser ], [ 0, %thenr ]
    br i1 %xn, label %thens, label %elses

  thens:
    %xo3 = call { i1, { i64, i64* } } @Sorting_Export_Code_unat_sort_partition_left_impl (i64* %xm2, i64 %a1b, i64 %a1c)
    %a1d3 = extractvalue { i1, { i64, i64* } } %xo3, 0
    %xp3 = extractvalue { i1, { i64, i64* } } %xo3, 1
    %a1e2 = extractvalue { i64, i64* } %xp3, 0
    %a2e1 = extractvalue { i64, i64* } %xp3, 1
    %xqa = add i64 %a1e2, 1
    %xr3 = insertvalue { i64, i64 } zeroinitializer, i64 %a1c, 0
    %tmpad = insertvalue { i64, i64 } %xr3, i64 %a2c, 1
    %xs3 = insertvalue { i64, { i64, i64 } } zeroinitializer, i64 %xqa, 0
    %tmpae = insertvalue { i64, { i64, i64 } } %xs3, { i64, i64 } %tmpad, 1
    %xt3 = insertvalue { i64*, { i64, { i64, i64 } } } zeroinitializer, i64* %a2e1, 0
    %tmpaf = insertvalue { i64*, { i64, { i64, i64 } } } %xt3, { i64, { i64, i64 } } %tmpae, 1
    %xu2 = insertvalue { i1, { i64*, { i64, { i64, i64 } } } } zeroinitializer, i1 0, 0
    %x23 = insertvalue { i1, { i64*, { i64, { i64, i64 } } } } %xu2, { i64*, { i64, { i64, i64 } } } %tmpaf, 1
    %x24 = call i64* @Sorting_Export_Code_unat_sort_pdqsort_impl_f_07214832 ({ i1, { i64*, { i64, { i64, i64 } } } } %x23)
    br label %ctd_ifs

  elses:
    %xoa = add i64 %a1b, 1
    br label %while_start

  while_start:
    %s = phi i64 [ %x25, %while_body ], [ %xoa, %elses ]
    %xp4 = getelementptr i64, i64* %xm2, i64 %s
    %r3 = load i64, i64* %xp4
    %xq3 = insertvalue { i64, i64* } zeroinitializer, i64 %r3, 0
    %xr4 = insertvalue { i64, i64* } %xq3, i64* %xm2, 1
    %a1d4 = extractvalue { i64, i64* } %xr4, 0
    %a23 = extractvalue { i64, i64* } %xr4, 1
    %xs4 = getelementptr i64, i64* %a23, i64 %a1b
    %ra3 = load i64, i64* %xs4
    %xt4 = insertvalue { i64, i64* } zeroinitializer, i64 %ra3, 0
    %xu3 = insertvalue { i64, i64* } %xt4, i64* %a23, 1
    %a1aa3 = extractvalue { i64, i64* } %xu3, 0
    %a2a3 = extractvalue { i64, i64* } %xu3, 1
    %xv = icmp ult i64 %a1d4, %a1aa3
    %p3 = getelementptr i64, i64* %a2a3, i64 %s
    store i64 %a1d4, i64* %p3
    %pa3 = getelementptr i64, i64* %a2a3, i64 %a1b
    store i64 %a1aa3, i64* %pa3
    br i1 %xv, label %while_body, label %while_end

  while_body:
    %x25 = add i64 %s, 1
    br label %while_start

  while_end:
    %xqa1 = add i64 %a1b, 1
    %xr5 = icmp eq i64 %s, %xqa1
    br i1 %xr5, label %thent, label %elset

  thent:
    %x26 = sub i64 %a1c, 1
    br label %while_starta

  while_starta:
    %s1 = phi i64 [ %x29, %while_bodya ], [ %x26, %thent ]
    %xsa = add i64 %a1b, 1
    %xta = icmp slt i64 %xsa, %s1
    br i1 %xta, label %thenu, label %elseu

  thenu:
    %xu4 = getelementptr i64, i64* %xm2, i64 %s1
    %r4 = load i64, i64* %xu4
    %xv1 = insertvalue { i64, i64* } zeroinitializer, i64 %r4, 0
    %xw = insertvalue { i64, i64* } %xv1, i64* %xm2, 1
    %a1d5 = extractvalue { i64, i64* } %xw, 0
    %a24 = extractvalue { i64, i64* } %xw, 1
    %xx1 = getelementptr i64, i64* %a24, i64 %a1b
    %ra4 = load i64, i64* %xx1
    %xy2 = insertvalue { i64, i64* } zeroinitializer, i64 %ra4, 0
    %xz2 = insertvalue { i64, i64* } %xy2, i64* %a24, 1
    %a1aa4 = extractvalue { i64, i64* } %xz2, 0
    %a2a4 = extractvalue { i64, i64* } %xz2, 1
    %ya2 = icmp ult i64 %a1d5, %a1aa4
    %p4 = getelementptr i64, i64* %a2a4, i64 %s1
    store i64 %a1d5, i64* %p4
    %pa4 = getelementptr i64, i64* %a2a4, i64 %a1b
    store i64 %a1aa4, i64* %pa4
    %x27 = add i1 %ya2, 1
    br label %ctd_ifu

  elseu:
    br label %ctd_ifu

  ctd_ifu:
    %x28 = phi i1 [ 0, %elseu ], [ %x27, %thenu ]
    br i1 %x28, label %while_bodya, label %while_enda

  while_bodya:
    %x29 = sub i64 %s1, 1
    br label %while_starta

  while_enda:
    br label %ctd_ift

  elset:
    %x31 = sub i64 %a1c, 1
    br label %while_startb

  while_startb:
    %s2 = phi i64 [ %x33, %while_bodyb ], [ %x31, %elset ]
    %xsa1 = getelementptr i64, i64* %xm2, i64 %s2
    %r5 = load i64, i64* %xsa1
    %xt5 = insertvalue { i64, i64* } zeroinitializer, i64 %r5, 0
    %xu5 = insertvalue { i64, i64* } %xt5, i64* %xm2, 1
    %a1d6 = extractvalue { i64, i64* } %xu5, 0
    %a25 = extractvalue { i64, i64* } %xu5, 1
    %xv2 = getelementptr i64, i64* %a25, i64 %a1b
    %ra5 = load i64, i64* %xv2
    %xw1 = insertvalue { i64, i64* } zeroinitializer, i64 %ra5, 0
    %xx2 = insertvalue { i64, i64* } %xw1, i64* %a25, 1
    %a1aa5 = extractvalue { i64, i64* } %xx2, 0
    %a2a5 = extractvalue { i64, i64* } %xx2, 1
    %xy3 = icmp ult i64 %a1d6, %a1aa5
    %p5 = getelementptr i64, i64* %a2a5, i64 %s2
    store i64 %a1d6, i64* %p5
    %pa5 = getelementptr i64, i64* %a2a5, i64 %a1b
    store i64 %a1aa5, i64* %pa5
    %x32 = add i1 %xy3, 1
    br i1 %x32, label %while_bodyb, label %while_endb

  while_bodyb:
    %x33 = sub i64 %s2, 1
    br label %while_startb

  while_endb:
    br label %ctd_ift

  ctd_ift:
    %xs5 = phi i64 [ %s2, %while_endb ], [ %s1, %while_enda ]
    %xt6 = icmp sle i64 %xs5, %s
    %xu6 = insertvalue { i64, i64 } zeroinitializer, i64 %s, 0
    %tmpd = insertvalue { i64, i64 } %xu6, i64 %xs5, 1
    %xv3 = insertvalue { i64*, { i64, i64 } } zeroinitializer, i64* %xm2, 0
    %xw2 = insertvalue { i64*, { i64, i64 } } %xv3, { i64, i64 } %tmpd, 1
    br label %while_startc

  while_startc:
    %xua = phi { i64*, { i64, i64 } } [ %x41, %while_ende ], [ %xw2, %ctd_ift ]
    %a1d7 = extractvalue { i64*, { i64, i64 } } %xua, 0
    %xva = extractvalue { i64*, { i64, i64 } } %xua, 1
    %a = extractvalue { i64, i64 } %xva, 0
    %x35 = extractvalue { i64, i64 } %xva, 1
    %x36 = icmp slt i64 %a, %x35
    br i1 %x36, label %while_bodyc, label %while_endc

  while_bodyc:
    %a1d8 = extractvalue { i64*, { i64, i64 } } %xua, 0
    %xva1 = extractvalue { i64*, { i64, i64 } } %xua, 1
    %a1aa6 = extractvalue { i64, i64 } %xva1, 0
    %a2a6 = extractvalue { i64, i64 } %xva1, 1
    %xwa = call i64* @Proto_IICF_EOArray_swap_eo_impl (i64* %a1d8, i64 %a1aa6, i64 %a2a6)
    %xxa = add i64 %a1aa6, 1
    br label %while_startd

  while_startd:
    %s3 = phi i64 [ %x37, %while_bodyd ], [ %xxa, %while_bodyc ]
    %xy4 = getelementptr i64, i64* %xwa, i64 %s3
    %r6 = load i64, i64* %xy4
    %xz3 = insertvalue { i64, i64* } zeroinitializer, i64 %r6, 0
    %ya3 = insertvalue { i64, i64* } %xz3, i64* %xwa, 1
    %a1e3 = extractvalue { i64, i64* } %ya3, 0
    %a26 = extractvalue { i64, i64* } %ya3, 1
    %yb2 = getelementptr i64, i64* %a26, i64 %a1b
    %ra6 = load i64, i64* %yb2
    %yc2 = insertvalue { i64, i64* } zeroinitializer, i64 %ra6, 0
    %yd2 = insertvalue { i64, i64* } %yc2, i64* %a26, 1
    %a1ab2 = extractvalue { i64, i64* } %yd2, 0
    %a2aa2 = extractvalue { i64, i64* } %yd2, 1
    %ye2 = icmp ult i64 %a1e3, %a1ab2
    %p6 = getelementptr i64, i64* %a2aa2, i64 %s3
    store i64 %a1e3, i64* %p6
    %pa6 = getelementptr i64, i64* %a2aa2, i64 %a1b
    store i64 %a1ab2, i64* %pa6
    br i1 %ye2, label %while_bodyd, label %while_endd

  while_bodyd:
    %x37 = add i64 %s3, 1
    br label %while_startd

  while_endd:
    %xza = sub i64 %a2a6, 1
    br label %while_starte

  while_starte:
    %s4 = phi i64 [ %x39, %while_bodye ], [ %xza, %while_endd ]
    %ya4 = getelementptr i64, i64* %xwa, i64 %s4
    %r7 = load i64, i64* %ya4
    %yb3 = insertvalue { i64, i64* } zeroinitializer, i64 %r7, 0
    %yc3 = insertvalue { i64, i64* } %yb3, i64* %xwa, 1
    %a1e4 = extractvalue { i64, i64* } %yc3, 0
    %a27 = extractvalue { i64, i64* } %yc3, 1
    %yd3 = getelementptr i64, i64* %a27, i64 %a1b
    %ra7 = load i64, i64* %yd3
    %ye3 = insertvalue { i64, i64* } zeroinitializer, i64 %ra7, 0
    %yf1 = insertvalue { i64, i64* } %ye3, i64* %a27, 1
    %a1ab3 = extractvalue { i64, i64* } %yf1, 0
    %a2aa3 = extractvalue { i64, i64* } %yf1, 1
    %yg = icmp ult i64 %a1e4, %a1ab3
    %p7 = getelementptr i64, i64* %a2aa3, i64 %s4
    store i64 %a1e4, i64* %p7
    %pa7 = getelementptr i64, i64* %a2aa3, i64 %a1b
    store i64 %a1ab3, i64* %pa7
    %x38 = add i1 %yg, 1
    br i1 %x38, label %while_bodye, label %while_ende

  while_bodye:
    %x39 = sub i64 %s4, 1
    br label %while_starte

  while_ende:
    %yb4 = insertvalue { i64*, { i64, i64 } } zeroinitializer, i64* %xwa, 0
    %yc4 = insertvalue { i64, i64 } zeroinitializer, i64 %s3, 0
    %x40 = insertvalue { i64, i64 } %yc4, i64 %s4, 1
    %x41 = insertvalue { i64*, { i64, i64 } } %yb4, { i64, i64 } %x40, 1
    br label %while_startc

  while_endc:
    %a1d9 = extractvalue { i64*, { i64, i64 } } %xua, 0
    %xva2 = extractvalue { i64*, { i64, i64 } } %xua, 1
    %a1aa7 = extractvalue { i64, i64 } %xva2, 0
    %a2a7 = extractvalue { i64, i64 } %xva2, 1
    %xwa1 = sub i64 %a1aa7, 1
    %xxa1 = icmp ne i64 %a1b, %xwa1
    br i1 %xxa1, label %thenv, label %elsev

  thenv:
    %x42 = sub i64 %a1aa7, 1
    %x43 = call i64* @Proto_IICF_EOArray_swap_eo_impl (i64* %a1d9, i64 %a1b, i64 %x42)
    br label %ctd_ifv

  elsev:
    br label %ctd_ifv

  ctd_ifv:
    %xy6 = phi i64* [ %a1d9, %elsev ], [ %x43, %thenv ]
    %xza1 = sub i64 %a1aa7, 1
    %ya6 = insertvalue { i1, { i64, i64* } } zeroinitializer, i1 %xt6, 0
    %yb5 = insertvalue { i64, i64* } zeroinitializer, i64 %xza1, 0
    %yc5 = insertvalue { i64, i64* } %yb5, i64* %xy6, 1
    %yba = insertvalue { i1, { i64, i64* } } %ya6, { i64, i64* } %yc5, 1
    %a1da = extractvalue { i1, { i64, i64* } } %yba, 0
    %yca = extractvalue { i1, { i64, i64* } } %yba, 1
    %a1e5 = extractvalue { i64, i64* } %yca, 0
    %a2e2 = extractvalue { i64, i64* } %yca, 1
    %yd4 = sub i64 %a1c, %a1b
    %ye4 = sub i64 %a1e5, %a1b
    %yfa = add i64 %a1e5, 1
    %yg1 = sub i64 %a1c, %yfa
    %yha = udiv i64 %yd4, 8
    %yi1 = icmp slt i64 %ye4, %yha
    %yj2 = icmp slt i64 %yg1, %yha
    %yk2 = or i1 %yi1, %yj2
    br i1 %yk2, label %thenw, label %elsew

  thenw:
    %yl2 = icmp sle i64 16, %ye4
    br i1 %yl2, label %thenx, label %elsex

  thenx:
    %yma = udiv i64 %ye4, 4
    %yn2 = add i64 %a1b, %yma
    %yoa = sub i64 %a1e5, 1
    %yp2 = sub i64 %a1e5, %yma
    %yq1 = call i64* @Proto_IICF_EOArray_swap_eo_impl (i64* %a2e2, i64 %a1b, i64 %yn2)
    %yr = call i64* @Proto_IICF_EOArray_swap_eo_impl (i64* %yq1, i64 %yoa, i64 %yp2)
    %ys = icmp slt i64 128, %ye4
    br i1 %ys, label %theny, label %elsey

  theny:
    %yta = add i64 %a1b, 1
    %yua = add i64 %a1b, 2
    %yva1 = sub i64 %a1e5, 2
    %ywa = sub i64 %a1e5, 3
    %yxa1 = add i64 %yn2, 1
    %yya1 = add i64 %yn2, 2
    %yza = sub i64 %yp2, 1
    %zaa = sub i64 %yp2, 2
    %zb1 = call i64* @Proto_IICF_EOArray_swap_eo_impl (i64* %yr, i64 %yta, i64 %yxa1)
    %zc1 = call i64* @Proto_IICF_EOArray_swap_eo_impl (i64* %zb1, i64 %yua, i64 %yya1)
    %zd1 = call i64* @Proto_IICF_EOArray_swap_eo_impl (i64* %zc1, i64 %yva1, i64 %yza)
    %x44 = call i64* @Proto_IICF_EOArray_swap_eo_impl (i64* %zd1, i64 %ywa, i64 %zaa)
    br label %ctd_ify

  elsey:
    br label %ctd_ify

  ctd_ify:
    %x45 = phi i64* [ %yr, %elsey ], [ %x44, %theny ]
    br label %ctd_ifx

  elsex:
    br label %ctd_ifx

  ctd_ifx:
    %ym2 = phi i64* [ %a2e2, %elsex ], [ %x45, %ctd_ify ]
    %yn3 = icmp sle i64 16, %yg1
    br i1 %yn3, label %thenz, label %elsez

  thenz:
    %yoa1 = add i64 %a1e5, 1
    %ypa = sub i64 %a1c, 1
    %yqa = udiv i64 %yg1, 4
    %yr1 = add i64 %yoa1, %yqa
    %ys1 = sub i64 %a1c, %yqa
    %yt = call i64* @Proto_IICF_EOArray_swap_eo_impl (i64* %ym2, i64 %yoa1, i64 %yr1)
    %yu1 = call i64* @Proto_IICF_EOArray_swap_eo_impl (i64* %yt, i64 %ypa, i64 %ys1)
    %yv = icmp slt i64 128, %yg1
    br i1 %yv, label %theoa, label %elsfa

  theoa:
    %ywa1 = add i64 %a1e5, 2
    %yxa2 = add i64 %a1e5, 3
    %yya2 = sub i64 %a1c, 2
    %yza1 = sub i64 %a1c, 3
    %zaa1 = sub i64 %ys1, 1
    %zba = sub i64 %ys1, 2
    %zca = add i64 %yr1, 1
    %zda = add i64 %yr1, 2
    %ze1 = call i64* @Proto_IICF_EOArray_swap_eo_impl (i64* %yu1, i64 %ywa1, i64 %zca)
    %zf1 = call i64* @Proto_IICF_EOArray_swap_eo_impl (i64* %ze1, i64 %yxa2, i64 %zda)
    %zg = call i64* @Proto_IICF_EOArray_swap_eo_impl (i64* %zf1, i64 %yya2, i64 %zaa1)
    %x46 = call i64* @Proto_IICF_EOArray_swap_eo_impl (i64* %zg, i64 %yza1, i64 %zba)
    br label %ctd_iga

  elsfa:
    br label %ctd_iga

  ctd_iga:
    %x47 = phi i64* [ %yu1, %elsfa ], [ %x46, %theoa ]
    br label %ctd_ifz

  elsez:
    br label %ctd_ifz

  ctd_ifz:
    %yo2 = phi i64* [ %ym2, %elsez ], [ %x47, %ctd_iga ]
    %ypa1 = insertvalue { i1, i64* } zeroinitializer, i1 1, 0
    %x48 = insertvalue { i1, i64* } %ypa1, i64* %yo2, 1
    br label %ctd_ifw

  elsew:
    %yla = insertvalue { i1, i64* } zeroinitializer, i1 0, 0
    %x49 = insertvalue { i1, i64* } %yla, i64* %a2e2, 1
    br label %ctd_ifw

  ctd_ifw:
    %yl3 = phi { i1, i64* } [ %x49, %elsew ], [ %x48, %ctd_ifz ]
    %a1f2 = extractvalue { i1, i64* } %yl3, 0
    %a2f1 = extractvalue { i1, i64* } %yl3, 1
    br i1 %a1f2, label %theob, label %elsfb

  theob:
    %x50 = sub i64 %a2c, 1
    br label %ctd_igb

  elsfb:
    br label %ctd_igb

  ctd_igb:
    %ym3 = phi i64 [ %a2c, %elsfb ], [ %x50, %theob ]
    %yna = icmp eq i64 %ym3, 0
    br i1 %yna, label %theoc, label %elsfc

  theoc:
    %yo3 = call i64* @heapsort (i64* %a2f1, i64 %a1b, i64 %a1c)
    %ypa2 = insertvalue { i1, i64* } zeroinitializer, i1 1, 0
    %x51 = insertvalue { i1, i64* } %ypa2, i64* %yo3, 1
    br label %ctd_igc

  elsfc:
    %yoa2 = add i1 %a1f2, 1
    %yp3 = and i1 %a1da, %yoa2
    br i1 %yp3, label %theod, label %elsfd

  theod:
    %yq2 = call { i1, i64* } @Sorting_Export_Code_unat_sort_maybe_insort_impl (i64* %a2f1, i64 %a1b, i64 %a1e5)
    %a1g1 = extractvalue { i1, i64* } %yq2, 0
    %a2g1 = extractvalue { i1, i64* } %yq2, 1
    br i1 %a1g1, label %theoe, label %elsfe

  theoe:
    %yra = add i64 %a1e5, 1
    %x52 = call { i1, i64* } @Sorting_Export_Code_unat_sort_maybe_insort_impl (i64* %a2g1, i64 %yra, i64 %a1c)
    br label %ctd_ige

  elsfe:
    %yra1 = insertvalue { i1, i64* } zeroinitializer, i1 0, 0
    %x53 = insertvalue { i1, i64* } %yra1, i64* %a2g1, 1
    br label %ctd_ige

  ctd_ige:
    %x54 = phi { i1, i64* } [ %x53, %elsfe ], [ %x52, %theoe ]
    br label %ctd_igd

  elsfd:
    %yqa1 = insertvalue { i1, i64* } zeroinitializer, i1 0, 0
    %x55 = insertvalue { i1, i64* } %yqa1, i64* %a2f1, 1
    br label %ctd_igd

  ctd_igd:
    %x56 = phi { i1, i64* } [ %x55, %elsfd ], [ %x54, %ctd_ige ]
    br label %ctd_igc

  ctd_igc:
    %yo4 = phi { i1, i64* } [ %x56, %ctd_igd ], [ %x51, %theoc ]
    %a1g2 = extractvalue { i1, i64* } %yo4, 0
    %a2g2 = extractvalue { i1, i64* } %yo4, 1
    br i1 %a1g2, label %theof, label %elsff

  theof:
    br label %ctd_igf

  elsff:
    %yp4 = insertvalue { i64, i64 } zeroinitializer, i64 %a1e5, 0
    %tmpf = insertvalue { i64, i64 } %yp4, i64 %ym3, 1
    %yq3 = insertvalue { i64, { i64, i64 } } zeroinitializer, i64 %a1b, 0
    %tmpg = insertvalue { i64, { i64, i64 } } %yq3, { i64, i64 } %tmpf, 1
    %yr2 = insertvalue { i64*, { i64, { i64, i64 } } } zeroinitializer, i64* %a2g2, 0
    %tmph = insertvalue { i64*, { i64, { i64, i64 } } } %yr2, { i64, { i64, i64 } } %tmpg, 1
    %ys2 = insertvalue { i1, { i64*, { i64, { i64, i64 } } } } zeroinitializer, i1 %a1, 0
    %yt1 = insertvalue { i1, { i64*, { i64, { i64, i64 } } } } %ys2, { i64*, { i64, { i64, i64 } } } %tmph, 1
    %ypa3 = call i64* @Sorting_Export_Code_unat_sort_pdqsort_impl_f_07214832 ({ i1, { i64*, { i64, { i64, i64 } } } } %yt1)
    %yqa2 = add i64 %a1e5, 1
    %yv1 = insertvalue { i64, i64 } zeroinitializer, i64 %a1c, 0
    %tmpad1 = insertvalue { i64, i64 } %yv1, i64 %ym3, 1
    %yw1 = insertvalue { i64, { i64, i64 } } zeroinitializer, i64 %yqa2, 0
    %tmpae1 = insertvalue { i64, { i64, i64 } } %yw1, { i64, i64 } %tmpad1, 1
    %yx = insertvalue { i64*, { i64, { i64, i64 } } } zeroinitializer, i64* %ypa3, 0
    %tmpaf1 = insertvalue { i64*, { i64, { i64, i64 } } } %yx, { i64, { i64, i64 } } %tmpae1, 1
    %yy = insertvalue { i1, { i64*, { i64, { i64, i64 } } } } zeroinitializer, i1 0, 0
    %x57 = insertvalue { i1, { i64*, { i64, { i64, i64 } } } } %yy, { i64*, { i64, { i64, i64 } } } %tmpaf1, 1
    %x58 = call i64* @Sorting_Export_Code_unat_sort_pdqsort_impl_f_07214832 ({ i1, { i64*, { i64, { i64, i64 } } } } %x57)
    br label %ctd_igf

  ctd_igf:
    %x59 = phi i64* [ %x58, %elsff ], [ %a2g2, %theof ]
    br label %ctd_ifs

  ctd_ifs:
    %x60 = phi i64* [ %x59, %ctd_igf ], [ %x24, %thens ]
    br label %ctd_if

  ctd_if:
    %x61 = phi i64* [ %x60, %ctd_ifs ], [ %x3, %ctd_ifa ]
    ret i64* %x61
}

define { i64, { i64, i8* } }* @Sorting_Export_Code_str_sort_final_insertion_sort_impl({ i64, { i64, i8* } }* %x, i64 %x1, i64 %x2) {

  start:
    %x3 = sub i64 %x2, %x1
    %xa = icmp sle i64 %x3, 16
    br i1 %xa, label %then, label %else

  then:
    %xb = add i64 %x1, 1
    %x4 = call { i64, { i64, i8* } }* @Sorting_Export_Code_str_sort_guarded_insertion_sort_impl (i64 %x1, i64 %xb, i64 %x2, { i64, { i64, i8* } }* %x)
    br label %ctd_if

  else:
    %xb1 = add i64 %x1, 1
    %xc = add i64 %x1, 16
    %xd = call { i64, { i64, i8* } }* @Sorting_Export_Code_str_sort_guarded_insertion_sort_impl (i64 %x1, i64 %xb1, i64 %xc, { i64, { i64, i8* } }* %x)
    %xe = add i64 %x1, 16
    %x5 = call { i64, { i64, i8* } }* @Sorting_Export_Code_str_sort_unguarded_insertion_sort_impl (i64 %x1, i64 %xe, i64 %x2, { i64, { i64, i8* } }* %xd)
    br label %ctd_if

  ctd_if:
    %x6 = phi { i64, { i64, i8* } }* [ %x5, %else ], [ %x4, %then ]
    ret { i64, { i64, i8* } }* %x6
}

define { i64, { i64, i8* } }* @Sorting_Export_Code_str_sort_pdq_unguarded_insort_impl({ i64, { i64, i8* } }* %x, i64 %x1, i64 %x2) {

  start:
    %x3 = icmp ne i64 %x1, %x2
    br i1 %x3, label %then, label %else

  then:
    %xaa = add i64 %x1, 1
    %xb = insertvalue { i64, { i64, { i64, i8* } }* } zeroinitializer, i64 %xaa, 0
    %xc = insertvalue { i64, { i64, { i64, i8* } }* } %xb, { i64, { i64, i8* } }* %x, 1
    br label %while_start

  while_start:
    %xba = phi { i64, { i64, { i64, i8* } }* } [ %x6, %ctd_ifa ], [ %xc, %then ]
    %a1 = extractvalue { i64, { i64, { i64, i8* } }* } %xba, 0
    %a2 = extractvalue { i64, { i64, { i64, i8* } }* } %xba, 1
    %x4 = icmp slt i64 %a1, %x2
    br i1 %x4, label %while_body, label %while_end

  while_body:
    %a11 = extractvalue { i64, { i64, { i64, i8* } }* } %xba, 0
    %a21 = extractvalue { i64, { i64, { i64, i8* } }* } %xba, 1
    %xca = sub i64 %a11, 1
    %xda = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %a21, i64 %a11
    %r = load { i64, { i64, i8* } }, { i64, { i64, i8* } }* %xda
    %xe = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } zeroinitializer, { i64, { i64, i8* } } %r, 0
    %xf = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xe, { i64, { i64, i8* } }* %a21, 1
    %a1a = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xf, 0
    %a2a = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xf, 1
    %xg = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %a2a, i64 %xca
    %ra = load { i64, { i64, i8* } }, { i64, { i64, i8* } }* %xg
    %xh = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } zeroinitializer, { i64, { i64, i8* } } %ra, 0
    %xi = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xh, { i64, { i64, i8* } }* %a2a, 1
    %a1aa = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xi, 0
    %a2aa = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xi, 1
    %xj = call i1 @Sorting_Strings_strcmp_impl ({ i64, { i64, i8* } } %a1a, { i64, { i64, i8* } } %a1aa)
    %p = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %a2aa, i64 %a11
    store { i64, { i64, i8* } } %a1a, { i64, { i64, i8* } }* %p
    %pa = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %a2aa, i64 %xca
    store { i64, { i64, i8* } } %a1aa, { i64, { i64, i8* } }* %pa
    br i1 %xj, label %thena, label %elsea

  thena:
    %xn = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %a21, i64 %a11
    %rb = load { i64, { i64, i8* } }, { i64, { i64, i8* } }* %xn
    %xo = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } zeroinitializer, { i64, { i64, i8* } } %rb, 0
    %xp = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xo, { i64, { i64, i8* } }* %a21, 1
    %a1b = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xp, 0
    %a2b = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xp, 1
    %xqa = sub i64 %a11, 1
    %xr = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %a2b, i64 %xqa
    %rc = load { i64, { i64, i8* } }, { i64, { i64, i8* } }* %xr
    %xs = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } zeroinitializer, { i64, { i64, i8* } } %rc, 0
    %xt = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xs, { i64, { i64, i8* } }* %a2b, 1
    %a1ab = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xt, 0
    %a2ab = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xt, 1
    %pb = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %a2ab, i64 %a11
    store { i64, { i64, i8* } } %a1ab, { i64, { i64, i8* } }* %pb
    %xva = sub i64 %a11, 1
    %xw = insertvalue { { i64, { i64, i8* } }*, i64 } zeroinitializer, { i64, { i64, i8* } }* %a2ab, 0
    %xx = insertvalue { { i64, { i64, i8* } }*, i64 } %xw, i64 %xva, 1
    br label %while_starta

  while_starta:
    %xwa = phi { { i64, { i64, i8* } }*, i64 } [ %x5, %while_bodya ], [ %xx, %thena ]
    %a1ba = extractvalue { { i64, { i64, i8* } }*, i64 } %xwa, 0
    %a2ba = extractvalue { { i64, { i64, i8* } }*, i64 } %xwa, 1
    %bib = sub i64 %a2ba, 1
    %xxa = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %a1ba, i64 %bib
    %rd = load { i64, { i64, i8* } }, { i64, { i64, i8* } }* %xxa
    %xya = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } zeroinitializer, { i64, { i64, i8* } } %rd, 0
    %xz = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xya, { i64, { i64, i8* } }* %a1ba, 1
    %a1c = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xz, 0
    %a2c = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xz, 1
    %ya = call i1 @Sorting_Strings_strcmp_impl ({ i64, { i64, i8* } } %a1b, { i64, { i64, i8* } } %a1c)
    %pc = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %a2c, i64 %bib
    store { i64, { i64, i8* } } %a1c, { i64, { i64, i8* } }* %pc
    br i1 %ya, label %while_bodya, label %while_enda

  while_bodya:
    %a1ba1 = extractvalue { { i64, { i64, i8* } }*, i64 } %xwa, 0
    %a2ba1 = extractvalue { { i64, { i64, i8* } }*, i64 } %xwa, 1
    %xxa1 = sub i64 %a2ba1, 1
    %xya1 = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %a1ba1, i64 %xxa1
    %rd1 = load { i64, { i64, i8* } }, { i64, { i64, i8* } }* %xya1
    %xz1 = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } zeroinitializer, { i64, { i64, i8* } } %rd1, 0
    %ya1 = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xz1, { i64, { i64, i8* } }* %a1ba1, 1
    %a1c1 = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %ya1, 0
    %a2c1 = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %ya1, 1
    %pc1 = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %a2c1, i64 %a2ba1
    store { i64, { i64, i8* } } %a1c1, { i64, { i64, i8* } }* %pc1
    %yca = sub i64 %a2ba1, 1
    %yd = insertvalue { { i64, { i64, i8* } }*, i64 } zeroinitializer, { i64, { i64, i8* } }* %a2c1, 0
    %x5 = insertvalue { { i64, { i64, i8* } }*, i64 } %yd, i64 %yca, 1
    br label %while_starta

  while_enda:
    %a1ba2 = extractvalue { { i64, { i64, i8* } }*, i64 } %xwa, 0
    %a2ba2 = extractvalue { { i64, { i64, i8* } }*, i64 } %xwa, 1
    %pc2 = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %a1ba2, i64 %a2ba2
    store { i64, { i64, i8* } } %a1b, { i64, { i64, i8* } }* %pc2
    br label %ctd_ifa

  elsea:
    br label %ctd_ifa

  ctd_ifa:
    %xn1 = phi { i64, { i64, i8* } }* [ %a21, %elsea ], [ %a1ba2, %while_enda ]
    %xoa = add i64 %a11, 1
    %xp1 = insertvalue { i64, { i64, { i64, i8* } }* } zeroinitializer, i64 %xoa, 0
    %x6 = insertvalue { i64, { i64, { i64, i8* } }* } %xp1, { i64, { i64, i8* } }* %xn1, 1
    br label %while_start

  while_end:
    %a12 = extractvalue { i64, { i64, { i64, i8* } }* } %xba, 0
    %x7 = extractvalue { i64, { i64, { i64, i8* } }* } %xba, 1
    br label %ctd_if

  else:
    br label %ctd_if

  ctd_if:
    %x8 = phi { i64, { i64, i8* } }* [ %x, %else ], [ %x7, %while_end ]
    ret { i64, { i64, i8* } }* %x8
}

define i64* @Sorting_Export_Code_unat_sort_is_unguarded_insert_impl(i64* %x, i64 %x1, i64 %x2) {

  start:
    %x3 = getelementptr i64, i64* %x, i64 %x2
    %r = load i64, i64* %x3
    %xa = insertvalue { i64, i64* } zeroinitializer, i64 %r, 0
    %xb = insertvalue { i64, i64* } %xa, i64* %x, 1
    %a1 = extractvalue { i64, i64* } %xb, 0
    %a2 = extractvalue { i64, i64* } %xb, 1
    %xc = insertvalue { i64*, i64 } zeroinitializer, i64* %a2, 0
    %xd = insertvalue { i64*, i64 } %xc, i64 %x2, 1
    br label %while_start

  while_start:
    %xca = phi { i64*, i64 } [ %x4, %while_body ], [ %xd, %start ]
    %a1a = extractvalue { i64*, i64 } %xca, 0
    %a2a = extractvalue { i64*, i64 } %xca, 1
    %bib = sub i64 %a2a, 1
    %xda = getelementptr i64, i64* %a1a, i64 %bib
    %ra = load i64, i64* %xda
    %xea = insertvalue { i64, i64* } zeroinitializer, i64 %ra, 0
    %xf = insertvalue { i64, i64* } %xea, i64* %a1a, 1
    %a1b = extractvalue { i64, i64* } %xf, 0
    %a2b = extractvalue { i64, i64* } %xf, 1
    %xg = icmp ult i64 %a1, %a1b
    %p = getelementptr i64, i64* %a2b, i64 %bib
    store i64 %a1b, i64* %p
    br i1 %xg, label %while_body, label %while_end

  while_body:
    %a1a1 = extractvalue { i64*, i64 } %xca, 0
    %a2a1 = extractvalue { i64*, i64 } %xca, 1
    %xda1 = sub i64 %a2a1, 1
    %xea1 = getelementptr i64, i64* %a1a1, i64 %xda1
    %ra1 = load i64, i64* %xea1
    %xf1 = insertvalue { i64, i64* } zeroinitializer, i64 %ra1, 0
    %xg1 = insertvalue { i64, i64* } %xf1, i64* %a1a1, 1
    %a1b1 = extractvalue { i64, i64* } %xg1, 0
    %a2b1 = extractvalue { i64, i64* } %xg1, 1
    %p1 = getelementptr i64, i64* %a2b1, i64 %a2a1
    store i64 %a1b1, i64* %p1
    %xia = sub i64 %a2a1, 1
    %xj = insertvalue { i64*, i64 } zeroinitializer, i64* %a2b1, 0
    %x4 = insertvalue { i64*, i64 } %xj, i64 %xia, 1
    br label %while_start

  while_end:
    %a1a2 = extractvalue { i64*, i64 } %xca, 0
    %a2a2 = extractvalue { i64*, i64 } %xca, 1
    %p2 = getelementptr i64, i64* %a1a2, i64 %a2a2
    store i64 %a1, i64* %p2
    ret i64* %a1a2
}

define i64* @insertion_sort(i64* %x, i64 %x1, i64 %x2) {

  start:
    %x3 = sub i64 %x2, %x1
    %xa = icmp sle i64 %x3, 16
    br i1 %xa, label %then, label %else

  then:
    %xb = add i64 %x1, 1
    %x4 = call i64* @Sorting_Export_Code_unat_sort_guarded_insertion_sort_impl (i64 %x1, i64 %xb, i64 %x2, i64* %x)
    br label %ctd_if

  else:
    %xb1 = add i64 %x1, 1
    %xc = add i64 %x1, 16
    %xd = call i64* @Sorting_Export_Code_unat_sort_guarded_insertion_sort_impl (i64 %x1, i64 %xb1, i64 %xc, i64* %x)
    %xe = add i64 %x1, 16
    %x5 = call i64* @Sorting_Export_Code_unat_sort_unguarded_insertion_sort_impl (i64 %x1, i64 %xe, i64 %x2, i64* %xd)
    br label %ctd_if

  ctd_if:
    %x6 = phi i64* [ %x5, %else ], [ %x4, %then ]
    ret i64* %x6
}

define i64* @Sorting_Export_Code_unat_sort_pdq_unguarded_insort_impl(i64* %x, i64 %x1, i64 %x2) {

  start:
    %x3 = icmp ne i64 %x1, %x2
    br i1 %x3, label %then, label %else

  then:
    %xaa = add i64 %x1, 1
    %xb = insertvalue { i64, i64* } zeroinitializer, i64 %xaa, 0
    %xc = insertvalue { i64, i64* } %xb, i64* %x, 1
    br label %while_start

  while_start:
    %xba = phi { i64, i64* } [ %x6, %ctd_ifa ], [ %xc, %then ]
    %a1 = extractvalue { i64, i64* } %xba, 0
    %a2 = extractvalue { i64, i64* } %xba, 1
    %x4 = icmp slt i64 %a1, %x2
    br i1 %x4, label %while_body, label %while_end

  while_body:
    %a11 = extractvalue { i64, i64* } %xba, 0
    %a21 = extractvalue { i64, i64* } %xba, 1
    %xca = sub i64 %a11, 1
    %xda = getelementptr i64, i64* %a21, i64 %a11
    %r = load i64, i64* %xda
    %xe = insertvalue { i64, i64* } zeroinitializer, i64 %r, 0
    %xf = insertvalue { i64, i64* } %xe, i64* %a21, 1
    %a1a = extractvalue { i64, i64* } %xf, 0
    %a2a = extractvalue { i64, i64* } %xf, 1
    %xg = getelementptr i64, i64* %a2a, i64 %xca
    %ra = load i64, i64* %xg
    %xh = insertvalue { i64, i64* } zeroinitializer, i64 %ra, 0
    %xi = insertvalue { i64, i64* } %xh, i64* %a2a, 1
    %a1aa = extractvalue { i64, i64* } %xi, 0
    %a2aa = extractvalue { i64, i64* } %xi, 1
    %xj = icmp ult i64 %a1a, %a1aa
    %p = getelementptr i64, i64* %a2aa, i64 %a11
    store i64 %a1a, i64* %p
    %pa = getelementptr i64, i64* %a2aa, i64 %xca
    store i64 %a1aa, i64* %pa
    br i1 %xj, label %thena, label %elsea

  thena:
    %xn = getelementptr i64, i64* %a21, i64 %a11
    %rb = load i64, i64* %xn
    %xo = insertvalue { i64, i64* } zeroinitializer, i64 %rb, 0
    %xp = insertvalue { i64, i64* } %xo, i64* %a21, 1
    %a1b = extractvalue { i64, i64* } %xp, 0
    %a2b = extractvalue { i64, i64* } %xp, 1
    %xqa = sub i64 %a11, 1
    %xr = getelementptr i64, i64* %a2b, i64 %xqa
    %rc = load i64, i64* %xr
    %xs = insertvalue { i64, i64* } zeroinitializer, i64 %rc, 0
    %xt = insertvalue { i64, i64* } %xs, i64* %a2b, 1
    %a1ab = extractvalue { i64, i64* } %xt, 0
    %a2ab = extractvalue { i64, i64* } %xt, 1
    %pb = getelementptr i64, i64* %a2ab, i64 %a11
    store i64 %a1ab, i64* %pb
    %xva = sub i64 %a11, 1
    %xw = insertvalue { i64*, i64 } zeroinitializer, i64* %a2ab, 0
    %xx = insertvalue { i64*, i64 } %xw, i64 %xva, 1
    br label %while_starta

  while_starta:
    %xwa = phi { i64*, i64 } [ %x5, %while_bodya ], [ %xx, %thena ]
    %a1ba = extractvalue { i64*, i64 } %xwa, 0
    %a2ba = extractvalue { i64*, i64 } %xwa, 1
    %bib = sub i64 %a2ba, 1
    %xxa = getelementptr i64, i64* %a1ba, i64 %bib
    %rd = load i64, i64* %xxa
    %xya = insertvalue { i64, i64* } zeroinitializer, i64 %rd, 0
    %xz = insertvalue { i64, i64* } %xya, i64* %a1ba, 1
    %a1c = extractvalue { i64, i64* } %xz, 0
    %a2c = extractvalue { i64, i64* } %xz, 1
    %ya = icmp ult i64 %a1b, %a1c
    %pc = getelementptr i64, i64* %a2c, i64 %bib
    store i64 %a1c, i64* %pc
    br i1 %ya, label %while_bodya, label %while_enda

  while_bodya:
    %a1ba1 = extractvalue { i64*, i64 } %xwa, 0
    %a2ba1 = extractvalue { i64*, i64 } %xwa, 1
    %xxa1 = sub i64 %a2ba1, 1
    %xya1 = getelementptr i64, i64* %a1ba1, i64 %xxa1
    %rd1 = load i64, i64* %xya1
    %xz1 = insertvalue { i64, i64* } zeroinitializer, i64 %rd1, 0
    %ya1 = insertvalue { i64, i64* } %xz1, i64* %a1ba1, 1
    %a1c1 = extractvalue { i64, i64* } %ya1, 0
    %a2c1 = extractvalue { i64, i64* } %ya1, 1
    %pc1 = getelementptr i64, i64* %a2c1, i64 %a2ba1
    store i64 %a1c1, i64* %pc1
    %yca = sub i64 %a2ba1, 1
    %yd = insertvalue { i64*, i64 } zeroinitializer, i64* %a2c1, 0
    %x5 = insertvalue { i64*, i64 } %yd, i64 %yca, 1
    br label %while_starta

  while_enda:
    %a1ba2 = extractvalue { i64*, i64 } %xwa, 0
    %a2ba2 = extractvalue { i64*, i64 } %xwa, 1
    %pc2 = getelementptr i64, i64* %a1ba2, i64 %a2ba2
    store i64 %a1b, i64* %pc2
    br label %ctd_ifa

  elsea:
    br label %ctd_ifa

  ctd_ifa:
    %xn1 = phi i64* [ %a21, %elsea ], [ %a1ba2, %while_enda ]
    %xoa = add i64 %a11, 1
    %xp1 = insertvalue { i64, i64* } zeroinitializer, i64 %xoa, 0
    %x6 = insertvalue { i64, i64* } %xp1, i64* %xn1, 1
    br label %while_start

  while_end:
    %a12 = extractvalue { i64, i64* } %xba, 0
    %x7 = extractvalue { i64, i64* } %xba, 1
    br label %ctd_if

  else:
    br label %ctd_if

  ctd_if:
    %x8 = phi i64* [ %x, %else ], [ %x7, %while_end ]
    ret i64* %x8
}

define { i64, { i64, i8* } }* @Sorting_Export_Code_str_sort_guarded_insertion_sort_impl(i64 %x, i64 %x1, i64 %x2, { i64, { i64, i8* } }* %x3) {

  start:
    %x4 = insertvalue { { i64, { i64, i8* } }*, i64 } zeroinitializer, { i64, { i64, i8* } }* %x3, 0
    %xa = insertvalue { { i64, { i64, i8* } }*, i64 } %x4, i64 %x1, 1
    br label %while_start

  while_start:
    %xb = phi { { i64, { i64, i8* } }*, i64 } [ %x6, %while_body ], [ %xa, %start ]
    %a1 = extractvalue { { i64, { i64, i8* } }*, i64 } %xb, 0
    %a2 = extractvalue { { i64, { i64, i8* } }*, i64 } %xb, 1
    %x5 = icmp slt i64 %a2, %x2
    br i1 %x5, label %while_body, label %while_end

  while_body:
    %a11 = extractvalue { { i64, { i64, i8* } }*, i64 } %xb, 0
    %a21 = extractvalue { { i64, { i64, i8* } }*, i64 } %xb, 1
    %xaa = call { i64, { i64, i8* } }* @Sorting_Export_Code_str_sort_is_guarded_insert_impl ({ i64, { i64, i8* } }* %a11, i64 %x, i64 %a21)
    %xba = add i64 %a21, 1
    %xca = insertvalue { { i64, { i64, i8* } }*, i64 } zeroinitializer, { i64, { i64, i8* } }* %xaa, 0
    %x6 = insertvalue { { i64, { i64, i8* } }*, i64 } %xca, i64 %xba, 1
    br label %while_start

  while_end:
    %a12 = extractvalue { { i64, { i64, i8* } }*, i64 } %xb, 0
    %a22 = extractvalue { { i64, { i64, i8* } }*, i64 } %xb, 1
    ret { i64, { i64, i8* } }* %a12
}

define i64* @Sorting_Export_Code_unat_sort_guarded_insertion_sort_impl(i64 %x, i64 %x1, i64 %x2, i64* %x3) {

  start:
    %x4 = insertvalue { i64*, i64 } zeroinitializer, i64* %x3, 0
    %xa = insertvalue { i64*, i64 } %x4, i64 %x1, 1
    br label %while_start

  while_start:
    %xb = phi { i64*, i64 } [ %x6, %while_body ], [ %xa, %start ]
    %a1 = extractvalue { i64*, i64 } %xb, 0
    %a2 = extractvalue { i64*, i64 } %xb, 1
    %x5 = icmp slt i64 %a2, %x2
    br i1 %x5, label %while_body, label %while_end

  while_body:
    %a11 = extractvalue { i64*, i64 } %xb, 0
    %a21 = extractvalue { i64*, i64 } %xb, 1
    %xaa = call i64* @Sorting_Export_Code_unat_sort_is_guarded_insert_impl (i64* %a11, i64 %x, i64 %a21)
    %xba = add i64 %a21, 1
    %xca = insertvalue { i64*, i64 } zeroinitializer, i64* %xaa, 0
    %x6 = insertvalue { i64*, i64 } %xca, i64 %xba, 1
    br label %while_start

  while_end:
    %a12 = extractvalue { i64*, i64 } %xb, 0
    %a22 = extractvalue { i64*, i64 } %xb, 1
    ret i64* %a12
}

define { i64, { i64, i8* } }* @Sorting_Export_Code_str_sort_introsort_aux_impl_f_07240052({ { i64, { i64, i8* } }*, { i64, { i64, i64 } } } %x) {

  start:
    %a1 = extractvalue { { i64, { i64, i8* } }*, { i64, { i64, i64 } } } %x, 0
    %xaa = extractvalue { { i64, { i64, i8* } }*, { i64, { i64, i64 } } } %x, 1
    %a1a = extractvalue { i64, { i64, i64 } } %xaa, 0
    %xba = extractvalue { i64, { i64, i64 } } %xaa, 1
    %a1b = extractvalue { i64, i64 } %xba, 0
    %a2b = extractvalue { i64, i64 } %xba, 1
    %xca = sub i64 %a1b, %a1a
    %xd = icmp slt i64 16, %xca
    br i1 %xd, label %then, label %else

  then:
    %xea = icmp eq i64 %a2b, 0
    br i1 %xea, label %thena, label %elsea

  thena:
    %x1 = call { i64, { i64, i8* } }* @Sorting_Export_Code_str_sort_heapsort_impl ({ i64, { i64, i8* } }* %a1, i64 %a1a, i64 %a1b)
    br label %ctd_ifa

  elsea:
    %xf = sub i64 %a1b, %a1a
    %xga = udiv i64 %xf, 2
    %xh = add i64 %a1a, %xga
    %xia = add i64 %a1a, 1
    %xja = sub i64 %a1b, 1
    %xk = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %a1, i64 %xia
    %r = load { i64, { i64, i8* } }, { i64, { i64, i8* } }* %xk
    %xl = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } zeroinitializer, { i64, { i64, i8* } } %r, 0
    %xm = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xl, { i64, { i64, i8* } }* %a1, 1
    %a1c = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xm, 0
    %a2 = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xm, 1
    %xn = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %a2, i64 %xh
    %ra = load { i64, { i64, i8* } }, { i64, { i64, i8* } }* %xn
    %xo = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } zeroinitializer, { i64, { i64, i8* } } %ra, 0
    %xp = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xo, { i64, { i64, i8* } }* %a2, 1
    %a1aa = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xp, 0
    %a2a = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xp, 1
    %xq = call i1 @Sorting_Strings_strcmp_impl ({ i64, { i64, i8* } } %a1c, { i64, { i64, i8* } } %a1aa)
    %p = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %a2a, i64 %xia
    store { i64, { i64, i8* } } %a1c, { i64, { i64, i8* } }* %p
    %pa = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %a2a, i64 %xh
    store { i64, { i64, i8* } } %a1aa, { i64, { i64, i8* } }* %pa
    br i1 %xq, label %thenb, label %elseb

  thenb:
    %xu = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %a1, i64 %xh
    %rb = load { i64, { i64, i8* } }, { i64, { i64, i8* } }* %xu
    %xv = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } zeroinitializer, { i64, { i64, i8* } } %rb, 0
    %xw = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xv, { i64, { i64, i8* } }* %a1, 1
    %a1d = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xw, 0
    %a2c = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xw, 1
    %xx = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %a2c, i64 %xja
    %rc = load { i64, { i64, i8* } }, { i64, { i64, i8* } }* %xx
    %xy = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } zeroinitializer, { i64, { i64, i8* } } %rc, 0
    %xz = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xy, { i64, { i64, i8* } }* %a2c, 1
    %a1ab = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xz, 0
    %a2aa = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xz, 1
    %ya = call i1 @Sorting_Strings_strcmp_impl ({ i64, { i64, i8* } } %a1d, { i64, { i64, i8* } } %a1ab)
    %pb = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %a2aa, i64 %xh
    store { i64, { i64, i8* } } %a1d, { i64, { i64, i8* } }* %pb
    %pc = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %a2aa, i64 %xja
    store { i64, { i64, i8* } } %a1ab, { i64, { i64, i8* } }* %pc
    br i1 %ya, label %thenc, label %elsec

  thenc:
    %x2 = call { i64, { i64, i8* } }* @Proto_IICF_EOArray_swap_eo_impl1 ({ i64, { i64, i8* } }* %a1, i64 %a1a, i64 %xh)
    br label %ctd_ifc

  elsec:
    %ye = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %a1, i64 %xia
    %rd = load { i64, { i64, i8* } }, { i64, { i64, i8* } }* %ye
    %yf = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } zeroinitializer, { i64, { i64, i8* } } %rd, 0
    %yg = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %yf, { i64, { i64, i8* } }* %a1, 1
    %a1e = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %yg, 0
    %a2d = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %yg, 1
    %yh = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %a2d, i64 %xja
    %re = load { i64, { i64, i8* } }, { i64, { i64, i8* } }* %yh
    %yi = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } zeroinitializer, { i64, { i64, i8* } } %re, 0
    %yj = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %yi, { i64, { i64, i8* } }* %a2d, 1
    %a1ac = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %yj, 0
    %a2ab = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %yj, 1
    %yk = call i1 @Sorting_Strings_strcmp_impl ({ i64, { i64, i8* } } %a1e, { i64, { i64, i8* } } %a1ac)
    %pd = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %a2ab, i64 %xia
    store { i64, { i64, i8* } } %a1e, { i64, { i64, i8* } }* %pd
    %pe = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %a2ab, i64 %xja
    store { i64, { i64, i8* } } %a1ac, { i64, { i64, i8* } }* %pe
    br i1 %yk, label %thend, label %elsed

  thend:
    %x3 = call { i64, { i64, i8* } }* @Proto_IICF_EOArray_swap_eo_impl1 ({ i64, { i64, i8* } }* %a1, i64 %a1a, i64 %xja)
    br label %ctd_ifd

  elsed:
    %x4 = call { i64, { i64, i8* } }* @Proto_IICF_EOArray_swap_eo_impl1 ({ i64, { i64, i8* } }* %a1, i64 %a1a, i64 %xia)
    br label %ctd_ifd

  ctd_ifd:
    %x5 = phi { i64, { i64, i8* } }* [ %x4, %elsed ], [ %x3, %thend ]
    br label %ctd_ifc

  ctd_ifc:
    %x6 = phi { i64, { i64, i8* } }* [ %x5, %ctd_ifd ], [ %x2, %thenc ]
    br label %ctd_ifb

  elseb:
    %xu1 = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %a1, i64 %xia
    %rb1 = load { i64, { i64, i8* } }, { i64, { i64, i8* } }* %xu1
    %xv1 = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } zeroinitializer, { i64, { i64, i8* } } %rb1, 0
    %xw1 = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xv1, { i64, { i64, i8* } }* %a1, 1
    %a1d1 = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xw1, 0
    %a2c1 = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xw1, 1
    %xx1 = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %a2c1, i64 %xja
    %rc1 = load { i64, { i64, i8* } }, { i64, { i64, i8* } }* %xx1
    %xy1 = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } zeroinitializer, { i64, { i64, i8* } } %rc1, 0
    %xz1 = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xy1, { i64, { i64, i8* } }* %a2c1, 1
    %a1ab1 = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xz1, 0
    %a2aa1 = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xz1, 1
    %ya1 = call i1 @Sorting_Strings_strcmp_impl ({ i64, { i64, i8* } } %a1d1, { i64, { i64, i8* } } %a1ab1)
    %pb1 = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %a2aa1, i64 %xia
    store { i64, { i64, i8* } } %a1d1, { i64, { i64, i8* } }* %pb1
    %pc1 = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %a2aa1, i64 %xja
    store { i64, { i64, i8* } } %a1ab1, { i64, { i64, i8* } }* %pc1
    br i1 %ya1, label %thene, label %elsee

  thene:
    %x7 = call { i64, { i64, i8* } }* @Proto_IICF_EOArray_swap_eo_impl1 ({ i64, { i64, i8* } }* %a1, i64 %a1a, i64 %xia)
    br label %ctd_ife

  elsee:
    %ye1 = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %a1, i64 %xh
    %rd1 = load { i64, { i64, i8* } }, { i64, { i64, i8* } }* %ye1
    %yf1 = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } zeroinitializer, { i64, { i64, i8* } } %rd1, 0
    %yg1 = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %yf1, { i64, { i64, i8* } }* %a1, 1
    %a1e1 = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %yg1, 0
    %a2d1 = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %yg1, 1
    %yh1 = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %a2d1, i64 %xja
    %re1 = load { i64, { i64, i8* } }, { i64, { i64, i8* } }* %yh1
    %yi1 = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } zeroinitializer, { i64, { i64, i8* } } %re1, 0
    %yj1 = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %yi1, { i64, { i64, i8* } }* %a2d1, 1
    %a1ac1 = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %yj1, 0
    %a2ab1 = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %yj1, 1
    %yk1 = call i1 @Sorting_Strings_strcmp_impl ({ i64, { i64, i8* } } %a1e1, { i64, { i64, i8* } } %a1ac1)
    %pd1 = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %a2ab1, i64 %xh
    store { i64, { i64, i8* } } %a1e1, { i64, { i64, i8* } }* %pd1
    %pe1 = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %a2ab1, i64 %xja
    store { i64, { i64, i8* } } %a1ac1, { i64, { i64, i8* } }* %pe1
    br i1 %yk1, label %thenf, label %elsef

  thenf:
    %x8 = call { i64, { i64, i8* } }* @Proto_IICF_EOArray_swap_eo_impl1 ({ i64, { i64, i8* } }* %a1, i64 %a1a, i64 %xja)
    br label %ctd_iff

  elsef:
    %x9 = call { i64, { i64, i8* } }* @Proto_IICF_EOArray_swap_eo_impl1 ({ i64, { i64, i8* } }* %a1, i64 %a1a, i64 %xh)
    br label %ctd_iff

  ctd_iff:
    %x10 = phi { i64, { i64, i8* } }* [ %x9, %elsef ], [ %x8, %thenf ]
    br label %ctd_ife

  ctd_ife:
    %x11 = phi { i64, { i64, i8* } }* [ %x10, %ctd_iff ], [ %x7, %thene ]
    br label %ctd_ifb

  ctd_ifb:
    %xu2 = phi { i64, { i64, i8* } }* [ %x11, %ctd_ife ], [ %x6, %ctd_ifc ]
    %xva = add i64 %a1a, 1
    %xw2 = call { { i64, { i64, i8* } }*, i64 } @Sorting_Export_Code_str_sort_qs_partition_impl (i64 %xva, i64 %a1b, i64 %a1a, { i64, { i64, i8* } }* %xu2)
    %a = extractvalue { { i64, { i64, i8* } }*, i64 } %xw2, 0
    %b = extractvalue { { i64, { i64, i8* } }*, i64 } %xw2, 1
    %xx2 = insertvalue { { i64, { i64, i8* } }*, i64 } zeroinitializer, { i64, { i64, i8* } }* %a, 0
    %xy2 = insertvalue { { i64, { i64, i8* } }*, i64 } %xx2, i64 %b, 1
    %a1ca = extractvalue { { i64, { i64, i8* } }*, i64 } %xy2, 0
    %a2c2 = extractvalue { { i64, { i64, i8* } }*, i64 } %xy2, 1
    %xza = sub i64 %a2b, 1
    %ya2 = insertvalue { i64, i64 } zeroinitializer, i64 %a2c2, 0
    %tmpfa = insertvalue { i64, i64 } %ya2, i64 %xza, 1
    %yb = insertvalue { i64, { i64, i64 } } zeroinitializer, i64 %a1a, 0
    %tmpga = insertvalue { i64, { i64, i64 } } %yb, { i64, i64 } %tmpfa, 1
    %yc = insertvalue { { i64, { i64, i8* } }*, { i64, { i64, i64 } } } zeroinitializer, { i64, { i64, i8* } }* %a1ca, 0
    %yd = insertvalue { { i64, { i64, i8* } }*, { i64, { i64, i64 } } } %yc, { i64, { i64, i64 } } %tmpga, 1
    %yaa = call { i64, { i64, i8* } }* @Sorting_Export_Code_str_sort_introsort_aux_impl_f_07240052 ({ { i64, { i64, i8* } }*, { i64, { i64, i64 } } } %yd)
    %yba = sub i64 %a2b, 1
    %yf2 = insertvalue { i64, i64 } zeroinitializer, i64 %a1b, 0
    %tmphb = insertvalue { i64, i64 } %yf2, i64 %yba, 1
    %yg2 = insertvalue { i64, { i64, i64 } } zeroinitializer, i64 %a2c2, 0
    %tmpia = insertvalue { i64, { i64, i64 } } %yg2, { i64, i64 } %tmphb, 1
    %yh2 = insertvalue { { i64, { i64, i8* } }*, { i64, { i64, i64 } } } zeroinitializer, { i64, { i64, i8* } }* %yaa, 0
    %x12 = insertvalue { { i64, { i64, i8* } }*, { i64, { i64, i64 } } } %yh2, { i64, { i64, i64 } } %tmpia, 1
    %x13 = call { i64, { i64, i8* } }* @Sorting_Export_Code_str_sort_introsort_aux_impl_f_07240052 ({ { i64, { i64, i8* } }*, { i64, { i64, i64 } } } %x12)
    br label %ctd_ifa

  ctd_ifa:
    %x14 = phi { i64, { i64, i8* } }* [ %x13, %ctd_ifb ], [ %x1, %thena ]
    br label %ctd_if

  else:
    br label %ctd_if

  ctd_if:
    %x15 = phi { i64, { i64, i8* } }* [ %a1, %else ], [ %x14, %ctd_ifa ]
    ret { i64, { i64, i8* } }* %x15
}

define { i64, { i64, i8* } }* @Sorting_Export_Code_str_sort_unguarded_insertion_sort_impl(i64 %x, i64 %x1, i64 %x2, { i64, { i64, i8* } }* %x3) {

  start:
    %x4 = insertvalue { { i64, { i64, i8* } }*, i64 } zeroinitializer, { i64, { i64, i8* } }* %x3, 0
    %xa = insertvalue { { i64, { i64, i8* } }*, i64 } %x4, i64 %x1, 1
    br label %while_start

  while_start:
    %xb = phi { { i64, { i64, i8* } }*, i64 } [ %x6, %while_body ], [ %xa, %start ]
    %a1 = extractvalue { { i64, { i64, i8* } }*, i64 } %xb, 0
    %a2 = extractvalue { { i64, { i64, i8* } }*, i64 } %xb, 1
    %x5 = icmp slt i64 %a2, %x2
    br i1 %x5, label %while_body, label %while_end

  while_body:
    %a11 = extractvalue { { i64, { i64, i8* } }*, i64 } %xb, 0
    %a21 = extractvalue { { i64, { i64, i8* } }*, i64 } %xb, 1
    %xaa = call { i64, { i64, i8* } }* @Sorting_Export_Code_str_sort_is_unguarded_insert_impl ({ i64, { i64, i8* } }* %a11, i64 %x, i64 %a21)
    %xba = add i64 %a21, 1
    %xca = insertvalue { { i64, { i64, i8* } }*, i64 } zeroinitializer, { i64, { i64, i8* } }* %xaa, 0
    %x6 = insertvalue { { i64, { i64, i8* } }*, i64 } %xca, i64 %xba, 1
    br label %while_start

  while_end:
    %a12 = extractvalue { { i64, { i64, i8* } }*, i64 } %xb, 0
    %a22 = extractvalue { { i64, { i64, i8* } }*, i64 } %xb, 1
    ret { i64, { i64, i8* } }* %a12
}

define i64* @Sorting_Export_Code_unat_sort_introsort_aux_impl_f_07195614({ i64*, { i64, { i64, i64 } } } %x) {

  start:
    %a1 = extractvalue { i64*, { i64, { i64, i64 } } } %x, 0
    %xaa = extractvalue { i64*, { i64, { i64, i64 } } } %x, 1
    %a1a = extractvalue { i64, { i64, i64 } } %xaa, 0
    %xba = extractvalue { i64, { i64, i64 } } %xaa, 1
    %a1b = extractvalue { i64, i64 } %xba, 0
    %a2b = extractvalue { i64, i64 } %xba, 1
    %xca = sub i64 %a1b, %a1a
    %xd = icmp slt i64 16, %xca
    br i1 %xd, label %then, label %else

  then:
    %xea = icmp eq i64 %a2b, 0
    br i1 %xea, label %thena, label %elsea

  thena:
    %x1 = call i64* @heapsort (i64* %a1, i64 %a1a, i64 %a1b)
    br label %ctd_ifa

  elsea:
    %xf = sub i64 %a1b, %a1a
    %xga = udiv i64 %xf, 2
    %xh = add i64 %a1a, %xga
    %xia = add i64 %a1a, 1
    %xja = sub i64 %a1b, 1
    %xk = getelementptr i64, i64* %a1, i64 %xia
    %r = load i64, i64* %xk
    %xl = insertvalue { i64, i64* } zeroinitializer, i64 %r, 0
    %xm = insertvalue { i64, i64* } %xl, i64* %a1, 1
    %a1c = extractvalue { i64, i64* } %xm, 0
    %a2 = extractvalue { i64, i64* } %xm, 1
    %xn = getelementptr i64, i64* %a2, i64 %xh
    %ra = load i64, i64* %xn
    %xo = insertvalue { i64, i64* } zeroinitializer, i64 %ra, 0
    %xp = insertvalue { i64, i64* } %xo, i64* %a2, 1
    %a1aa = extractvalue { i64, i64* } %xp, 0
    %a2a = extractvalue { i64, i64* } %xp, 1
    %xq = icmp ult i64 %a1c, %a1aa
    %p = getelementptr i64, i64* %a2a, i64 %xia
    store i64 %a1c, i64* %p
    %pa = getelementptr i64, i64* %a2a, i64 %xh
    store i64 %a1aa, i64* %pa
    br i1 %xq, label %thenb, label %elseb

  thenb:
    %xu = getelementptr i64, i64* %a1, i64 %xh
    %rb = load i64, i64* %xu
    %xv = insertvalue { i64, i64* } zeroinitializer, i64 %rb, 0
    %xw = insertvalue { i64, i64* } %xv, i64* %a1, 1
    %a1d = extractvalue { i64, i64* } %xw, 0
    %a2c = extractvalue { i64, i64* } %xw, 1
    %xx = getelementptr i64, i64* %a2c, i64 %xja
    %rc = load i64, i64* %xx
    %xy = insertvalue { i64, i64* } zeroinitializer, i64 %rc, 0
    %xz = insertvalue { i64, i64* } %xy, i64* %a2c, 1
    %a1ab = extractvalue { i64, i64* } %xz, 0
    %a2aa = extractvalue { i64, i64* } %xz, 1
    %ya = icmp ult i64 %a1d, %a1ab
    %pb = getelementptr i64, i64* %a2aa, i64 %xh
    store i64 %a1d, i64* %pb
    %pc = getelementptr i64, i64* %a2aa, i64 %xja
    store i64 %a1ab, i64* %pc
    br i1 %ya, label %thenc, label %elsec

  thenc:
    %x2 = call i64* @Proto_IICF_EOArray_swap_eo_impl (i64* %a1, i64 %a1a, i64 %xh)
    br label %ctd_ifc

  elsec:
    %ye = getelementptr i64, i64* %a1, i64 %xia
    %rd = load i64, i64* %ye
    %yf = insertvalue { i64, i64* } zeroinitializer, i64 %rd, 0
    %yg = insertvalue { i64, i64* } %yf, i64* %a1, 1
    %a1e = extractvalue { i64, i64* } %yg, 0
    %a2d = extractvalue { i64, i64* } %yg, 1
    %yh = getelementptr i64, i64* %a2d, i64 %xja
    %re = load i64, i64* %yh
    %yi = insertvalue { i64, i64* } zeroinitializer, i64 %re, 0
    %yj = insertvalue { i64, i64* } %yi, i64* %a2d, 1
    %a1ac = extractvalue { i64, i64* } %yj, 0
    %a2ab = extractvalue { i64, i64* } %yj, 1
    %yk = icmp ult i64 %a1e, %a1ac
    %pd = getelementptr i64, i64* %a2ab, i64 %xia
    store i64 %a1e, i64* %pd
    %pe = getelementptr i64, i64* %a2ab, i64 %xja
    store i64 %a1ac, i64* %pe
    br i1 %yk, label %thend, label %elsed

  thend:
    %x3 = call i64* @Proto_IICF_EOArray_swap_eo_impl (i64* %a1, i64 %a1a, i64 %xja)
    br label %ctd_ifd

  elsed:
    %x4 = call i64* @Proto_IICF_EOArray_swap_eo_impl (i64* %a1, i64 %a1a, i64 %xia)
    br label %ctd_ifd

  ctd_ifd:
    %x5 = phi i64* [ %x4, %elsed ], [ %x3, %thend ]
    br label %ctd_ifc

  ctd_ifc:
    %x6 = phi i64* [ %x5, %ctd_ifd ], [ %x2, %thenc ]
    br label %ctd_ifb

  elseb:
    %xu1 = getelementptr i64, i64* %a1, i64 %xia
    %rb1 = load i64, i64* %xu1
    %xv1 = insertvalue { i64, i64* } zeroinitializer, i64 %rb1, 0
    %xw1 = insertvalue { i64, i64* } %xv1, i64* %a1, 1
    %a1d1 = extractvalue { i64, i64* } %xw1, 0
    %a2c1 = extractvalue { i64, i64* } %xw1, 1
    %xx1 = getelementptr i64, i64* %a2c1, i64 %xja
    %rc1 = load i64, i64* %xx1
    %xy1 = insertvalue { i64, i64* } zeroinitializer, i64 %rc1, 0
    %xz1 = insertvalue { i64, i64* } %xy1, i64* %a2c1, 1
    %a1ab1 = extractvalue { i64, i64* } %xz1, 0
    %a2aa1 = extractvalue { i64, i64* } %xz1, 1
    %ya1 = icmp ult i64 %a1d1, %a1ab1
    %pb1 = getelementptr i64, i64* %a2aa1, i64 %xia
    store i64 %a1d1, i64* %pb1
    %pc1 = getelementptr i64, i64* %a2aa1, i64 %xja
    store i64 %a1ab1, i64* %pc1
    br i1 %ya1, label %thene, label %elsee

  thene:
    %x7 = call i64* @Proto_IICF_EOArray_swap_eo_impl (i64* %a1, i64 %a1a, i64 %xia)
    br label %ctd_ife

  elsee:
    %ye1 = getelementptr i64, i64* %a1, i64 %xh
    %rd1 = load i64, i64* %ye1
    %yf1 = insertvalue { i64, i64* } zeroinitializer, i64 %rd1, 0
    %yg1 = insertvalue { i64, i64* } %yf1, i64* %a1, 1
    %a1e1 = extractvalue { i64, i64* } %yg1, 0
    %a2d1 = extractvalue { i64, i64* } %yg1, 1
    %yh1 = getelementptr i64, i64* %a2d1, i64 %xja
    %re1 = load i64, i64* %yh1
    %yi1 = insertvalue { i64, i64* } zeroinitializer, i64 %re1, 0
    %yj1 = insertvalue { i64, i64* } %yi1, i64* %a2d1, 1
    %a1ac1 = extractvalue { i64, i64* } %yj1, 0
    %a2ab1 = extractvalue { i64, i64* } %yj1, 1
    %yk1 = icmp ult i64 %a1e1, %a1ac1
    %pd1 = getelementptr i64, i64* %a2ab1, i64 %xh
    store i64 %a1e1, i64* %pd1
    %pe1 = getelementptr i64, i64* %a2ab1, i64 %xja
    store i64 %a1ac1, i64* %pe1
    br i1 %yk1, label %thenf, label %elsef

  thenf:
    %x8 = call i64* @Proto_IICF_EOArray_swap_eo_impl (i64* %a1, i64 %a1a, i64 %xja)
    br label %ctd_iff

  elsef:
    %x9 = call i64* @Proto_IICF_EOArray_swap_eo_impl (i64* %a1, i64 %a1a, i64 %xh)
    br label %ctd_iff

  ctd_iff:
    %x10 = phi i64* [ %x9, %elsef ], [ %x8, %thenf ]
    br label %ctd_ife

  ctd_ife:
    %x11 = phi i64* [ %x10, %ctd_iff ], [ %x7, %thene ]
    br label %ctd_ifb

  ctd_ifb:
    %xu2 = phi i64* [ %x11, %ctd_ife ], [ %x6, %ctd_ifc ]
    %xva = add i64 %a1a, 1
    %xw2 = call { i64*, i64 } @Sorting_Export_Code_unat_sort_qs_partition_impl (i64 %xva, i64 %a1b, i64 %a1a, i64* %xu2)
    %a = extractvalue { i64*, i64 } %xw2, 0
    %b = extractvalue { i64*, i64 } %xw2, 1
    %xx2 = insertvalue { i64*, i64 } zeroinitializer, i64* %a, 0
    %xy2 = insertvalue { i64*, i64 } %xx2, i64 %b, 1
    %a1ca = extractvalue { i64*, i64 } %xy2, 0
    %a2c2 = extractvalue { i64*, i64 } %xy2, 1
    %xza = sub i64 %a2b, 1
    %ya2 = insertvalue { i64, i64 } zeroinitializer, i64 %a2c2, 0
    %tmpfa = insertvalue { i64, i64 } %ya2, i64 %xza, 1
    %yb = insertvalue { i64, { i64, i64 } } zeroinitializer, i64 %a1a, 0
    %tmpga = insertvalue { i64, { i64, i64 } } %yb, { i64, i64 } %tmpfa, 1
    %yc = insertvalue { i64*, { i64, { i64, i64 } } } zeroinitializer, i64* %a1ca, 0
    %yd = insertvalue { i64*, { i64, { i64, i64 } } } %yc, { i64, { i64, i64 } } %tmpga, 1
    %yaa = call i64* @Sorting_Export_Code_unat_sort_introsort_aux_impl_f_07195614 ({ i64*, { i64, { i64, i64 } } } %yd)
    %yba = sub i64 %a2b, 1
    %yf2 = insertvalue { i64, i64 } zeroinitializer, i64 %a1b, 0
    %tmphb = insertvalue { i64, i64 } %yf2, i64 %yba, 1
    %yg2 = insertvalue { i64, { i64, i64 } } zeroinitializer, i64 %a2c2, 0
    %tmpia = insertvalue { i64, { i64, i64 } } %yg2, { i64, i64 } %tmphb, 1
    %yh2 = insertvalue { i64*, { i64, { i64, i64 } } } zeroinitializer, i64* %yaa, 0
    %x12 = insertvalue { i64*, { i64, { i64, i64 } } } %yh2, { i64, { i64, i64 } } %tmpia, 1
    %x13 = call i64* @Sorting_Export_Code_unat_sort_introsort_aux_impl_f_07195614 ({ i64*, { i64, { i64, i64 } } } %x12)
    br label %ctd_ifa

  ctd_ifa:
    %x14 = phi i64* [ %x13, %ctd_ifb ], [ %x1, %thena ]
    br label %ctd_if

  else:
    br label %ctd_if

  ctd_if:
    %x15 = phi i64* [ %a1, %else ], [ %x14, %ctd_ifa ]
    ret i64* %x15
}

define i64* @Sorting_Export_Code_unat_sort_unguarded_insertion_sort_impl(i64 %x, i64 %x1, i64 %x2, i64* %x3) {

  start:
    %x4 = insertvalue { i64*, i64 } zeroinitializer, i64* %x3, 0
    %xa = insertvalue { i64*, i64 } %x4, i64 %x1, 1
    br label %while_start

  while_start:
    %xb = phi { i64*, i64 } [ %x6, %while_body ], [ %xa, %start ]
    %a1 = extractvalue { i64*, i64 } %xb, 0
    %a2 = extractvalue { i64*, i64 } %xb, 1
    %x5 = icmp slt i64 %a2, %x2
    br i1 %x5, label %while_body, label %while_end

  while_body:
    %a11 = extractvalue { i64*, i64 } %xb, 0
    %a21 = extractvalue { i64*, i64 } %xb, 1
    %xaa = call i64* @Sorting_Export_Code_unat_sort_is_unguarded_insert_impl (i64* %a11, i64 %x, i64 %a21)
    %xba = add i64 %a21, 1
    %xca = insertvalue { i64*, i64 } zeroinitializer, i64* %xaa, 0
    %x6 = insertvalue { i64*, i64 } %xca, i64 %xba, 1
    br label %while_start

  while_end:
    %a12 = extractvalue { i64*, i64 } %xb, 0
    %a22 = extractvalue { i64*, i64 } %xb, 1
    ret i64* %a12
}
