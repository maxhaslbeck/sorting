; Generated by Isabelle/LLVM-shallow
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"






define i64* @Sorting_Insertion_Sort_insort_interp_is_insert_impl(i64* %x, i64 %x1, i64 %x2) {

  start:
    %x3 = getelementptr i64, i64* %x, i64 %x2
    %r = load i64, i64* %x3
    %xa = insertvalue { i64, i64* } zeroinitializer, i64 %r, 0
    %xb = insertvalue { i64, i64* } %xa, i64* %x, 1
    %a1 = extractvalue { i64, i64* } %xb, 0
    %a2 = extractvalue { i64, i64* } %xb, 1
    %xc = insertvalue { i64*, i64 } zeroinitializer, i64* %a2, 0
    %xd = insertvalue { i64*, i64 } %xc, i64 %x2, 1
    br label %while_start

  while_start:
    %xca = phi { i64*, i64 } [ %x5, %while_body ], [ %xd, %start ]
    %a1a = extractvalue { i64*, i64 } %xca, 0
    %a2a = extractvalue { i64*, i64 } %xca, 1
    %xda = icmp slt i64 %x1, %a2a
    br i1 %xda, label %then, label %else

  then:
    %bib = sub i64 %a2a, 1
    %xea = getelementptr i64, i64* %a1a, i64 %bib
    %ra = load i64, i64* %xea
    %xf = insertvalue { i64, i64* } zeroinitializer, i64 %ra, 0
    %xg = insertvalue { i64, i64* } %xf, i64* %a1a, 1
    %a1b = extractvalue { i64, i64* } %xg, 0
    %a2b = extractvalue { i64, i64* } %xg, 1
    %xh = icmp ult i64 %a1, %a1b
    %p = getelementptr i64, i64* %a2b, i64 %bib
    store i64 %a1b, i64* %p
    br label %ctd_if

  else:
    br label %ctd_if

  ctd_if:
    %x4 = phi i1 [ 0, %else ], [ %xh, %then ]
    br i1 %x4, label %while_body, label %while_end

  while_body:
    %a1a1 = extractvalue { i64*, i64 } %xca, 0
    %a2a1 = extractvalue { i64*, i64 } %xca, 1
    %xda1 = sub i64 %a2a1, 1
    %xea1 = getelementptr i64, i64* %a1a1, i64 %xda1
    %ra1 = load i64, i64* %xea1
    %xf1 = insertvalue { i64, i64* } zeroinitializer, i64 %ra1, 0
    %xg1 = insertvalue { i64, i64* } %xf1, i64* %a1a1, 1
    %a1b1 = extractvalue { i64, i64* } %xg1, 0
    %a2b1 = extractvalue { i64, i64* } %xg1, 1
    %p1 = getelementptr i64, i64* %a2b1, i64 %a2a1
    store i64 %a1b1, i64* %p1
    %xia = sub i64 %a2a1, 1
    %xj = insertvalue { i64*, i64 } zeroinitializer, i64* %a2b1, 0
    %x5 = insertvalue { i64*, i64 } %xj, i64 %xia, 1
    br label %while_start

  while_end:
    %a1a2 = extractvalue { i64*, i64 } %xca, 0
    %a2a2 = extractvalue { i64*, i64 } %xca, 1
    %p2 = getelementptr i64, i64* %a1a2, i64 %a2a2
    store i64 %a1, i64* %p2
    ret i64* %a1a2
}

define i64* @Sorting_Insertion_Sort_insort_interp_insertion_sort_impl(i64* %x, i64 %x1, i64 %x2) {

  start:
    %x3 = insertvalue { i64*, i64 } zeroinitializer, i64* %x, 0
    %xa = insertvalue { i64*, i64 } %x3, i64 %x1, 1
    br label %while_start

  while_start:
    %xb = phi { i64*, i64 } [ %x5, %while_body ], [ %xa, %start ]
    %a1 = extractvalue { i64*, i64 } %xb, 0
    %a2 = extractvalue { i64*, i64 } %xb, 1
    %x4 = icmp slt i64 %a2, %x2
    br i1 %x4, label %while_body, label %while_end

  while_body:
    %a11 = extractvalue { i64*, i64 } %xb, 0
    %a21 = extractvalue { i64*, i64 } %xb, 1
    %xaa = call i64* @Sorting_Insertion_Sort_insort_interp_is_insert_impl (i64* %a11, i64 %x1, i64 %a21)
    %xba = add i64 %a21, 1
    %xca = insertvalue { i64*, i64 } zeroinitializer, i64* %xaa, 0
    %x5 = insertvalue { i64*, i64 } %xca, i64 %xba, 1
    br label %while_start

  while_end:
    %a12 = extractvalue { i64*, i64 } %xb, 0
    %a22 = extractvalue { i64*, i64 } %xb, 1
    ret i64* %a12
}
